

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Jul 20 20:46:20 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4480
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    53                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    54  0000                     
    55                           	psect	idataCOMRAM
    56  0024D9                     __pidataCOMRAM:
    57                           	opt stack 0
    58                           
    59                           ;initializer for _delay_quartz_frequency_value
    60  0024D9  10                 	db	16
    61                           
    62                           	psect	idataBANK0
    63  0024D6                     __pidataBANK0:
    64                           	opt stack 0
    65                           
    66                           ;initializer for _combinazioni
    67  0024D6  01                 	db	1
    68  0024D7  05                 	db	5
    69  0024D8  09                 	db	9
    70                           
    71                           	psect	smallconst
    72  000300                     __psmallconst:
    73                           	opt stack 0
    74  000300  00                 	db	0
    75  000301                     _dpowers:
    76                           	opt stack 0
    77  000301  0001               	dw	1
    78  000303  0000               	dw	0
    79  000305  000A               	dw	10
    80  000307  0000               	dw	0
    81  000309  0064               	dw	100
    82  00030B  0000               	dw	0
    83  00030D  03E8               	dw	1000
    84  00030F  0000               	dw	0
    85  000311  2710               	dw	10000
    86  000313  0000               	dw	0
    87  000315  86A0               	dw	34464
    88  000317  0001               	dw	1
    89  000319  4240               	dw	16960
    90  00031B  000F               	dw	15
    91  00031D  9680               	dw	38528
    92  00031F  0098               	dw	152
    93  000321  E100               	dw	57600
    94  000323  05F5               	dw	1525
    95  000325  CA00               	dw	51712
    96  000327  3B9A               	dw	15258
    97  000329                     __end_of_dpowers:
    98                           	opt stack 0
    99  000329                     __npowers_:
   100                           	opt stack 0
   101  000329  00                 	db	0
   102  00032A  80                 	db	128
   103  00032B  3F                 	db	63
   104  00032C  CD                 	db	205
   105  00032D  CC                 	db	204
   106  00032E  3D                 	db	61
   107  00032F  D7                 	db	215
   108  000330  23                 	db	35
   109  000331  3C                 	db	60
   110  000332  12                 	db	18
   111  000333  83                 	db	131
   112  000334  3A                 	db	58
   113  000335  B7                 	db	183
   114  000336  D1                 	db	209
   115  000337  38                 	db	56
   116  000338  C6                 	db	198
   117  000339  27                 	db	39
   118  00033A  37                 	db	55
   119  00033B  38                 	db	56
   120  00033C  86                 	db	134
   121  00033D  35                 	db	53
   122  00033E  C0                 	db	192
   123  00033F  D6                 	db	214
   124  000340  33                 	db	51
   125  000341  CC                 	db	204
   126  000342  2B                 	db	43
   127  000343  32                 	db	50
   128  000344  70                 	db	112
   129  000345  89                 	db	137
   130  000346  30                 	db	48
   131  000347  E7                 	db	231
   132  000348  DB                 	db	219
   133  000349  2E                 	db	46
   134  00034A  E5                 	db	229
   135  00034B  3C                 	db	60
   136  00034C  1E                 	db	30
   137  00034D  42                 	db	66
   138  00034E  A2                 	db	162
   139  00034F  0D                 	db	13
   140  000350                     __end_of__npowers_:
   141                           	opt stack 0
   142  000350                     __powers_:
   143                           	opt stack 0
   144  000350  00                 	db	0
   145  000351  80                 	db	128
   146  000352  3F                 	db	63
   147  000353  00                 	db	0
   148  000354  20                 	db	32
   149  000355  41                 	db	65
   150  000356  00                 	db	0
   151  000357  C8                 	db	200
   152  000358  42                 	db	66
   153  000359  00                 	db	0
   154  00035A  7A                 	db	122
   155  00035B  44                 	db	68
   156  00035C  40                 	db	64
   157  00035D  1C                 	db	28
   158  00035E  46                 	db	70
   159  00035F  50                 	db	80
   160  000360  C3                 	db	195
   161  000361  47                 	db	71
   162  000362  24                 	db	36
   163  000363  74                 	db	116
   164  000364  49                 	db	73
   165  000365  97                 	db	151
   166  000366  18                 	db	24
   167  000367  4B                 	db	75
   168  000368  BC                 	db	188
   169  000369  BE                 	db	190
   170  00036A  4C                 	db	76
   171  00036B  6B                 	db	107
   172  00036C  6E                 	db	110
   173  00036D  4E                 	db	78
   174  00036E  03                 	db	3
   175  00036F  15                 	db	21
   176  000370  50                 	db	80
   177  000371  79                 	db	121
   178  000372  AD                 	db	173
   179  000373  60                 	db	96
   180  000374  F3                 	db	243
   181  000375  49                 	db	73
   182  000376  71                 	db	113
   183  000377                     __end_of__powers_:
   184                           	opt stack 0
   185  000377                     STR_1:
   186  000377  43                 	db	67	;'C'
   187  000378  69                 	db	105	;'i'
   188  000379  63                 	db	99	;'c'
   189  00037A  6C                 	db	108	;'l'
   190  00037B  6F                 	db	111	;'o'
   191  00037C  20                 	db	32
   192  00037D  72                 	db	114	;'r'
   193  00037E  69                 	db	105	;'i'
   194  00037F  63                 	db	99	;'c'
   195  000380  61                 	db	97	;'a'
   196  000381  72                 	db	114	;'r'
   197  000382  69                 	db	105	;'i'
   198  000383  63                 	db	99	;'c'
   199  000384  61                 	db	97	;'a'
   200  000385  2E                 	db	46
   201  000386  2E                 	db	46
   202  000387  00                 	db	0
   203  000388                     STR_4:
   204  000388  43                 	db	67	;'C'
   205  000389  61                 	db	97	;'a'
   206  00038A  72                 	db	114	;'r'
   207  00038B  69                 	db	105	;'i'
   208  00038C  63                 	db	99	;'c'
   209  00038D  61                 	db	97	;'a'
   210  00038E  20                 	db	32
   211  00038F  74                 	db	116	;'t'
   212  000390  65                 	db	101	;'e'
   213  000391  72                 	db	114	;'r'
   214  000392  6D                 	db	109	;'m'
   215  000393  69                 	db	105	;'i'
   216  000394  6E                 	db	110	;'n'
   217  000395  61                 	db	97	;'a'
   218  000396  74                 	db	116	;'t'
   219  000397  61                 	db	97	;'a'
   220  000398  00                 	db	0
   221  000399                     STR_5:
   222  000399  54                 	db	84	;'T'
   223  00039A  45                 	db	69	;'E'
   224  00039B  53                 	db	83	;'S'
   225  00039C  54                 	db	84	;'T'
   226  00039D  45                 	db	69	;'E'
   227  00039E  52                 	db	82	;'R'
   228  00039F  20                 	db	32
   229  0003A0  42                 	db	66	;'B'
   230  0003A1  41                 	db	65	;'A'
   231  0003A2  54                 	db	84	;'T'
   232  0003A3  54                 	db	84	;'T'
   233  0003A4  45                 	db	69	;'E'
   234  0003A5  52                 	db	82	;'R'
   235  0003A6  49                 	db	73	;'I'
   236  0003A7  45                 	db	69	;'E'
   237  0003A8  00                 	db	0
   238  0003A9                     STR_3:
   239  0003A9  20                 	db	32
   240  0003AA  49                 	db	73	;'I'
   241  0003AB  3A                 	db	58	;':'
   242  0003AC  25                 	db	37
   243  0003AD  2E                 	db	46
   244  0003AE  33                 	db	51	;'3'
   245  0003AF  66                 	db	102	;'f'
   246  0003B0  00                 	db	0
   247  0003B1                     STR_2:
   248  0003B1  56                 	db	86	;'V'
   249  0003B2  3A                 	db	58	;':'
   250  0003B3  25                 	db	37
   251  0003B4  2E                 	db	46
   252  0003B5  33                 	db	51	;'3'
   253  0003B6  66                 	db	102	;'f'
   254  0003B7  00                 	db	0
   255                           
   256                           ; #config settings
   257  0003B8  00                 	db	0	; dummy byte at the end
   258  0000                     
   259                           	psect	nvBANK0
   260  000089                     __pnvBANK0:
   261                           	opt stack 0
   262  000089                     _clock_counter_reference:
   263                           	opt stack 0
   264  000089                     	ds	2
   265  00008B                     _rapporto:
   266                           	opt stack 0
   267  00008B                     	ds	3
   268  0000                     _ADCON0	set	4034
   269  0000                     _ADCON0bits	set	4034
   270  0000                     _ADCON1	set	4033
   271  0000                     _ADCON2	set	4032
   272  0000                     _ADRESH	set	4036
   273  0000                     _ADRESL	set	4035
   274  0000                     _INTCONbits	set	4082
   275  0000                     _LATA	set	3977
   276  0000                     _LATB	set	3978
   277  0000                     _LATC	set	3979
   278  0000                     _LATD	set	3980
   279  0000                     _LATDbits	set	3980
   280  0000                     _PORTCbits	set	3970
   281  0000                     _T0CON	set	4053
   282  0000                     _TMR0H	set	4055
   283  0000                     _TMR0L	set	4054
   284  0000                     _TRISA	set	3986
   285  0000                     _TRISB	set	3987
   286  0000                     _TRISC	set	3988
   287  0000                     _TRISD	set	3989
   288                           
   289                           	psect	cinit
   290  002270                     __pcinit:
   291                           	opt stack 0
   292  002270                     start_initialization:
   293                           	opt stack 0
   294  002270                     __initialization:
   295                           	opt stack 0
   296                           
   297                           ; Clear objects allocated to BANK0 (18 bytes)
   298  002270  EE00  F077         	lfsr	0,__pbssBANK0
   299  002274  0E12               	movlw	18
   300  002276                     clear_0:
   301  002276  6AEE               	clrf	postinc0,c
   302  002278  06E8               	decf	wreg,f,c
   303  00227A  E1FD               	bnz	clear_0
   304                           
   305                           ; Clear objects allocated to COMRAM (18 bytes)
   306  00227C  EE00  F04D         	lfsr	0,__pbssCOMRAM
   307  002280  0E12               	movlw	18
   308  002282                     clear_1:
   309  002282  6AEE               	clrf	postinc0,c
   310  002284  06E8               	decf	wreg,f,c
   311  002286  E1FD               	bnz	clear_1
   312                           
   313                           ; Initialize objects allocated to BANK0 (3 bytes)
   314                           ; load TBLPTR registers with __pidataBANK0
   315  002288  0ED6               	movlw	low __pidataBANK0
   316  00228A  6EF6               	movwf	tblptrl,c
   317  00228C  0E24               	movlw	high __pidataBANK0
   318  00228E  6EF7               	movwf	tblptrh,c
   319  002290  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   320  002292  6EF8               	movwf	tblptru,c
   321  002294  0009               	tblrd		*+	;fetch initializer
   322  002296  CFF5 F08E          	movff	tablat,__pdataBANK0
   323  00229A  0009               	tblrd		*+	;fetch initializer
   324  00229C  CFF5 F08F          	movff	tablat,__pdataBANK0+1
   325  0022A0  0009               	tblrd		*+	;fetch initializer
   326  0022A2  CFF5 F090          	movff	tablat,__pdataBANK0+2
   327                           
   328                           ; Initialize objects allocated to COMRAM (1 bytes)
   329                           ; load TBLPTR registers with __pidataCOMRAM
   330  0022A6  0ED9               	movlw	low __pidataCOMRAM
   331  0022A8  6EF6               	movwf	tblptrl,c
   332  0022AA  0E24               	movlw	high __pidataCOMRAM
   333  0022AC  6EF7               	movwf	tblptrh,c
   334  0022AE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   335  0022B0  6EF8               	movwf	tblptru,c
   336  0022B2  0009               	tblrd		*+	;fetch initializer
   337  0022B4  CFF5 F05F          	movff	tablat,__pdataCOMRAM
   338  0022B8                     end_of_initialization:
   339                           	opt stack 0
   340  0022B8                     __end_of__initialization:
   341                           	opt stack 0
   342  0022B8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   343  0022BA  6EF8               	movwf	tblptru,c
   344  0022BC  0100               	movlb	0
   345  0022BE  EFCA  F00A         	goto	_main	;jump to C main() function
   346                           tblptru	equ	0xFF8
   347                           tblptrh	equ	0xFF7
   348                           tblptrl	equ	0xFF6
   349                           tablat	equ	0xFF5
   350                           postinc0	equ	0xFEE
   351                           wreg	equ	0xFE8
   352                           
   353                           	psect	bssCOMRAM
   354  00004D                     __pbssCOMRAM:
   355                           	opt stack 0
   356  00004D                     _lettura:
   357                           	opt stack 0
   358  00004D                     	ds	6
   359  000053                     _current:
   360                           	opt stack 0
   361  000053                     	ds	3
   362  000056                     _voltage:
   363                           	opt stack 0
   364  000056                     	ds	3
   365  000059                     _minuti:
   366                           	opt stack 0
   367  000059                     	ds	2
   368  00005B                     _ore:
   369                           	opt stack 0
   370  00005B                     	ds	2
   371  00005D                     _secondi:
   372                           	opt stack 0
   373  00005D                     	ds	2
   374                           tblptru	equ	0xFF8
   375                           tblptrh	equ	0xFF7
   376                           tblptrl	equ	0xFF6
   377                           tablat	equ	0xFF5
   378                           postinc0	equ	0xFEE
   379                           wreg	equ	0xFE8
   380                           
   381                           	psect	dataCOMRAM
   382  00005F                     __pdataCOMRAM:
   383                           	opt stack 0
   384  00005F                     _delay_quartz_frequency_value:
   385                           	opt stack 0
   386  00005F                     	ds	1
   387                           tblptru	equ	0xFF8
   388                           tblptrh	equ	0xFF7
   389                           tblptrl	equ	0xFF6
   390                           tablat	equ	0xFF5
   391                           postinc0	equ	0xFEE
   392                           wreg	equ	0xFE8
   393                           
   394                           	psect	bssBANK0
   395  000077                     __pbssBANK0:
   396                           	opt stack 0
   397  000077                     LCD_write_integer@F16259:
   398                           	opt stack 0
   399  000077                     	ds	6
   400  00007D                     _tempo:
   401                           	opt stack 0
   402  00007D                     	ds	4
   403  000081                     _str:
   404                           	opt stack 0
   405  000081                     	ds	8
   406                           tblptru	equ	0xFF8
   407                           tblptrh	equ	0xFF7
   408                           tblptrl	equ	0xFF6
   409                           tablat	equ	0xFF5
   410                           postinc0	equ	0xFEE
   411                           wreg	equ	0xFE8
   412                           
   413                           	psect	dataBANK0
   414  00008E                     __pdataBANK0:
   415                           	opt stack 0
   416  00008E                     _combinazioni:
   417                           	opt stack 0
   418  00008E                     	ds	3
   419                           tblptru	equ	0xFF8
   420                           tblptrh	equ	0xFF7
   421                           tblptrl	equ	0xFF6
   422                           tablat	equ	0xFF5
   423                           postinc0	equ	0xFEE
   424                           wreg	equ	0xFE8
   425                           
   426                           	psect	cstackBANK0
   427  000060                     __pcstackBANK0:
   428                           	opt stack 0
   429  000060                     _sprintf$1139:
   430                           	opt stack 0
   431                           
   432                           ; 3 bytes @ 0x0
   433  000060                     	ds	3
   434  000063                     sprintf@ap:
   435                           	opt stack 0
   436                           
   437                           ; 2 bytes @ 0x3
   438  000063                     	ds	2
   439  000065                     sprintf@flag:
   440                           	opt stack 0
   441                           
   442                           ; 2 bytes @ 0x5
   443  000065                     	ds	2
   444  000067                     sprintf@val:
   445                           	opt stack 0
   446                           
   447                           ; 4 bytes @ 0x7
   448  000067                     	ds	4
   449  00006B                     sprintf@exp:
   450                           	opt stack 0
   451                           
   452                           ; 2 bytes @ 0xB
   453  00006B                     	ds	2
   454  00006D                     sprintf@tmpval:
   455                           	opt stack 0
   456                           
   457                           ; 4 bytes @ 0xD
   458  00006D                     	ds	4
   459  000071                     sprintf@prec:
   460                           	opt stack 0
   461                           
   462                           ; 2 bytes @ 0x11
   463  000071                     	ds	2
   464  000073                     sprintf@fval:
   465                           	opt stack 0
   466                           
   467                           ; 3 bytes @ 0x13
   468  000073                     	ds	3
   469  000076                     sprintf@c:
   470                           	opt stack 0
   471                           
   472                           ; 1 bytes @ 0x16
   473  000076                     	ds	1
   474                           tblptru	equ	0xFF8
   475                           tblptrh	equ	0xFF7
   476                           tblptrl	equ	0xFF6
   477                           tablat	equ	0xFF5
   478                           postinc0	equ	0xFEE
   479                           wreg	equ	0xFE8
   480                           
   481                           	psect	cstackCOMRAM
   482  000001                     __pcstackCOMRAM:
   483                           	opt stack 0
   484  000001                     ??_isdigit:
   485  000001                     ?___awmod:
   486                           	opt stack 0
   487  000001                     ?___ftpack:
   488                           	opt stack 0
   489  000001                     ?___ftneg:
   490                           	opt stack 0
   491  000001                     ?__tdiv_to_l_:
   492                           	opt stack 0
   493  000001                     ?__div_to_l_:
   494                           	opt stack 0
   495  000001                     ?___lldiv:
   496                           	opt stack 0
   497  000001                     ?___llmod:
   498                           	opt stack 0
   499  000001                     LCD_backlight@active:
   500                           	opt stack 0
   501  000001                     delay_set_quartz@frequency:
   502                           	opt stack 0
   503  000001                     ___awmod@dividend:
   504                           	opt stack 0
   505  000001                     __div_to_l_@f1:
   506                           	opt stack 0
   507  000001                     ___ftpack@arg:
   508                           	opt stack 0
   509  000001                     __tdiv_to_l_@f1:
   510                           	opt stack 0
   511  000001                     ___ftge@ff1:
   512                           	opt stack 0
   513  000001                     ___ftneg@f1:
   514                           	opt stack 0
   515  000001                     ___lldiv@dividend:
   516                           	opt stack 0
   517  000001                     ___llmod@dividend:
   518                           	opt stack 0
   519                           
   520                           ; 4 bytes @ 0x0
   521  000001                     	ds	1
   522  000002                     _isdigit$854:
   523                           	opt stack 0
   524                           
   525                           ; 1 bytes @ 0x1
   526  000002                     	ds	1
   527  000003                     isdigit@c:
   528                           	opt stack 0
   529  000003                     ___awmod@divisor:
   530                           	opt stack 0
   531                           
   532                           ; 2 bytes @ 0x2
   533  000003                     	ds	1
   534  000004                     ___ftpack@exp:
   535                           	opt stack 0
   536  000004                     __div_to_l_@f2:
   537                           	opt stack 0
   538  000004                     __tdiv_to_l_@f2:
   539                           	opt stack 0
   540  000004                     ___ftge@ff2:
   541                           	opt stack 0
   542                           
   543                           ; 3 bytes @ 0x3
   544  000004                     	ds	1
   545  000005                     ___awmod@counter:
   546                           	opt stack 0
   547  000005                     ___ftpack@sign:
   548                           	opt stack 0
   549  000005                     ___lldiv@divisor:
   550                           	opt stack 0
   551  000005                     ___llmod@divisor:
   552                           	opt stack 0
   553                           
   554                           ; 4 bytes @ 0x4
   555  000005                     	ds	1
   556  000006                     ??___ftpack:
   557  000006                     ___awmod@sign:
   558                           	opt stack 0
   559                           
   560                           ; 1 bytes @ 0x5
   561  000006                     	ds	1
   562  000007                     ??__tdiv_to_l_:
   563  000007                     ??___ftge:
   564  000007                     ?___awdiv:
   565                           	opt stack 0
   566  000007                     ___awdiv@dividend:
   567                           	opt stack 0
   568  000007                     __div_to_l_@quot:
   569                           	opt stack 0
   570                           
   571                           ; 4 bytes @ 0x6
   572  000007                     	ds	2
   573  000009                     ?___lltoft:
   574                           	opt stack 0
   575  000009                     ?___lwtoft:
   576                           	opt stack 0
   577  000009                     ___llmod@counter:
   578                           	opt stack 0
   579  000009                     ___awdiv@divisor:
   580                           	opt stack 0
   581  000009                     ___lwtoft@c:
   582                           	opt stack 0
   583  000009                     ___lldiv@quotient:
   584                           	opt stack 0
   585  000009                     ___lltoft@c:
   586                           	opt stack 0
   587                           
   588                           ; 4 bytes @ 0x8
   589  000009                     	ds	1
   590  00000A                     __tdiv_to_l_@quot:
   591                           	opt stack 0
   592                           
   593                           ; 4 bytes @ 0x9
   594  00000A                     	ds	1
   595  00000B                     ___awdiv@counter:
   596                           	opt stack 0
   597  00000B                     __div_to_l_@cntr:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0xA
   601  00000B                     	ds	1
   602  00000C                     ___awdiv@sign:
   603                           	opt stack 0
   604  00000C                     __div_to_l_@exp1:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0xB
   608  00000C                     	ds	1
   609  00000D                     ??___lltoft:
   610  00000D                     ___lldiv@counter:
   611                           	opt stack 0
   612  00000D                     ___awdiv@quotient:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0xC
   616  00000D                     	ds	1
   617  00000E                     __tdiv_to_l_@cntr:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0xD
   621  00000E                     	ds	1
   622  00000F                     ?___wmul:
   623                           	opt stack 0
   624  00000F                     __tdiv_to_l_@exp1:
   625                           	opt stack 0
   626  00000F                     ___wmul@multiplier:
   627                           	opt stack 0
   628                           
   629                           ; 2 bytes @ 0xE
   630  00000F                     	ds	2
   631  000011                     ___lltoft@exp:
   632                           	opt stack 0
   633  000011                     ___wmul@multiplicand:
   634                           	opt stack 0
   635                           
   636                           ; 2 bytes @ 0x10
   637  000011                     	ds	2
   638  000013                     ___wmul@product:
   639                           	opt stack 0
   640                           
   641                           ; 2 bytes @ 0x12
   642  000013                     	ds	2
   643  000015                     ?___ftmul:
   644                           	opt stack 0
   645  000015                     delay_ms@value_ms:
   646                           	opt stack 0
   647  000015                     ___ftmul@f1:
   648                           	opt stack 0
   649                           
   650                           ; 3 bytes @ 0x14
   651  000015                     	ds	2
   652  000017                     LCD_send_command@D2:
   653                           	opt stack 0
   654                           
   655                           ; 1 bytes @ 0x16
   656  000017                     	ds	1
   657  000018                     LCD_send_command@D1:
   658                           	opt stack 0
   659  000018                     ___ftmul@f2:
   660                           	opt stack 0
   661                           
   662                           ; 3 bytes @ 0x17
   663  000018                     	ds	1
   664  000019                     LCD_send_command@D0:
   665                           	opt stack 0
   666                           
   667                           ; 1 bytes @ 0x18
   668  000019                     	ds	1
   669  00001A                     LCD_send_command@D3:
   670                           	opt stack 0
   671                           
   672                           ; 1 bytes @ 0x19
   673  00001A                     	ds	1
   674  00001B                     ??___ftmul:
   675  00001B                     LCD_goto_line@line:
   676                           	opt stack 0
   677  00001B                     LCD_write_char@D3:
   678                           	opt stack 0
   679  00001B                     LCD_cursor@blinking:
   680                           	opt stack 0
   681                           
   682                           ; 1 bytes @ 0x1A
   683  00001B                     	ds	1
   684  00001C                     LCD_write_char@D2:
   685                           	opt stack 0
   686  00001C                     LCD_cursor@active:
   687                           	opt stack 0
   688                           
   689                           ; 1 bytes @ 0x1B
   690  00001C                     	ds	1
   691  00001D                     LCD_write_char@D1:
   692                           	opt stack 0
   693  00001D                     LCD_initialize@quartz_frequency:
   694                           	opt stack 0
   695                           
   696                           ; 1 bytes @ 0x1C
   697  00001D                     	ds	1
   698  00001E                     LCD_write_char@D0:
   699                           	opt stack 0
   700  00001E                     ___ftmul@exp:
   701                           	opt stack 0
   702                           
   703                           ; 1 bytes @ 0x1D
   704  00001E                     	ds	1
   705  00001F                     LCD_write_char@value:
   706                           	opt stack 0
   707  00001F                     ___ftmul@f3_as_product:
   708                           	opt stack 0
   709                           
   710                           ; 3 bytes @ 0x1E
   711  00001F                     	ds	1
   712  000020                     LCD_write_message@buffer:
   713                           	opt stack 0
   714  000020                     LCD_write_string@buffer:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x1F
   718  000020                     	ds	2
   719  000022                     ___ftmul@cntr:
   720                           	opt stack 0
   721                           
   722                           ; 1 bytes @ 0x21
   723  000022                     	ds	1
   724  000023                     ___ftmul@sign:
   725                           	opt stack 0
   726                           
   727                           ; 1 bytes @ 0x22
   728  000023                     	ds	1
   729  000024                     ?___ftdiv:
   730                           	opt stack 0
   731  000024                     ?_fround:
   732                           	opt stack 0
   733  000024                     ?_scale:
   734                           	opt stack 0
   735  000024                     ___ftdiv@f1:
   736                           	opt stack 0
   737                           
   738                           ; 3 bytes @ 0x23
   739  000024                     	ds	3
   740  000027                     ___ftdiv@f2:
   741                           	opt stack 0
   742  000027                     _fround$1137:
   743                           	opt stack 0
   744  000027                     _scale$1138:
   745                           	opt stack 0
   746                           
   747                           ; 3 bytes @ 0x26
   748  000027                     	ds	3
   749  00002A                     ??___ftdiv:
   750  00002A                     scale@scl:
   751                           	opt stack 0
   752  00002A                     _fround$1136:
   753                           	opt stack 0
   754                           
   755                           ; 3 bytes @ 0x29
   756  00002A                     	ds	1
   757  00002B                     ?___fttol:
   758                           	opt stack 0
   759  00002B                     ___fttol@f1:
   760                           	opt stack 0
   761                           
   762                           ; 3 bytes @ 0x2A
   763  00002B                     	ds	2
   764  00002D                     fround@prec:
   765                           	opt stack 0
   766  00002D                     ___ftdiv@cntr:
   767                           	opt stack 0
   768                           
   769                           ; 1 bytes @ 0x2C
   770  00002D                     	ds	1
   771  00002E                     ?___ftadd:
   772                           	opt stack 0
   773  00002E                     ___ftadd@f1:
   774                           	opt stack 0
   775  00002E                     ___ftdiv@f3:
   776                           	opt stack 0
   777                           
   778                           ; 3 bytes @ 0x2D
   779  00002E                     	ds	1
   780  00002F                     ??___fttol:
   781                           
   782                           ; 0 bytes @ 0x2E
   783  00002F                     	ds	2
   784  000031                     ___ftdiv@exp:
   785                           	opt stack 0
   786  000031                     ___ftadd@f2:
   787                           	opt stack 0
   788                           
   789                           ; 3 bytes @ 0x30
   790  000031                     	ds	1
   791  000032                     ___ftdiv@sign:
   792                           	opt stack 0
   793                           
   794                           ; 1 bytes @ 0x31
   795  000032                     	ds	1
   796  000033                     ??_read_adc:
   797                           
   798                           ; 0 bytes @ 0x32
   799  000033                     	ds	1
   800  000034                     ??___ftadd:
   801  000034                     ___fttol@sign1:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x33
   805  000034                     	ds	1
   806  000035                     read_adc@i:
   807                           	opt stack 0
   808  000035                     ___fttol@lval:
   809                           	opt stack 0
   810                           
   811                           ; 4 bytes @ 0x34
   812  000035                     	ds	2
   813  000037                     ___ftadd@sign:
   814                           	opt stack 0
   815                           
   816                           ; 1 bytes @ 0x36
   817  000037                     	ds	1
   818  000038                     ___ftadd@exp2:
   819                           	opt stack 0
   820                           
   821                           ; 1 bytes @ 0x37
   822  000038                     	ds	1
   823  000039                     ___ftadd@exp1:
   824                           	opt stack 0
   825  000039                     ___fttol@exp1:
   826                           	opt stack 0
   827                           
   828                           ; 1 bytes @ 0x38
   829  000039                     	ds	1
   830  00003A                     ?___ftsub:
   831                           	opt stack 0
   832  00003A                     ___ftsub@f1:
   833                           	opt stack 0
   834                           
   835                           ; 3 bytes @ 0x39
   836  00003A                     	ds	3
   837  00003D                     ___ftsub@f2:
   838                           	opt stack 0
   839                           
   840                           ; 3 bytes @ 0x3C
   841  00003D                     	ds	3
   842  000040                     ?_sprintf:
   843                           	opt stack 0
   844  000040                     sprintf@sp:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x3F
   848  000040                     	ds	2
   849  000042                     sprintf@f:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x41
   853  000042                     	ds	5
   854  000047                     ??_sprintf:
   855                           
   856                           ; 0 bytes @ 0x46
   857  000047                     	ds	6
   858  00004D                     tblptru	equ	0xFF8
   859                           tblptrh	equ	0xFF7
   860                           tblptrl	equ	0xFF6
   861                           tablat	equ	0xFF5
   862                           postinc0	equ	0xFEE
   863                           wreg	equ	0xFE8
   864                           
   865                           ; 0 bytes @ 0x4C
   866 ;;
   867 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   868 ;;
   869 ;; *************** function _main *****************
   870 ;; Defined at:
   871 ;;		line 44 in file "batterua.c"
   872 ;; Parameters:    Size  Location     Type
   873 ;;		None
   874 ;; Auto vars:     Size  Location     Type
   875 ;;		None
   876 ;; Return value:  Size  Location     Type
   877 ;;		None               void
   878 ;; Registers used:
   879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   880 ;; Tracked objects:
   881 ;;		On entry : 0/0
   882 ;;		On exit  : 0/0
   883 ;;		Unchanged: 0/0
   884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   885 ;;      Params:         0       0       0       0
   886 ;;      Locals:         0       0       0       0
   887 ;;      Temps:          0       0       0       0
   888 ;;      Totals:         0       0       0       0
   889 ;;Total ram usage:        0 bytes
   890 ;; Hardware stack levels required when called:    7
   891 ;; This function calls:
   892 ;;		_LCD_goto_line
   893 ;;		_LCD_write_message
   894 ;;		_LCD_write_string
   895 ;;		___ftdiv
   896 ;;		___ftge
   897 ;;		_delay_ms
   898 ;;		_delay_set_quartz
   899 ;;		_inizializzazione
   900 ;;		_read_adc
   901 ;;		_sprintf
   902 ;; This function is called by:
   903 ;;		Startup code after reset
   904 ;; This function uses a non-reentrant model
   905 ;;
   906                           
   907                           	psect	text0
   908  001594                     __ptext0:
   909                           	opt stack 0
   910  001594                     _main:
   911                           	opt stack 24
   912                           
   913                           ;batterua.c: 45: delay_set_quartz(16);
   914                           
   915                           ;incstack = 0
   916  001594  0E10               	movlw	16
   917  001596  EC67  F012         	call	_delay_set_quartz
   918                           
   919                           ;batterua.c: 46: rapporto = (68000 + 33000);
   920  00159A  0E44               	movlw	68
   921  00159C  0100               	movlb	0	; () banked
   922  00159E  6F8B               	movwf	_rapporto& (0+255),b
   923  0015A0  0EC5               	movlw	197
   924  0015A2  0100               	movlb	0	; () banked
   925  0015A4  6F8C               	movwf	(_rapporto+1)& (0+255),b
   926  0015A6  0E47               	movlw	71
   927  0015A8  0100               	movlb	0	; () banked
   928  0015AA  6F8D               	movwf	(_rapporto+2)& (0+255),b
   929                           
   930                           ; BSR set to: 0
   931                           ;batterua.c: 47: rapporto = 33000 / rapporto;
   932  0015AC  0EE8               	movlw	232
   933  0015AE  6E24               	movwf	___ftdiv@f1,c
   934  0015B0  0E00               	movlw	0
   935  0015B2  6E25               	movwf	___ftdiv@f1+1,c
   936  0015B4  0E47               	movlw	71
   937  0015B6  6E26               	movwf	___ftdiv@f1+2,c
   938  0015B8  C08B  F027         	movff	_rapporto,___ftdiv@f2
   939  0015BC  C08C  F028         	movff	_rapporto+1,___ftdiv@f2+1
   940  0015C0  C08D  F029         	movff	_rapporto+2,___ftdiv@f2+2
   941  0015C4  EC16  F00E         	call	___ftdiv	;wreg free
   942  0015C8  C024  F08B         	movff	?___ftdiv,_rapporto
   943  0015CC  C025  F08C         	movff	?___ftdiv+1,_rapporto+1
   944  0015D0  C026  F08D         	movff	?___ftdiv+2,_rapporto+2
   945                           
   946                           ;batterua.c: 48: inizializzazione();
   947  0015D4  ECD4  F010         	call	_inizializzazione	;wreg free
   948  0015D8  D000               	goto	l3170
   949  0015DA                     l3170:
   950                           
   951                           ;batterua.c: 50: read_adc();
   952  0015DA  ECE9  F009         	call	_read_adc	;wreg free
   953                           
   954                           ;batterua.c: 51: while ((current < -0.5) || (voltage < 13.5)) {
   955  0015DE  D04E               	goto	l3196
   956  0015E0                     l176:
   957                           
   958                           ;batterua.c: 52: PORTCbits.RC6 = 1;
   959  0015E0  8C82               	bsf	3970,6,c	;volatile
   960                           
   961                           ;batterua.c: 53: LCD_goto_line(1);
   962  0015E2  0E01               	movlw	1
   963  0015E4  ECEA  F00E         	call	_LCD_goto_line
   964                           
   965                           ;batterua.c: 54: LCD_write_message("Ciclo ricarica..");
   966  0015E8  0E77               	movlw	low STR_1
   967  0015EA  6E20               	movwf	LCD_write_message@buffer,c
   968  0015EC  0E03               	movlw	high STR_1
   969  0015EE  6E21               	movwf	LCD_write_message@buffer+1,c
   970  0015F0  ECB7  F011         	call	_LCD_write_message	;wreg free
   971                           
   972                           ;batterua.c: 55: LCD_goto_line(2);
   973  0015F4  0E02               	movlw	2
   974  0015F6  ECEA  F00E         	call	_LCD_goto_line
   975                           
   976                           ;batterua.c: 56: sprintf(str, "V:%.3f", voltage);
   977  0015FA  0E81               	movlw	low _str
   978  0015FC  6E40               	movwf	sprintf@sp,c
   979  0015FE  0E00               	movlw	high _str
   980  001600  6E41               	movwf	sprintf@sp+1,c
   981  001602  0EB1               	movlw	low STR_2
   982  001604  6E42               	movwf	sprintf@f,c
   983  001606  0E03               	movlw	high STR_2
   984  001608  6E43               	movwf	sprintf@f+1,c
   985  00160A  C056  F044         	movff	_voltage,?_sprintf+4
   986  00160E  C057  F045         	movff	_voltage+1,?_sprintf+5
   987  001612  C058  F046         	movff	_voltage+2,?_sprintf+6
   988  001616  ECDD  F001         	call	_sprintf	;wreg free
   989                           
   990                           ;batterua.c: 57: str[7] = '\0';
   991  00161A  0E00               	movlw	0
   992  00161C  0100               	movlb	0	; () banked
   993  00161E  6F88               	movwf	(_str+7)& (0+255),b
   994                           
   995                           ; BSR set to: 0
   996                           ;batterua.c: 58: LCD_write_string(str);
   997  001620  0E81               	movlw	low _str
   998  001622  6E20               	movwf	LCD_write_string@buffer,c
   999  001624  0E00               	movlw	high _str
  1000  001626  6E21               	movwf	LCD_write_string@buffer+1,c
  1001  001628  EC1B  F012         	call	_LCD_write_string	;wreg free
  1002                           
  1003                           ;batterua.c: 59: sprintf(str, " I:%.3f", current);
  1004  00162C  0E81               	movlw	low _str
  1005  00162E  6E40               	movwf	sprintf@sp,c
  1006  001630  0E00               	movlw	high _str
  1007  001632  6E41               	movwf	sprintf@sp+1,c
  1008  001634  0EA9               	movlw	low STR_3
  1009  001636  6E42               	movwf	sprintf@f,c
  1010  001638  0E03               	movlw	high STR_3
  1011  00163A  6E43               	movwf	sprintf@f+1,c
  1012  00163C  C053  F044         	movff	_current,?_sprintf+4
  1013  001640  C054  F045         	movff	_current+1,?_sprintf+5
  1014  001644  C055  F046         	movff	_current+2,?_sprintf+6
  1015  001648  ECDD  F001         	call	_sprintf	;wreg free
  1016                           
  1017                           ;batterua.c: 60: str[7] = '\0';
  1018  00164C  0E00               	movlw	0
  1019  00164E  0100               	movlb	0	; () banked
  1020  001650  6F88               	movwf	(_str+7)& (0+255),b
  1021                           
  1022                           ; BSR set to: 0
  1023                           ;batterua.c: 61: LCD_write_string(str);
  1024  001652  0E81               	movlw	low _str
  1025  001654  6E20               	movwf	LCD_write_string@buffer,c
  1026  001656  0E00               	movlw	high _str
  1027  001658  6E21               	movwf	LCD_write_string@buffer+1,c
  1028  00165A  EC1B  F012         	call	_LCD_write_string	;wreg free
  1029                           
  1030                           ;batterua.c: 62: read_adc();
  1031  00165E  ECE9  F009         	call	_read_adc	;wreg free
  1032                           
  1033                           ;batterua.c: 63: delay_ms(500);
  1034  001662  0E01               	movlw	1
  1035  001664  6E16               	movwf	delay_ms@value_ms+1,c
  1036  001666  0EF4               	movlw	244
  1037  001668  6E15               	movwf	delay_ms@value_ms,c
  1038  00166A  EC83  F011         	call	_delay_ms	;wreg free
  1039                           
  1040                           ;batterua.c: 65: delay_ms(1);
  1041  00166E  0E00               	movlw	0
  1042  001670  6E16               	movwf	delay_ms@value_ms+1,c
  1043  001672  0E01               	movlw	1
  1044  001674  6E15               	movwf	delay_ms@value_ms,c
  1045  001676  EC83  F011         	call	_delay_ms	;wreg free
  1046  00167A  D000               	goto	l3196
  1047  00167C                     l3196:
  1048  00167C  C053  F001         	movff	_current,___ftge@ff1
  1049  001680  C054  F002         	movff	_current+1,___ftge@ff1+1
  1050  001684  C055  F003         	movff	_current+2,___ftge@ff1+2
  1051  001688  0E00               	movlw	0
  1052  00168A  6E04               	movwf	___ftge@ff2,c
  1053  00168C  0E00               	movlw	0
  1054  00168E  6E05               	movwf	___ftge@ff2+1,c
  1055  001690  0EBF               	movlw	191
  1056  001692  6E06               	movwf	___ftge@ff2+2,c
  1057  001694  EC92  F00F         	call	___ftge	;wreg free
  1058  001698  A0D8               	btfss	status,0,c
  1059  00169A  D7A2               	goto	l176
  1060  00169C  C056  F001         	movff	_voltage,___ftge@ff1
  1061  0016A0  C057  F002         	movff	_voltage+1,___ftge@ff1+1
  1062  0016A4  C058  F003         	movff	_voltage+2,___ftge@ff1+2
  1063  0016A8  0E00               	movlw	0
  1064  0016AA  6E04               	movwf	___ftge@ff2,c
  1065  0016AC  0E58               	movlw	88
  1066  0016AE  6E05               	movwf	___ftge@ff2+1,c
  1067  0016B0  0E41               	movlw	65
  1068  0016B2  6E06               	movwf	___ftge@ff2+2,c
  1069  0016B4  EC92  F00F         	call	___ftge	;wreg free
  1070  0016B8  A0D8               	btfss	status,0,c
  1071  0016BA  D792               	goto	l176
  1072                           
  1073                           ;batterua.c: 66: }
  1074                           ;batterua.c: 67: if ((current > -1)&&(voltage > 14.5)) {
  1075  0016BC  0E00               	movlw	0
  1076  0016BE  6E01               	movwf	___ftge@ff1,c
  1077  0016C0  0E80               	movlw	128
  1078  0016C2  6E02               	movwf	___ftge@ff1+1,c
  1079  0016C4  0EBF               	movlw	191
  1080  0016C6  6E03               	movwf	___ftge@ff1+2,c
  1081  0016C8  C053  F004         	movff	_current,___ftge@ff2
  1082  0016CC  C054  F005         	movff	_current+1,___ftge@ff2+1
  1083  0016D0  C055  F006         	movff	_current+2,___ftge@ff2+2
  1084  0016D4  EC92  F00F         	call	___ftge	;wreg free
  1085  0016D8  B0D8               	btfsc	status,0,c
  1086  0016DA  D77F               	goto	l3170
  1087  0016DC  0E00               	movlw	0
  1088  0016DE  6E01               	movwf	___ftge@ff1,c
  1089  0016E0  0E68               	movlw	104
  1090  0016E2  6E02               	movwf	___ftge@ff1+1,c
  1091  0016E4  0E41               	movlw	65
  1092  0016E6  6E03               	movwf	___ftge@ff1+2,c
  1093  0016E8  C056  F004         	movff	_voltage,___ftge@ff2
  1094  0016EC  C057  F005         	movff	_voltage+1,___ftge@ff2+1
  1095  0016F0  C058  F006         	movff	_voltage+2,___ftge@ff2+2
  1096  0016F4  EC92  F00F         	call	___ftge	;wreg free
  1097  0016F8  B0D8               	btfsc	status,0,c
  1098  0016FA  D76F               	goto	l3170
  1099                           
  1100                           ;batterua.c: 68: LCD_write_message("Carica terminata");
  1101  0016FC  0E88               	movlw	low STR_4
  1102  0016FE  6E20               	movwf	LCD_write_message@buffer,c
  1103  001700  0E03               	movlw	high STR_4
  1104  001702  6E21               	movwf	LCD_write_message@buffer+1,c
  1105  001704  ECB7  F011         	call	_LCD_write_message	;wreg free
  1106                           
  1107                           ;batterua.c: 69: delay_ms(5000);
  1108  001708  0E13               	movlw	19
  1109  00170A  6E16               	movwf	delay_ms@value_ms+1,c
  1110  00170C  0E88               	movlw	136
  1111  00170E  6E15               	movwf	delay_ms@value_ms,c
  1112  001710  EC83  F011         	call	_delay_ms	;wreg free
  1113  001714  D762               	goto	l3170
  1114  001716  EF00  F000         	goto	start
  1115  00171A                     __end_of_main:
  1116                           	opt stack 0
  1117                           tblptru	equ	0xFF8
  1118                           tblptrh	equ	0xFF7
  1119                           tblptrl	equ	0xFF6
  1120                           tablat	equ	0xFF5
  1121                           postinc0	equ	0xFEE
  1122                           wreg	equ	0xFE8
  1123                           status	equ	0xFD8
  1124                           
  1125 ;; *************** function _sprintf *****************
  1126 ;; Defined at:
  1127 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;  sp              2   63[COMRAM] PTR unsigned char 
  1130 ;;		 -> str(8), 
  1131 ;;  f               2   65[COMRAM] PTR const unsigned char 
  1132 ;;		 -> STR_3(8), STR_2(7), 
  1133 ;; Auto vars:     Size  Location     Type
  1134 ;;  tmpval          4   13[BANK0 ] struct .
  1135 ;;  val             4    7[BANK0 ] unsigned long 
  1136 ;;  fval            3   19[BANK0 ] unsigned long 
  1137 ;;  cp              3    0        PTR const unsigned char 
  1138 ;;  prec            2   17[BANK0 ] int 
  1139 ;;  exp             2   11[BANK0 ] int 
  1140 ;;  flag            2    5[BANK0 ] unsigned short 
  1141 ;;  ap              2    3[BANK0 ] PTR void [1]
  1142 ;;		 -> ?_sprintf(2), 
  1143 ;;  len             2    0        unsigned int 
  1144 ;;  width           2    0        int 
  1145 ;;  c               1   22[BANK0 ] char 
  1146 ;;  d               1    0        unsigned char 
  1147 ;; Return value:  Size  Location     Type
  1148 ;;                  2   63[COMRAM] int 
  1149 ;; Registers used:
  1150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1151 ;; Tracked objects:
  1152 ;;		On entry : 0/0
  1153 ;;		On exit  : 0/0
  1154 ;;		Unchanged: 0/0
  1155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1156 ;;      Params:         7       0       0       0
  1157 ;;      Locals:         0      23       0       0
  1158 ;;      Temps:          6       0       0       0
  1159 ;;      Totals:        13      23       0       0
  1160 ;;Total ram usage:       36 bytes
  1161 ;; Hardware stack levels used:    1
  1162 ;; Hardware stack levels required when called:    3
  1163 ;; This function calls:
  1164 ;;		___awdiv
  1165 ;;		___ftadd
  1166 ;;		___ftge
  1167 ;;		___ftmul
  1168 ;;		___ftneg
  1169 ;;		___ftsub
  1170 ;;		___fttol
  1171 ;;		___lldiv
  1172 ;;		___llmod
  1173 ;;		___lltoft
  1174 ;;		___wmul
  1175 ;;		__div_to_l_
  1176 ;;		__tdiv_to_l_
  1177 ;;		_fround
  1178 ;;		_isdigit
  1179 ;;		_scale
  1180 ;; This function is called by:
  1181 ;;		_main
  1182 ;; This function uses a non-reentrant model
  1183 ;;
  1184                           
  1185                           	psect	text1
  1186  0003BA                     __ptext1:
  1187                           	opt stack 0
  1188  0003BA                     _sprintf:
  1189                           	opt stack 27
  1190                           
  1191                           ;doprnt.c: 494: va_list ap;
  1192                           ;doprnt.c: 499: signed char c;
  1193                           ;doprnt.c: 501: int width;
  1194                           ;doprnt.c: 504: int prec;
  1195                           ;doprnt.c: 508: unsigned short flag;
  1196                           ;doprnt.c: 515: char d;
  1197                           ;doprnt.c: 516: double fval;
  1198                           ;doprnt.c: 517: int exp;
  1199                           ;doprnt.c: 523: union {
  1200                           ;doprnt.c: 524: unsigned long vd;
  1201                           ;doprnt.c: 525: double integ;
  1202                           ;doprnt.c: 526: } tmpval;
  1203                           ;doprnt.c: 528: unsigned long val;
  1204                           ;doprnt.c: 529: unsigned len;
  1205                           ;doprnt.c: 530: const char * cp;
  1206                           ;doprnt.c: 533: *ap = __va_start();
  1207                           
  1208                           ;incstack = 0
  1209  0003BA  0E44               	movlw	low (?_sprintf+4)
  1210  0003BC  0100               	movlb	0	; () banked
  1211  0003BE  6F63               	movwf	sprintf@ap& (0+255),b
  1212  0003C0  0E00               	movlw	high (?_sprintf+4)
  1213  0003C2  0100               	movlb	0	; () banked
  1214  0003C4  6F64               	movwf	(sprintf@ap+1)& (0+255),b
  1215                           
  1216                           ;doprnt.c: 536: while(c = *f++) {
  1217  0003C6  D3F9               	goto	l3072
  1218  0003C8                     l2874:
  1219                           
  1220                           ; BSR set to: 0
  1221                           ;doprnt.c: 538: if(c != '%')
  1222  0003C8  0E25               	movlw	37
  1223  0003CA  0100               	movlb	0	; () banked
  1224  0003CC  1976               	xorwf	sprintf@c& (0+255),w,b
  1225  0003CE  B4D8               	btfsc	status,2,c
  1226  0003D0  D007               	goto	l2880
  1227                           
  1228                           ; BSR set to: 0
  1229                           ;doprnt.c: 540: {
  1230                           ;doprnt.c: 541: ((*sp++ = (c)));
  1231  0003D2  C040  FFD9         	movff	sprintf@sp,fsr2l
  1232  0003D6  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1233  0003DA  C076  FFDF         	movff	sprintf@c,indf2
  1234  0003DE  D3EA               	goto	l3070
  1235  0003E0                     l2880:
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;doprnt.c: 543: }
  1239                           ;doprnt.c: 548: flag = 0;
  1240  0003E0  0E00               	movlw	0
  1241  0003E2  0100               	movlb	0	; () banked
  1242  0003E4  6F66               	movwf	(sprintf@flag+1)& (0+255),b
  1243  0003E6  0E00               	movlw	0
  1244  0003E8  6F65               	movwf	sprintf@flag& (0+255),b
  1245                           
  1246                           ; BSR set to: 0
  1247                           ;doprnt.c: 611: if(*f == '.') {
  1248  0003EA  C042  FFF6         	movff	sprintf@f,tblptrl
  1249  0003EE  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1250  0003F2                     	if	0	;tblptru may be non-zero
  1251  0003F2                     	endif
  1252  0003F2                     	if	0	;tblptru may be non-zero
  1253  0003F2                     	endif
  1254  0003F2  0008               	tblrd		*
  1255  0003F4  50F5               	movf	tablat,w,c
  1256  0003F6  0A2E               	xorlw	46
  1257  0003F8  A4D8               	btfss	status,2,c
  1258  0003FA  D034               	goto	l2894
  1259                           
  1260                           ; BSR set to: 0
  1261                           ;doprnt.c: 612: flag |= 0x4000;
  1262  0003FC  0100               	movlb	0	; () banked
  1263  0003FE  8D66               	bsf	(sprintf@flag+1)& (0+255),6,b
  1264                           
  1265                           ;doprnt.c: 613: f++;
  1266  000400  4A42               	infsnz	sprintf@f,f,c
  1267  000402  2A43               	incf	sprintf@f+1,f,c
  1268                           
  1269                           ; BSR set to: 0
  1270                           ;doprnt.c: 620: {
  1271                           ;doprnt.c: 621: prec = 0;
  1272  000404  0E00               	movlw	0
  1273  000406  0100               	movlb	0	; () banked
  1274  000408  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1275  00040A  0E00               	movlw	0
  1276  00040C  6F71               	movwf	sprintf@prec& (0+255),b
  1277                           
  1278                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1279  00040E  D01E               	goto	l2892
  1280  000410                     l2888:
  1281                           
  1282                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1283  000410  C071  F00F         	movff	sprintf@prec,___wmul@multiplier
  1284  000414  C072  F010         	movff	sprintf@prec+1,___wmul@multiplier+1
  1285  000418  0E00               	movlw	0
  1286  00041A  6E12               	movwf	___wmul@multiplicand+1,c
  1287  00041C  0E0A               	movlw	10
  1288  00041E  6E11               	movwf	___wmul@multiplicand,c
  1289  000420  ECE1  F011         	call	___wmul	;wreg free
  1290  000424  C042  FFF6         	movff	sprintf@f,tblptrl
  1291  000428  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1292  00042C                     	if	0	;tblptru may be non-zero
  1293  00042C                     	endif
  1294  00042C                     	if	0	;tblptru may be non-zero
  1295  00042C                     	endif
  1296  00042C  0008               	tblrd		*
  1297  00042E  50F5               	movf	tablat,w,c
  1298  000430  260F               	addwf	?___wmul,f,c
  1299  000432  0E00               	movlw	0
  1300  000434  2210               	addwfc	?___wmul+1,f,c
  1301  000436  0ED0               	movlw	208
  1302  000438  240F               	addwf	?___wmul,w,c
  1303  00043A  0100               	movlb	0	; () banked
  1304  00043C  6F71               	movwf	sprintf@prec& (0+255),b
  1305  00043E  0EFF               	movlw	255
  1306  000440  2010               	addwfc	?___wmul+1,w,c
  1307  000442  0100               	movlb	0	; () banked
  1308  000444  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1309                           
  1310                           ; BSR set to: 0
  1311  000446  4A42               	infsnz	sprintf@f,f,c
  1312  000448  2A43               	incf	sprintf@f+1,f,c
  1313  00044A  D000               	goto	l2892
  1314  00044C                     l2892:
  1315                           
  1316                           ; BSR set to: 0
  1317  00044C  C042  FFF6         	movff	sprintf@f,tblptrl
  1318  000450  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1319  000454                     	if	0	;tblptru may be non-zero
  1320  000454                     	endif
  1321  000454                     	if	0	;tblptru may be non-zero
  1322  000454                     	endif
  1323  000454  0008               	tblrd		*
  1324  000456  50F5               	movf	tablat,w,c
  1325  000458  EC40  F012         	call	_isdigit
  1326  00045C  A0D8               	btfss	status,0,c
  1327  00045E  D010               	goto	l2902
  1328  000460  D7D7               	goto	l2888
  1329                           
  1330                           ;doprnt.c: 624: }
  1331                           ;doprnt.c: 625: } else {
  1332  000462  D00E               	goto	l2902
  1333  000464                     l2894:
  1334                           
  1335                           ;doprnt.c: 626: prec = 0;
  1336  000464  0E00               	movlw	0
  1337  000466  0100               	movlb	0	; () banked
  1338  000468  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1339  00046A  0E00               	movlw	0
  1340  00046C  6F71               	movwf	sprintf@prec& (0+255),b
  1341                           
  1342                           ; BSR set to: 0
  1343                           ;doprnt.c: 628: flag |= 0x1000;
  1344  00046E  0100               	movlb	0	; () banked
  1345  000470  8966               	bsf	(sprintf@flag+1)& (0+255),4,b
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;doprnt.c: 630: }
  1349                           ;doprnt.c: 635: switch(c = *f++) {
  1350  000472  D006               	goto	l2902
  1351                           
  1352                           ; BSR set to: 0
  1353                           ;doprnt.c: 638: goto alldone;
  1354                           
  1355                           ;doprnt.c: 637: case 0:
  1356  000474  D3B2               	goto	l3074
  1357  000476                     l2898:
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;doprnt.c: 663: flag |= 0x400;
  1361  000476  0100               	movlb	0	; () banked
  1362  000478  8566               	bsf	(sprintf@flag+1)& (0+255),2,b
  1363                           
  1364                           ;doprnt.c: 664: break;
  1365  00047A  D014               	goto	l2904
  1366                           
  1367                           ; BSR set to: 0
  1368                           ;doprnt.c: 813: continue;
  1369                           
  1370                           ;doprnt.c: 802: default:
  1371  00047C  D39E               	goto	l3072
  1372                           
  1373                           ; BSR set to: 0
  1374                           ;doprnt.c: 822: }
  1375  00047E  D012               	goto	l2904
  1376  000480                     l2902:
  1377  000480  C042  FFF6         	movff	sprintf@f,tblptrl
  1378  000484  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1379  000488  4A42               	infsnz	sprintf@f,f,c
  1380  00048A  2A43               	incf	sprintf@f+1,f,c
  1381  00048C                     	if	0	;tblptru may be non-zero
  1382  00048C                     	endif
  1383  00048C                     	if	0	;tblptru may be non-zero
  1384  00048C                     	endif
  1385  00048C  0008               	tblrd		*
  1386  00048E  CFF5 F076          	movff	tablat,sprintf@c
  1387  000492  0100               	movlb	0	; () banked
  1388  000494  5176               	movf	sprintf@c& (0+255),w,b
  1389                           
  1390                           ; Switch size 1, requested type "space"
  1391                           ; Number of cases is 2, Range of values is 0 to 102
  1392                           ; switch strategies available:
  1393                           ; Name         Instructions Cycles
  1394                           ; simple_byte            7     4 (average)
  1395                           ;	Chosen strategy is simple_byte
  1396  000496  0A00               	xorlw	0	; case 0
  1397  000498  B4D8               	btfsc	status,2,c
  1398  00049A  D39F               	goto	l3074
  1399  00049C  0A66               	xorlw	102	; case 102
  1400  00049E  B4D8               	btfsc	status,2,c
  1401  0004A0  D7EA               	goto	l2898
  1402  0004A2  D38B               	goto	l3072
  1403  0004A4                     l2904:
  1404                           
  1405                           ; BSR set to: 0
  1406                           ;doprnt.c: 825: if(flag & (0x700)) {
  1407  0004A4  0E07               	movlw	7
  1408  0004A6  0100               	movlb	0	; () banked
  1409  0004A8  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  1410  0004AA  B4D8               	btfsc	status,2,c
  1411  0004AC  D334               	goto	l3052
  1412                           
  1413                           ; BSR set to: 0
  1414                           ;doprnt.c: 827: if(flag & 0x1000)
  1415  0004AE  0100               	movlb	0	; () banked
  1416  0004B0  A966               	btfss	(sprintf@flag+1)& (0+255),4,b
  1417  0004B2  D006               	goto	l2910
  1418                           
  1419                           ; BSR set to: 0
  1420                           ;doprnt.c: 829: prec = 6;
  1421  0004B4  0E00               	movlw	0
  1422  0004B6  0100               	movlb	0	; () banked
  1423  0004B8  6F72               	movwf	(sprintf@prec+1)& (0+255),b
  1424  0004BA  0E06               	movlw	6
  1425  0004BC  6F71               	movwf	sprintf@prec& (0+255),b
  1426  0004BE  D000               	goto	l2910
  1427  0004C0                     l2910:
  1428                           
  1429                           ; BSR set to: 0
  1430                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1431  0004C0  C063  FFD9         	movff	sprintf@ap,fsr2l
  1432  0004C4  C064  FFDA         	movff	sprintf@ap+1,fsr2h
  1433  0004C8  CFDE F073          	movff	postinc2,sprintf@fval
  1434  0004CC  CFDE F074          	movff	postinc2,sprintf@fval+1
  1435  0004D0  CFDD F075          	movff	postdec2,sprintf@fval+2
  1436                           
  1437                           ; BSR set to: 0
  1438  0004D4  0E03               	movlw	3
  1439  0004D6  0100               	movlb	0	; () banked
  1440  0004D8  2763               	addwf	sprintf@ap& (0+255),f,b
  1441  0004DA  0E00               	movlw	0
  1442  0004DC  2364               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1443                           
  1444                           ; BSR set to: 0
  1445                           ;doprnt.c: 831: if(fval < 0.0) {
  1446  0004DE  0100               	movlb	0	; () banked
  1447  0004E0  AF75               	btfss	(sprintf@fval+2)& (0+255),7,b
  1448  0004E2  D012               	goto	l2920
  1449                           
  1450                           ; BSR set to: 0
  1451                           ;doprnt.c: 832: fval = -fval;
  1452  0004E4  C073  F001         	movff	sprintf@fval,___ftneg@f1
  1453  0004E8  C074  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1454  0004EC  C075  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1455  0004F0  EC2E  F012         	call	___ftneg	;wreg free
  1456  0004F4  C001  F073         	movff	?___ftneg,sprintf@fval
  1457  0004F8  C002  F074         	movff	?___ftneg+1,sprintf@fval+1
  1458  0004FC  C003  F075         	movff	?___ftneg+2,sprintf@fval+2
  1459                           
  1460                           ;doprnt.c: 833: flag |= 0x03;
  1461  000500  0E03               	movlw	3
  1462  000502  0100               	movlb	0	; () banked
  1463  000504  1365               	iorwf	sprintf@flag& (0+255),f,b
  1464  000506  D000               	goto	l2920
  1465  000508                     l2920:
  1466                           
  1467                           ; BSR set to: 0
  1468                           ;doprnt.c: 834: }
  1469                           ;doprnt.c: 835: exp = 0;
  1470  000508  0E00               	movlw	0
  1471  00050A  0100               	movlb	0	; () banked
  1472  00050C  6F6C               	movwf	(sprintf@exp+1)& (0+255),b
  1473  00050E  0E00               	movlw	0
  1474  000510  6F6B               	movwf	sprintf@exp& (0+255),b
  1475                           
  1476                           ; BSR set to: 0
  1477                           ;doprnt.c: 836: if( fval!=0) {
  1478  000512  0100               	movlb	0	; () banked
  1479  000514  5173               	movf	sprintf@fval& (0+255),w,b
  1480  000516  0100               	movlb	0	; () banked
  1481  000518  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1482  00051A  0100               	movlb	0	; () banked
  1483  00051C  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1484  00051E  B4D8               	btfsc	status,2,c
  1485  000520  D08D               	goto	l2948
  1486                           
  1487                           ; BSR set to: 0
  1488                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1489  000522  0E82               	movlw	130
  1490  000524  6E47               	movwf	??_sprintf& (0+255),c
  1491  000526  0EFF               	movlw	255
  1492  000528  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1493  00052A  C073  F049         	movff	sprintf@fval,??_sprintf+2
  1494  00052E  C074  F04A         	movff	sprintf@fval+1,??_sprintf+3
  1495  000532  C075  F04B         	movff	sprintf@fval+2,??_sprintf+4
  1496  000536  C076  F04C         	movff	sprintf@fval+3,??_sprintf+5
  1497  00053A  0E10               	movlw	16
  1498  00053C  D005               	goto	u2740
  1499  00053E                     u2745:
  1500  00053E  90D8               	bcf	status,0,c
  1501  000540  324C               	rrcf	??_sprintf+5,f,c
  1502  000542  324B               	rrcf	??_sprintf+4,f,c
  1503  000544  324A               	rrcf	??_sprintf+3,f,c
  1504  000546  3249               	rrcf	??_sprintf+2,f,c
  1505  000548                     u2740:
  1506  000548  2EE8               	decfsz	wreg,f,c
  1507  00054A  D7F9               	goto	u2745
  1508  00054C  5049               	movf	??_sprintf+2,w,c
  1509  00054E  2447               	addwf	??_sprintf,w,c
  1510  000550  0100               	movlb	0	; () banked
  1511  000552  6F6B               	movwf	sprintf@exp& (0+255),b
  1512  000554  0E00               	movlw	0
  1513  000556  2048               	addwfc	??_sprintf+1,w,c
  1514  000558  0100               	movlb	0	; () banked
  1515  00055A  6F6C               	movwf	(sprintf@exp+1)& (0+255),b
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;doprnt.c: 838: exp--;
  1519  00055C  0100               	movlb	0	; () banked
  1520  00055E  076B               	decf	sprintf@exp& (0+255),f,b
  1521  000560  A0D8               	btfss	status,0,c
  1522  000562  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  1523                           
  1524                           ; BSR set to: 0
  1525                           ;doprnt.c: 839: exp *= 3;
  1526  000564  C06B  F00F         	movff	sprintf@exp,___wmul@multiplier
  1527  000568  C06C  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1528  00056C  0E00               	movlw	0
  1529  00056E  6E12               	movwf	___wmul@multiplicand+1,c
  1530  000570  0E03               	movlw	3
  1531  000572  6E11               	movwf	___wmul@multiplicand,c
  1532  000574  ECE1  F011         	call	___wmul	;wreg free
  1533  000578  C00F  F06B         	movff	?___wmul,sprintf@exp
  1534  00057C  C010  F06C         	movff	?___wmul+1,sprintf@exp+1
  1535                           
  1536                           ;doprnt.c: 840: exp /= 10;
  1537  000580  C06B  F007         	movff	sprintf@exp,___awdiv@dividend
  1538  000584  C06C  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1539  000588  0E00               	movlw	0
  1540  00058A  6E0A               	movwf	___awdiv@divisor+1,c
  1541  00058C  0E0A               	movlw	10
  1542  00058E  6E09               	movwf	___awdiv@divisor,c
  1543  000590  EC47  F00F         	call	___awdiv	;wreg free
  1544  000594  C007  F06B         	movff	?___awdiv,sprintf@exp
  1545  000598  C008  F06C         	movff	?___awdiv+1,sprintf@exp+1
  1546                           
  1547                           ;doprnt.c: 841: if(exp < 0)
  1548  00059C  0100               	movlb	0	; () banked
  1549  00059E  AF6C               	btfss	(sprintf@exp+1)& (0+255),7,b
  1550  0005A0  D005               	goto	l2936
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;doprnt.c: 842: exp--;
  1554  0005A2  0100               	movlb	0	; () banked
  1555  0005A4  076B               	decf	sprintf@exp& (0+255),f,b
  1556  0005A6  A0D8               	btfss	status,0,c
  1557  0005A8  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  1558  0005AA  D000               	goto	l2936
  1559  0005AC                     l2936:
  1560                           
  1561                           ; BSR set to: 0
  1562                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1563  0005AC  0100               	movlb	0	; () banked
  1564  0005AE  516B               	movf	sprintf@exp& (0+255),w,b
  1565  0005B0  0800               	sublw	0
  1566  0005B2  ECF5  F005         	call	_scale
  1567  0005B6  C024  F06D         	movff	?_scale,sprintf@tmpval
  1568  0005BA  C025  F06E         	movff	?_scale+1,sprintf@tmpval+1
  1569  0005BE  C026  F06F         	movff	?_scale+2,sprintf@tmpval+2
  1570                           
  1571                           ;doprnt.c: 847: tmpval.integ *= fval;
  1572  0005C2  C06D  F015         	movff	sprintf@tmpval,___ftmul@f1
  1573  0005C6  C06E  F016         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1574  0005CA  C06F  F017         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1575  0005CE  C073  F018         	movff	sprintf@fval,___ftmul@f2
  1576  0005D2  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  1577  0005D6  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  1578  0005DA  EC27  F00D         	call	___ftmul	;wreg free
  1579  0005DE  C015  F06D         	movff	?___ftmul,sprintf@tmpval
  1580  0005E2  C016  F06E         	movff	?___ftmul+1,sprintf@tmpval+1
  1581  0005E6  C017  F06F         	movff	?___ftmul+2,sprintf@tmpval+2
  1582                           
  1583                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1584  0005EA  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1585  0005EE  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1586  0005F2  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1587  0005F6  0E00               	movlw	0
  1588  0005F8  6E04               	movwf	___ftge@ff2,c
  1589  0005FA  0E80               	movlw	128
  1590  0005FC  6E05               	movwf	___ftge@ff2+1,c
  1591  0005FE  0E3F               	movlw	63
  1592  000600  6E06               	movwf	___ftge@ff2+2,c
  1593  000602  EC92  F00F         	call	___ftge	;wreg free
  1594  000606  B0D8               	btfsc	status,0,c
  1595  000608  D005               	goto	l2944
  1596                           
  1597                           ;doprnt.c: 849: exp--;
  1598  00060A  0100               	movlb	0	; () banked
  1599  00060C  076B               	decf	sprintf@exp& (0+255),f,b
  1600  00060E  A0D8               	btfss	status,0,c
  1601  000610  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  1602  000612  D014               	goto	l2948
  1603  000614                     l2944:
  1604                           
  1605                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1606  000614  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1607  000618  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1608  00061C  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1609  000620  0E00               	movlw	0
  1610  000622  6E04               	movwf	___ftge@ff2,c
  1611  000624  0E20               	movlw	32
  1612  000626  6E05               	movwf	___ftge@ff2+1,c
  1613  000628  0E41               	movlw	65
  1614  00062A  6E06               	movwf	___ftge@ff2+2,c
  1615  00062C  EC92  F00F         	call	___ftge	;wreg free
  1616  000630  A0D8               	btfss	status,0,c
  1617  000632  D004               	goto	l2948
  1618                           
  1619                           ;doprnt.c: 851: exp++;
  1620  000634  0100               	movlb	0	; () banked
  1621  000636  4B6B               	infsnz	sprintf@exp& (0+255),f,b
  1622  000638  2B6C               	incf	(sprintf@exp+1)& (0+255),f,b
  1623                           
  1624                           ; BSR set to: 0
  1625                           
  1626                           ; BSR set to: 0
  1627  00063A  D000               	goto	l2948
  1628  00063C                     l2948:
  1629                           
  1630                           ;doprnt.c: 852: }
  1631                           ;doprnt.c: 1112: if(prec <= 12)
  1632  00063C  0100               	movlb	0	; () banked
  1633  00063E  BF72               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1634  000640  D008               	goto	l2950
  1635  000642  0100               	movlb	0	; () banked
  1636  000644  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  1637  000646  E11E               	bnz	l2952
  1638  000648  0E0D               	movlw	13
  1639  00064A  0100               	movlb	0	; () banked
  1640  00064C  5D71               	subwf	sprintf@prec& (0+255),w,b
  1641  00064E  B0D8               	btfsc	status,0,c
  1642  000650  D019               	goto	l2952
  1643  000652                     l2950:
  1644                           
  1645                           ; BSR set to: 0
  1646                           ;doprnt.c: 1113: fval += fround(prec);
  1647  000652  C073  F02E         	movff	sprintf@fval,___ftadd@f1
  1648  000656  C074  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  1649  00065A  C075  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  1650  00065E  0100               	movlb	0	; () banked
  1651  000660  5171               	movf	sprintf@prec& (0+255),w,b
  1652  000662  ECE5  F007         	call	_fround
  1653  000666  C024  F031         	movff	?_fround,___ftadd@f2
  1654  00066A  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1655  00066E  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1656  000672  EC07  F009         	call	___ftadd	;wreg free
  1657  000676  C02E  F073         	movff	?___ftadd,sprintf@fval
  1658  00067A  C02F  F074         	movff	?___ftadd+1,sprintf@fval+1
  1659  00067E  C030  F075         	movff	?___ftadd+2,sprintf@fval+2
  1660  000682  D000               	goto	l2952
  1661  000684                     l2952:
  1662                           
  1663                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1664  000684  0100               	movlb	0	; () banked
  1665  000686  BF6C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1666  000688  D008               	goto	l2954
  1667  00068A  0100               	movlb	0	; () banked
  1668  00068C  516C               	movf	(sprintf@exp+1)& (0+255),w,b
  1669  00068E  E128               	bnz	l2960
  1670  000690  0E0A               	movlw	10
  1671  000692  0100               	movlb	0	; () banked
  1672  000694  5D6B               	subwf	sprintf@exp& (0+255),w,b
  1673  000696  B0D8               	btfsc	status,0,c
  1674  000698  D023               	goto	l2960
  1675  00069A                     l2954:
  1676                           
  1677                           ; BSR set to: 0
  1678  00069A  0100               	movlb	0	; () banked
  1679  00069C  5173               	movf	sprintf@fval& (0+255),w,b
  1680  00069E  0100               	movlb	0	; () banked
  1681  0006A0  1174               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1682  0006A2  0100               	movlb	0	; () banked
  1683  0006A4  1175               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1684  0006A6  B4D8               	btfsc	status,2,c
  1685  0006A8  D077               	goto	l2974
  1686                           
  1687                           ; BSR set to: 0
  1688  0006AA  C073  F02B         	movff	sprintf@fval,___fttol@f1
  1689  0006AE  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1690  0006B2  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1691  0006B6  ECA3  F00D         	call	___fttol	;wreg free
  1692  0006BA  502B               	movf	?___fttol,w,c
  1693  0006BC  102C               	iorwf	?___fttol+1,w,c
  1694  0006BE  102D               	iorwf	?___fttol+2,w,c
  1695  0006C0  102E               	iorwf	?___fttol+3,w,c
  1696  0006C2  A4D8               	btfss	status,2,c
  1697  0006C4  D069               	goto	l2974
  1698  0006C6  0100               	movlb	0	; () banked
  1699  0006C8  BF6C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1700  0006CA  D066               	goto	l2974
  1701  0006CC  0100               	movlb	0	; () banked
  1702  0006CE  516C               	movf	(sprintf@exp+1)& (0+255),w,b
  1703  0006D0  E107               	bnz	l2960
  1704  0006D2  0E02               	movlw	2
  1705  0006D4  0100               	movlb	0	; () banked
  1706  0006D6  5D6B               	subwf	sprintf@exp& (0+255),w,b
  1707  0006D8  B0D8               	btfsc	status,0,c
  1708  0006DA  D002               	goto	l2960
  1709  0006DC  D05D               	goto	l2974
  1710  0006DE  D000               	goto	l2960
  1711  0006E0                     l2960:
  1712                           
  1713                           ; BSR set to: 0
  1714                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1715  0006E0  C06D  F001         	movff	sprintf@tmpval,___ftge@ff1
  1716  0006E4  C06E  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1717  0006E8  C06F  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1718  0006EC  0E70               	movlw	112
  1719  0006EE  6E04               	movwf	___ftge@ff2,c
  1720  0006F0  0E89               	movlw	137
  1721  0006F2  6E05               	movwf	___ftge@ff2+1,c
  1722  0006F4  0E40               	movlw	64
  1723  0006F6  6E06               	movwf	___ftge@ff2+2,c
  1724  0006F8  EC92  F00F         	call	___ftge	;wreg free
  1725  0006FC  B0D8               	btfsc	status,0,c
  1726  0006FE  D003               	goto	l2964
  1727                           
  1728                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1729  000700  0100               	movlb	0	; () banked
  1730  000702  0EF7               	movlw	247
  1731  000704  D002               	goto	L1
  1732  000706                     l2964:
  1733                           
  1734                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1735  000706  0100               	movlb	0	; () banked
  1736  000708  0EF8               	movlw	248
  1737  00070A                     L1:
  1738  00070A  276B               	addwf	sprintf@exp& (0+255),f,b
  1739  00070C  0EFF               	movlw	255
  1740  00070E  236C               	addwfc	(sprintf@exp+1)& (0+255),f,b
  1741  000710  D000               	goto	l2966
  1742  000712                     l2966:
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;doprnt.c: 1124: }
  1746                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1747  000712  0100               	movlb	0	; () banked
  1748  000714  516B               	movf	sprintf@exp& (0+255),w,b
  1749  000716  ECF5  F005         	call	_scale
  1750  00071A  C024  F06D         	movff	?_scale,sprintf@tmpval
  1751  00071E  C025  F06E         	movff	?_scale+1,sprintf@tmpval+1
  1752  000722  C026  F06F         	movff	?_scale+2,sprintf@tmpval+2
  1753                           
  1754                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1755  000726  D017               	goto	l2970
  1756  000728  C073  F001         	movff	sprintf@fval,__div_to_l_@f1
  1757  00072C  C074  F002         	movff	sprintf@fval+1,__div_to_l_@f1+1
  1758  000730  C075  F003         	movff	sprintf@fval+2,__div_to_l_@f1+2
  1759  000734  C06D  F004         	movff	sprintf@tmpval,__div_to_l_@f2
  1760  000738  C06E  F005         	movff	sprintf@tmpval+1,__div_to_l_@f2+1
  1761  00073C  C06F  F006         	movff	sprintf@tmpval+2,__div_to_l_@f2+2
  1762  000740  ECA2  F00C         	call	__div_to_l_	;wreg free
  1763  000744  C001  F067         	movff	?__div_to_l_,sprintf@val
  1764  000748  C002  F068         	movff	?__div_to_l_+1,sprintf@val+1
  1765  00074C  C003  F069         	movff	?__div_to_l_+2,sprintf@val+2
  1766  000750  C004  F06A         	movff	?__div_to_l_+3,sprintf@val+3
  1767  000754  D017               	goto	l2972
  1768  000756                     l2970:
  1769  000756  C073  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  1770  00075A  C074  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1771  00075E  C075  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1772  000762  C06D  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1773  000766  C06E  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1774  00076A  C06F  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1775  00076E  EC1A  F00C         	call	__tdiv_to_l_	;wreg free
  1776  000772  C001  F067         	movff	?__tdiv_to_l_,sprintf@val
  1777  000776  C002  F068         	movff	?__tdiv_to_l_+1,sprintf@val+1
  1778  00077A  C003  F069         	movff	?__tdiv_to_l_+2,sprintf@val+2
  1779  00077E  C004  F06A         	movff	?__tdiv_to_l_+3,sprintf@val+3
  1780  000782  D000               	goto	l2972
  1781  000784                     l2972:
  1782                           
  1783                           ;doprnt.c: 1129: fval = 0.0;
  1784  000784  0E00               	movlw	0
  1785  000786  0100               	movlb	0	; () banked
  1786  000788  6F73               	movwf	sprintf@fval& (0+255),b
  1787  00078A  0E00               	movlw	0
  1788  00078C  0100               	movlb	0	; () banked
  1789  00078E  6F74               	movwf	(sprintf@fval+1)& (0+255),b
  1790  000790  0E00               	movlw	0
  1791  000792  0100               	movlb	0	; () banked
  1792  000794  6F75               	movwf	(sprintf@fval+2)& (0+255),b
  1793                           
  1794                           ;doprnt.c: 1130: } else {
  1795  000796  D034               	goto	l2978
  1796  000798                     l2974:
  1797                           
  1798                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1799  000798  C073  F02B         	movff	sprintf@fval,___fttol@f1
  1800  00079C  C074  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1801  0007A0  C075  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1802  0007A4  ECA3  F00D         	call	___fttol	;wreg free
  1803  0007A8  C02B  F067         	movff	?___fttol,sprintf@val
  1804  0007AC  C02C  F068         	movff	?___fttol+1,sprintf@val+1
  1805  0007B0  C02D  F069         	movff	?___fttol+2,sprintf@val+2
  1806  0007B4  C02E  F06A         	movff	?___fttol+3,sprintf@val+3
  1807                           
  1808                           ;doprnt.c: 1132: fval -= (double)val;
  1809  0007B8  C073  F03A         	movff	sprintf@fval,___ftsub@f1
  1810  0007BC  C074  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  1811  0007C0  C075  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  1812  0007C4  C067  F009         	movff	sprintf@val,___lltoft@c
  1813  0007C8  C068  F00A         	movff	sprintf@val+1,___lltoft@c+1
  1814  0007CC  C069  F00B         	movff	sprintf@val+2,___lltoft@c+2
  1815  0007D0  C06A  F00C         	movff	sprintf@val+3,___lltoft@c+3
  1816  0007D4  EC08  F011         	call	___lltoft	;wreg free
  1817  0007D8  C009  F03D         	movff	?___lltoft,___ftsub@f2
  1818  0007DC  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  1819  0007E0  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  1820  0007E4  EC61  F011         	call	___ftsub	;wreg free
  1821  0007E8  C03A  F073         	movff	?___ftsub,sprintf@fval
  1822  0007EC  C03B  F074         	movff	?___ftsub+1,sprintf@fval+1
  1823  0007F0  C03C  F075         	movff	?___ftsub+2,sprintf@fval+2
  1824                           
  1825                           ;doprnt.c: 1133: exp = 0;
  1826  0007F4  0E00               	movlw	0
  1827  0007F6  0100               	movlb	0	; () banked
  1828  0007F8  6F6C               	movwf	(sprintf@exp+1)& (0+255),b
  1829  0007FA  0E00               	movlw	0
  1830  0007FC  6F6B               	movwf	sprintf@exp& (0+255),b
  1831  0007FE  D000               	goto	l2978
  1832  000800                     l2978:
  1833                           
  1834                           ; BSR set to: 0
  1835                           ;doprnt.c: 1134: }
  1836                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1837  000800  0E01               	movlw	1
  1838  000802  0100               	movlb	0	; () banked
  1839  000804  6F76               	movwf	sprintf@c& (0+255),b
  1840  000806                     l2980:
  1841                           
  1842                           ; BSR set to: 0
  1843  000806  0E0A               	movlw	10
  1844  000808  0100               	movlb	0	; () banked
  1845  00080A  1976               	xorwf	sprintf@c& (0+255),w,b
  1846  00080C  B4D8               	btfsc	status,2,c
  1847  00080E  D022               	goto	l2992
  1848  000810  D001               	goto	l2984
  1849                           
  1850                           ; BSR set to: 0
  1851  000812  D020               	goto	l2992
  1852  000814                     l2984:
  1853                           
  1854                           ; BSR set to: 0
  1855                           ;doprnt.c: 1137: if(val < dpowers[c])
  1856  000814  0100               	movlb	0	; () banked
  1857  000816  5176               	movf	sprintf@c& (0+255),w,b
  1858  000818  0D04               	mullw	4
  1859  00081A  0E01               	movlw	low _dpowers
  1860  00081C  24F3               	addwf	prodl,w,c
  1861  00081E  6EF6               	movwf	tblptrl,c
  1862  000820  0E03               	movlw	high _dpowers
  1863  000822  20F4               	addwfc	prodh,w,c
  1864  000824  6EF7               	movwf	tblptrh,c
  1865  000826                     	if	0	;There are less than 3 active tblptr bytes
  1866  000826                     	endif
  1867  000826  0009               	tblrd		*+
  1868  000828  50F5               	movf	tablat,w,c
  1869  00082A  0100               	movlb	0	; () banked
  1870  00082C  5D67               	subwf	sprintf@val& (0+255),w,b
  1871  00082E  0009               	tblrd		*+
  1872  000830  50F5               	movf	tablat,w,c
  1873  000832  0100               	movlb	0	; () banked
  1874  000834  5968               	subwfb	(sprintf@val+1)& (0+255),w,b
  1875  000836  0009               	tblrd		*+
  1876  000838  50F5               	movf	tablat,w,c
  1877  00083A  0100               	movlb	0	; () banked
  1878  00083C  5969               	subwfb	(sprintf@val+2)& (0+255),w,b
  1879  00083E  0009               	tblrd		*+
  1880  000840  50F5               	movf	tablat,w,c
  1881  000842  0100               	movlb	0	; () banked
  1882  000844  596A               	subwfb	(sprintf@val+3)& (0+255),w,b
  1883  000846  A0D8               	btfss	status,0,c
  1884  000848  D005               	goto	l2992
  1885  00084A  D001               	goto	l2988
  1886                           
  1887                           ; BSR set to: 0
  1888                           ;doprnt.c: 1138: break;
  1889  00084C  D003               	goto	l2992
  1890  00084E                     l2988:
  1891                           
  1892                           ; BSR set to: 0
  1893  00084E  0100               	movlb	0	; () banked
  1894  000850  2B76               	incf	sprintf@c& (0+255),f,b
  1895  000852  D7D9               	goto	l2980
  1896  000854                     l2992:
  1897                           
  1898                           ; BSR set to: 0
  1899                           ;doprnt.c: 1175: {
  1900                           ;doprnt.c: 1188: if(flag & 0x03)
  1901  000854  0E03               	movlw	3
  1902  000856  0100               	movlb	0	; () banked
  1903  000858  1565               	andwf	sprintf@flag& (0+255),w,b
  1904  00085A  6E47               	movwf	??_sprintf& (0+255),c
  1905  00085C  0E00               	movlw	0
  1906  00085E  0100               	movlb	0	; () banked
  1907  000860  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  1908  000862  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1909  000864  5047               	movf	??_sprintf,w,c
  1910  000866  1048               	iorwf	??_sprintf+1,w,c
  1911  000868  B4D8               	btfsc	status,2,c
  1912  00086A  D053               	goto	l3006
  1913                           
  1914                           ; BSR set to: 0
  1915                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  1916  00086C  C040  FFD9         	movff	sprintf@sp,fsr2l
  1917  000870  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1918  000874  0E2D               	movlw	45
  1919  000876  D04B               	goto	L2
  1920  000878                     l2996:
  1921                           
  1922                           ; BSR set to: 0
  1923  000878  4A40               	infsnz	sprintf@sp,f,c
  1924  00087A  2A41               	incf	sprintf@sp+1,f,c
  1925                           
  1926                           ; BSR set to: 0
  1927                           ;doprnt.c: 1195: }
  1928                           ;doprnt.c: 1196: while(c--) {
  1929  00087C  D04A               	goto	l3006
  1930  00087E                     l2998:
  1931                           
  1932                           ; BSR set to: 0
  1933                           ;doprnt.c: 1200: {
  1934                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1935  00087E  C067  F001         	movff	sprintf@val,___lldiv@dividend
  1936  000882  C068  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1937  000886  C069  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1938  00088A  C06A  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1939  00088E  0100               	movlb	0	; () banked
  1940  000890  5176               	movf	sprintf@c& (0+255),w,b
  1941  000892  0D04               	mullw	4
  1942  000894  0E01               	movlw	low _dpowers
  1943  000896  24F3               	addwf	prodl,w,c
  1944  000898  6EF6               	movwf	tblptrl,c
  1945  00089A  0E03               	movlw	high _dpowers
  1946  00089C  20F4               	addwfc	prodh,w,c
  1947  00089E  6EF7               	movwf	tblptrh,c
  1948  0008A0                     	if	0	;There are less than 3 active tblptr bytes
  1949  0008A0                     	endif
  1950  0008A0  0009               	tblrd		*+
  1951  0008A2  CFF5 F005          	movff	tablat,___lldiv@divisor
  1952  0008A6  0009               	tblrd		*+
  1953  0008A8  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1954  0008AC  0009               	tblrd		*+
  1955  0008AE  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1956  0008B2  000A               	tblrd		*-
  1957  0008B4  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1958  0008B8  ECDD  F00F         	call	___lldiv	;wreg free
  1959  0008BC  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  1960  0008C0  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  1961  0008C4  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  1962  0008C8  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  1963                           
  1964                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1965  0008CC  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  1966  0008D0  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1967  0008D4  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1968  0008D8  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1969  0008DC  0E0A               	movlw	10
  1970  0008DE  6E05               	movwf	___llmod@divisor,c
  1971  0008E0  0E00               	movlw	0
  1972  0008E2  6E06               	movwf	___llmod@divisor+1,c
  1973  0008E4  0E00               	movlw	0
  1974  0008E6  6E07               	movwf	___llmod@divisor+2,c
  1975  0008E8  0E00               	movlw	0
  1976  0008EA  6E08               	movwf	___llmod@divisor+3,c
  1977  0008EC  EC64  F010         	call	___llmod	;wreg free
  1978  0008F0  C001  F06D         	movff	?___llmod,sprintf@tmpval
  1979  0008F4  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  1980  0008F8  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  1981  0008FC  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  1982                           
  1983                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  1984  000900  0100               	movlb	0	; () banked
  1985  000902  516D               	movf	sprintf@tmpval& (0+255),w,b
  1986  000904  0F30               	addlw	48
  1987  000906  C040  FFD9         	movff	sprintf@sp,fsr2l
  1988  00090A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1989  00090E                     L2:
  1990  00090E  6EDF               	movwf	indf2,c
  1991  000910  D7B3               	goto	l2996
  1992  000912                     l3006:
  1993                           
  1994                           ; BSR set to: 0
  1995  000912  0100               	movlb	0	; () banked
  1996  000914  0776               	decf	sprintf@c& (0+255),f,b
  1997  000916  0100               	movlb	0	; () banked
  1998  000918  2976               	incf	sprintf@c& (0+255),w,b
  1999  00091A  B4D8               	btfsc	status,2,c
  2000  00091C  D00F               	goto	l3014
  2001  00091E  D7AF               	goto	l2998
  2002                           
  2003                           ; BSR set to: 0
  2004                           ;doprnt.c: 1204: }
  2005                           ;doprnt.c: 1206: }
  2006                           ;doprnt.c: 1207: while(exp > 0) {
  2007  000920  D00D               	goto	l3014
  2008  000922                     l3008:
  2009                           
  2010                           ; BSR set to: 0
  2011                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2012  000922  C040  FFD9         	movff	sprintf@sp,fsr2l
  2013  000926  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2014  00092A  0E30               	movlw	48
  2015  00092C  6EDF               	movwf	indf2,c
  2016                           
  2017                           ; BSR set to: 0
  2018  00092E  4A40               	infsnz	sprintf@sp,f,c
  2019  000930  2A41               	incf	sprintf@sp+1,f,c
  2020                           
  2021                           ; BSR set to: 0
  2022                           ;doprnt.c: 1209: exp--;
  2023  000932  0100               	movlb	0	; () banked
  2024  000934  076B               	decf	sprintf@exp& (0+255),f,b
  2025  000936  A0D8               	btfss	status,0,c
  2026  000938  076C               	decf	(sprintf@exp+1)& (0+255),f,b
  2027  00093A  D000               	goto	l3014
  2028  00093C                     l3014:
  2029                           
  2030                           ; BSR set to: 0
  2031  00093C  0100               	movlb	0	; () banked
  2032  00093E  BF6C               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2033  000940  D007               	goto	l3016
  2034  000942  0100               	movlb	0	; () banked
  2035  000944  516C               	movf	(sprintf@exp+1)& (0+255),w,b
  2036  000946  E1ED               	bnz	l3008
  2037  000948  0100               	movlb	0	; () banked
  2038  00094A  056B               	decf	sprintf@exp& (0+255),w,b
  2039  00094C  B0D8               	btfsc	status,0,c
  2040  00094E  D7E9               	goto	l3008
  2041  000950                     l3016:
  2042                           
  2043                           ; BSR set to: 0
  2044                           ;doprnt.c: 1210: }
  2045                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2046  000950  0100               	movlb	0	; () banked
  2047  000952  BF72               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2048  000954  D00C               	goto	l270
  2049  000956  0100               	movlb	0	; () banked
  2050  000958  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2051  00095A  E105               	bnz	u2900
  2052  00095C  0E09               	movlw	9
  2053  00095E  0100               	movlb	0	; () banked
  2054  000960  5D71               	subwf	sprintf@prec& (0+255),w,b
  2055  000962  A0D8               	btfss	status,0,c
  2056  000964  D004               	goto	l270
  2057  000966                     u2900:
  2058                           
  2059                           ; BSR set to: 0
  2060                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2061  000966  0E08               	movlw	8
  2062  000968  0100               	movlb	0	; () banked
  2063  00096A  6F76               	movwf	sprintf@c& (0+255),b
  2064  00096C  D003               	goto	l3020
  2065  00096E                     l270:
  2066                           
  2067                           ; BSR set to: 0
  2068                           ;doprnt.c: 1213: else
  2069                           ;doprnt.c: 1214: c = prec;
  2070  00096E  C071  F076         	movff	sprintf@prec,sprintf@c
  2071  000972  D000               	goto	l3020
  2072  000974                     l3020:
  2073                           
  2074                           ; BSR set to: 0
  2075                           ;doprnt.c: 1215: prec -= c;
  2076  000974  0100               	movlb	0	; () banked
  2077  000976  5176               	movf	sprintf@c& (0+255),w,b
  2078  000978  0100               	movlb	0	; () banked
  2079  00097A  5F71               	subwf	sprintf@prec& (0+255),f,b
  2080  00097C  0E00               	movlw	0
  2081  00097E  0100               	movlb	0	; () banked
  2082  000980  BF76               	btfsc	sprintf@c& (0+255),7,b
  2083  000982  0EFF               	movlw	255
  2084  000984  0100               	movlb	0	; () banked
  2085  000986  5B72               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2086                           
  2087                           ; BSR set to: 0
  2088                           ;doprnt.c: 1219: if(c)
  2089  000988  0100               	movlb	0	; () banked
  2090  00098A  5176               	movf	sprintf@c& (0+255),w,b
  2091  00098C  0100               	movlb	0	; () banked
  2092  00098E  B4D8               	btfsc	status,2,c
  2093  000990  D009               	goto	l3028
  2094                           
  2095                           ; BSR set to: 0
  2096                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2097  000992  C040  FFD9         	movff	sprintf@sp,fsr2l
  2098  000996  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2099  00099A  0E2E               	movlw	46
  2100  00099C  6EDF               	movwf	indf2,c
  2101                           
  2102                           ; BSR set to: 0
  2103  00099E  4A40               	infsnz	sprintf@sp,f,c
  2104  0009A0  2A41               	incf	sprintf@sp+1,f,c
  2105  0009A2  D000               	goto	l3028
  2106  0009A4                     l3028:
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2110  0009A4  0100               	movlb	0	; () banked
  2111  0009A6  5176               	movf	sprintf@c& (0+255),w,b
  2112  0009A8  ECF5  F005         	call	_scale
  2113  0009AC  C024  F060         	movff	?_scale,_sprintf$1139
  2114  0009B0  C025  F061         	movff	?_scale+1,_sprintf$1139+1
  2115  0009B4  C026  F062         	movff	?_scale+2,_sprintf$1139+2
  2116                           
  2117                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2118  0009B8  C073  F018         	movff	sprintf@fval,___ftmul@f2
  2119  0009BC  C074  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2120  0009C0  C075  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2121  0009C4  C060  F015         	movff	_sprintf$1139,___ftmul@f1
  2122  0009C8  C061  F016         	movff	_sprintf$1139+1,___ftmul@f1+1
  2123  0009CC  C062  F017         	movff	_sprintf$1139+2,___ftmul@f1+2
  2124  0009D0  EC27  F00D         	call	___ftmul	;wreg free
  2125  0009D4  C015  F02B         	movff	?___ftmul,___fttol@f1
  2126  0009D8  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2127  0009DC  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2128  0009E0  ECA3  F00D         	call	___fttol	;wreg free
  2129  0009E4  C02B  F067         	movff	?___fttol,sprintf@val
  2130  0009E8  C02C  F068         	movff	?___fttol+1,sprintf@val+1
  2131  0009EC  C02D  F069         	movff	?___fttol+2,sprintf@val+2
  2132  0009F0  C02E  F06A         	movff	?___fttol+3,sprintf@val+3
  2133                           
  2134                           ;doprnt.c: 1228: while(c--) {
  2135  0009F4  D073               	goto	l3042
  2136  0009F6                     l3032:
  2137                           
  2138                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2139  0009F6  C067  F001         	movff	sprintf@val,___lldiv@dividend
  2140  0009FA  C068  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  2141  0009FE  C069  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  2142  000A02  C06A  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  2143  000A06  0100               	movlb	0	; () banked
  2144  000A08  5176               	movf	sprintf@c& (0+255),w,b
  2145  000A0A  0D04               	mullw	4
  2146  000A0C  0E01               	movlw	low _dpowers
  2147  000A0E  24F3               	addwf	prodl,w,c
  2148  000A10  6EF6               	movwf	tblptrl,c
  2149  000A12  0E03               	movlw	high _dpowers
  2150  000A14  20F4               	addwfc	prodh,w,c
  2151  000A16  6EF7               	movwf	tblptrh,c
  2152  000A18                     	if	0	;There are less than 3 active tblptr bytes
  2153  000A18                     	endif
  2154  000A18  0009               	tblrd		*+
  2155  000A1A  CFF5 F005          	movff	tablat,___lldiv@divisor
  2156  000A1E  0009               	tblrd		*+
  2157  000A20  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2158  000A24  0009               	tblrd		*+
  2159  000A26  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2160  000A2A  000A               	tblrd		*-
  2161  000A2C  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2162  000A30  ECDD  F00F         	call	___lldiv	;wreg free
  2163  000A34  C001  F06D         	movff	?___lldiv,sprintf@tmpval
  2164  000A38  C002  F06E         	movff	?___lldiv+1,sprintf@tmpval+1
  2165  000A3C  C003  F06F         	movff	?___lldiv+2,sprintf@tmpval+2
  2166  000A40  C004  F070         	movff	?___lldiv+3,sprintf@tmpval+3
  2167                           
  2168                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2169  000A44  C06D  F001         	movff	sprintf@tmpval,___llmod@dividend
  2170  000A48  C06E  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2171  000A4C  C06F  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2172  000A50  C070  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2173  000A54  0E0A               	movlw	10
  2174  000A56  6E05               	movwf	___llmod@divisor,c
  2175  000A58  0E00               	movlw	0
  2176  000A5A  6E06               	movwf	___llmod@divisor+1,c
  2177  000A5C  0E00               	movlw	0
  2178  000A5E  6E07               	movwf	___llmod@divisor+2,c
  2179  000A60  0E00               	movlw	0
  2180  000A62  6E08               	movwf	___llmod@divisor+3,c
  2181  000A64  EC64  F010         	call	___llmod	;wreg free
  2182  000A68  C001  F06D         	movff	?___llmod,sprintf@tmpval
  2183  000A6C  C002  F06E         	movff	?___llmod+1,sprintf@tmpval+1
  2184  000A70  C003  F06F         	movff	?___llmod+2,sprintf@tmpval+2
  2185  000A74  C004  F070         	movff	?___llmod+3,sprintf@tmpval+3
  2186                           
  2187                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2188  000A78  0100               	movlb	0	; () banked
  2189  000A7A  516D               	movf	sprintf@tmpval& (0+255),w,b
  2190  000A7C  0F30               	addlw	48
  2191  000A7E  C040  FFD9         	movff	sprintf@sp,fsr2l
  2192  000A82  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2193  000A86  6EDF               	movwf	indf2,c
  2194                           
  2195                           ; BSR set to: 0
  2196  000A88  4A40               	infsnz	sprintf@sp,f,c
  2197  000A8A  2A41               	incf	sprintf@sp+1,f,c
  2198                           
  2199                           ; BSR set to: 0
  2200                           ;doprnt.c: 1232: val %= dpowers[c];
  2201  000A8C  C067  F001         	movff	sprintf@val,___llmod@dividend
  2202  000A90  C068  F002         	movff	sprintf@val+1,___llmod@dividend+1
  2203  000A94  C069  F003         	movff	sprintf@val+2,___llmod@dividend+2
  2204  000A98  C06A  F004         	movff	sprintf@val+3,___llmod@dividend+3
  2205  000A9C  0100               	movlb	0	; () banked
  2206  000A9E  5176               	movf	sprintf@c& (0+255),w,b
  2207  000AA0  0D04               	mullw	4
  2208  000AA2  0E01               	movlw	low _dpowers
  2209  000AA4  24F3               	addwf	prodl,w,c
  2210  000AA6  6EF6               	movwf	tblptrl,c
  2211  000AA8  0E03               	movlw	high _dpowers
  2212  000AAA  20F4               	addwfc	prodh,w,c
  2213  000AAC  6EF7               	movwf	tblptrh,c
  2214  000AAE                     	if	0	;There are less than 3 active tblptr bytes
  2215  000AAE                     	endif
  2216  000AAE  0009               	tblrd		*+
  2217  000AB0  CFF5 F005          	movff	tablat,___llmod@divisor
  2218  000AB4  0009               	tblrd		*+
  2219  000AB6  CFF5 F006          	movff	tablat,___llmod@divisor+1
  2220  000ABA  0009               	tblrd		*+
  2221  000ABC  CFF5 F007          	movff	tablat,___llmod@divisor+2
  2222  000AC0  000A               	tblrd		*-
  2223  000AC2  CFF5 F008          	movff	tablat,___llmod@divisor+3
  2224  000AC6  EC64  F010         	call	___llmod	;wreg free
  2225  000ACA  C001  F067         	movff	?___llmod,sprintf@val
  2226  000ACE  C002  F068         	movff	?___llmod+1,sprintf@val+1
  2227  000AD2  C003  F069         	movff	?___llmod+2,sprintf@val+2
  2228  000AD6  C004  F06A         	movff	?___llmod+3,sprintf@val+3
  2229  000ADA  D000               	goto	l3042
  2230  000ADC                     l3042:
  2231  000ADC  0100               	movlb	0	; () banked
  2232  000ADE  0776               	decf	sprintf@c& (0+255),f,b
  2233  000AE0  0100               	movlb	0	; () banked
  2234  000AE2  2976               	incf	sprintf@c& (0+255),w,b
  2235  000AE4  B4D8               	btfsc	status,2,c
  2236  000AE6  D00F               	goto	l3050
  2237  000AE8  D786               	goto	l3032
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;doprnt.c: 1233: }
  2241                           ;doprnt.c: 1235: while(prec) {
  2242  000AEA  D00D               	goto	l3050
  2243  000AEC                     l3044:
  2244                           
  2245                           ; BSR set to: 0
  2246                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2247  000AEC  C040  FFD9         	movff	sprintf@sp,fsr2l
  2248  000AF0  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2249  000AF4  0E30               	movlw	48
  2250  000AF6  6EDF               	movwf	indf2,c
  2251                           
  2252                           ; BSR set to: 0
  2253  000AF8  4A40               	infsnz	sprintf@sp,f,c
  2254  000AFA  2A41               	incf	sprintf@sp+1,f,c
  2255                           
  2256                           ; BSR set to: 0
  2257                           ;doprnt.c: 1237: prec--;
  2258  000AFC  0100               	movlb	0	; () banked
  2259  000AFE  0771               	decf	sprintf@prec& (0+255),f,b
  2260  000B00  A0D8               	btfss	status,0,c
  2261  000B02  0772               	decf	(sprintf@prec+1)& (0+255),f,b
  2262  000B04  D000               	goto	l3050
  2263  000B06                     l3050:
  2264                           
  2265                           ; BSR set to: 0
  2266  000B06  0100               	movlb	0	; () banked
  2267  000B08  5171               	movf	sprintf@prec& (0+255),w,b
  2268  000B0A  0100               	movlb	0	; () banked
  2269  000B0C  1172               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2270  000B0E  B4D8               	btfsc	status,2,c
  2271  000B10  D054               	goto	l3072
  2272  000B12  D7EC               	goto	l3044
  2273                           
  2274                           ; BSR set to: 0
  2275                           ;doprnt.c: 1238: }
  2276                           ;doprnt.c: 1245: continue;
  2277  000B14  D052               	goto	l3072
  2278  000B16                     l3052:
  2279                           
  2280                           ; BSR set to: 0
  2281                           ;doprnt.c: 1246: }
  2282                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2283  000B16  0100               	movlb	0	; () banked
  2284  000B18  5171               	movf	sprintf@prec& (0+255),w,b
  2285  000B1A  0100               	movlb	0	; () banked
  2286  000B1C  1172               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2287  000B1E  A4D8               	btfss	status,2,c
  2288  000B20  D00E               	goto	l3058
  2289                           
  2290                           ; BSR set to: 0
  2291  000B22  0100               	movlb	0	; () banked
  2292  000B24  5167               	movf	sprintf@val& (0+255),w,b
  2293  000B26  0100               	movlb	0	; () banked
  2294  000B28  1168               	iorwf	(sprintf@val+1)& (0+255),w,b
  2295  000B2A  0100               	movlb	0	; () banked
  2296  000B2C  1169               	iorwf	(sprintf@val+2)& (0+255),w,b
  2297  000B2E  0100               	movlb	0	; () banked
  2298  000B30  116A               	iorwf	(sprintf@val+3)& (0+255),w,b
  2299  000B32  A4D8               	btfss	status,2,c
  2300  000B34  D004               	goto	l3058
  2301                           
  2302                           ; BSR set to: 0
  2303                           ;doprnt.c: 1291: prec++;
  2304  000B36  0100               	movlb	0	; () banked
  2305  000B38  4B71               	infsnz	sprintf@prec& (0+255),f,b
  2306  000B3A  2B72               	incf	(sprintf@prec+1)& (0+255),f,b
  2307  000B3C  D000               	goto	l3058
  2308  000B3E                     l3058:
  2309                           
  2310                           ; BSR set to: 0
  2311                           ;doprnt.c: 1339: if(c < prec)
  2312  000B3E  0E80               	movlw	128
  2313  000B40  0100               	movlb	0	; () banked
  2314  000B42  BF76               	btfsc	sprintf@c& (0+255),7,b
  2315  000B44  0E7F               	movlw	127
  2316  000B46  6E47               	movwf	??_sprintf& (0+255),c
  2317  000B48  0100               	movlb	0	; () banked
  2318  000B4A  5171               	movf	sprintf@prec& (0+255),w,b
  2319  000B4C  0100               	movlb	0	; () banked
  2320  000B4E  5D76               	subwf	sprintf@c& (0+255),w,b
  2321  000B50  0100               	movlb	0	; () banked
  2322  000B52  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2323  000B54  0A80               	xorlw	128
  2324  000B56  5847               	subwfb	??_sprintf& (0+255),w,c
  2325  000B58  B0D8               	btfsc	status,0,c
  2326  000B5A  D003               	goto	l3062
  2327                           
  2328                           ; BSR set to: 0
  2329                           ;doprnt.c: 1340: c = prec;
  2330  000B5C  C071  F076         	movff	sprintf@prec,sprintf@c
  2331  000B60  D017               	goto	l3066
  2332  000B62                     l3062:
  2333                           
  2334                           ; BSR set to: 0
  2335                           ;doprnt.c: 1341: else if(prec < c)
  2336  000B62  0100               	movlb	0	; () banked
  2337  000B64  5172               	movf	(sprintf@prec+1)& (0+255),w,b
  2338  000B66  0A80               	xorlw	128
  2339  000B68  6E47               	movwf	??_sprintf& (0+255),c
  2340  000B6A  0100               	movlb	0	; () banked
  2341  000B6C  5176               	movf	sprintf@c& (0+255),w,b
  2342  000B6E  0100               	movlb	0	; () banked
  2343  000B70  5D71               	subwf	sprintf@prec& (0+255),w,b
  2344  000B72  0E80               	movlw	128
  2345  000B74  0100               	movlb	0	; () banked
  2346  000B76  BF76               	btfsc	sprintf@c& (0+255),7,b
  2347  000B78  0E7F               	movlw	127
  2348  000B7A  5847               	subwfb	??_sprintf& (0+255),w,c
  2349  000B7C  B0D8               	btfsc	status,0,c
  2350  000B7E  D008               	goto	l3066
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;doprnt.c: 1342: prec = c;
  2354  000B80  0100               	movlb	0	; () banked
  2355  000B82  5176               	movf	sprintf@c& (0+255),w,b
  2356  000B84  0100               	movlb	0	; () banked
  2357  000B86  6F71               	movwf	sprintf@prec& (0+255),b
  2358  000B88  6B72               	clrf	(sprintf@prec+1)& (0+255),b
  2359  000B8A  BF71               	btfsc	sprintf@prec& (0+255),7,b
  2360  000B8C  0772               	decf	(sprintf@prec+1)& (0+255),f,b
  2361                           
  2362                           ; BSR set to: 0
  2363  000B8E  D000               	goto	l3066
  2364  000B90                     l3066:
  2365                           
  2366                           ; BSR set to: 0
  2367                           ;doprnt.c: 1422: {
  2368                           ;doprnt.c: 1438: if(flag & 0x03)
  2369  000B90  0E03               	movlw	3
  2370  000B92  0100               	movlb	0	; () banked
  2371  000B94  1565               	andwf	sprintf@flag& (0+255),w,b
  2372  000B96  6E47               	movwf	??_sprintf& (0+255),c
  2373  000B98  0E00               	movlw	0
  2374  000B9A  0100               	movlb	0	; () banked
  2375  000B9C  1566               	andwf	(sprintf@flag+1)& (0+255),w,b
  2376  000B9E  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2377  000BA0  5047               	movf	??_sprintf,w,c
  2378  000BA2  1048               	iorwf	??_sprintf+1,w,c
  2379  000BA4  B4D8               	btfsc	status,2,c
  2380  000BA6  D009               	goto	l3072
  2381                           
  2382                           ; BSR set to: 0
  2383                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2384  000BA8  C040  FFD9         	movff	sprintf@sp,fsr2l
  2385  000BAC  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2386  000BB0  0E2D               	movlw	45
  2387  000BB2  6EDF               	movwf	indf2,c
  2388  000BB4                     l3070:
  2389                           
  2390                           ; BSR set to: 0
  2391  000BB4  4A40               	infsnz	sprintf@sp,f,c
  2392  000BB6  2A41               	incf	sprintf@sp+1,f,c
  2393                           
  2394                           ; BSR set to: 0
  2395  000BB8  D000               	goto	l3072
  2396  000BBA                     l3072:
  2397                           
  2398                           ; BSR set to: 0
  2399  000BBA  C042  FFF6         	movff	sprintf@f,tblptrl
  2400  000BBE  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2401  000BC2  4A42               	infsnz	sprintf@f,f,c
  2402  000BC4  2A43               	incf	sprintf@f+1,f,c
  2403  000BC6                     	if	0	;tblptru may be non-zero
  2404  000BC6                     	endif
  2405  000BC6                     	if	0	;tblptru may be non-zero
  2406  000BC6                     	endif
  2407  000BC6  0008               	tblrd		*
  2408  000BC8  CFF5 F076          	movff	tablat,sprintf@c
  2409  000BCC  0100               	movlb	0	; () banked
  2410  000BCE  5176               	movf	sprintf@c& (0+255),w,b
  2411  000BD0  B4D8               	btfsc	status,2,c
  2412  000BD2  D003               	goto	l3074
  2413  000BD4  EFE4  F001         	goto	l2874
  2414                           
  2415                           ; BSR set to: 0
  2416  000BD8  D000               	goto	l3074
  2417  000BDA                     l3074:
  2418                           
  2419                           ; BSR set to: 0
  2420                           ;doprnt.c: 1538: *sp = 0;
  2421  000BDA  C040  FFD9         	movff	sprintf@sp,fsr2l
  2422  000BDE  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2423  000BE2  0E00               	movlw	0
  2424  000BE4  6EDF               	movwf	indf2,c
  2425  000BE6  D000               	goto	l285
  2426  000BE8                     l285:
  2427                           
  2428                           ; BSR set to: 0
  2429  000BE8  0012               	return		;funcret
  2430  000BEA                     __end_of_sprintf:
  2431                           	opt stack 0
  2432                           tblptru	equ	0xFF8
  2433                           tblptrh	equ	0xFF7
  2434                           tblptrl	equ	0xFF6
  2435                           tablat	equ	0xFF5
  2436                           prodh	equ	0xFF4
  2437                           prodl	equ	0xFF3
  2438                           postinc0	equ	0xFEE
  2439                           wreg	equ	0xFE8
  2440                           indf2	equ	0xFDF
  2441                           postinc2	equ	0xFDE
  2442                           postdec2	equ	0xFDD
  2443                           fsr2h	equ	0xFDA
  2444                           fsr2l	equ	0xFD9
  2445                           status	equ	0xFD8
  2446                           
  2447 ;; *************** function _scale *****************
  2448 ;; Defined at:
  2449 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2450 ;; Parameters:    Size  Location     Type
  2451 ;;  scl             1    wreg     char 
  2452 ;; Auto vars:     Size  Location     Type
  2453 ;;  scl             1   41[COMRAM] char 
  2454 ;; Return value:  Size  Location     Type
  2455 ;;                  3   35[COMRAM] char 
  2456 ;; Registers used:
  2457 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2458 ;; Tracked objects:
  2459 ;;		On entry : 0/0
  2460 ;;		On exit  : 0/0
  2461 ;;		Unchanged: 0/0
  2462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2463 ;;      Params:         3       0       0       0
  2464 ;;      Locals:         4       0       0       0
  2465 ;;      Temps:          0       0       0       0
  2466 ;;      Totals:         7       0       0       0
  2467 ;;Total ram usage:        7 bytes
  2468 ;; Hardware stack levels used:    1
  2469 ;; Hardware stack levels required when called:    2
  2470 ;; This function calls:
  2471 ;;		___awdiv
  2472 ;;		___awmod
  2473 ;;		___ftmul
  2474 ;;		___wmul
  2475 ;; This function is called by:
  2476 ;;		_sprintf
  2477 ;; This function uses a non-reentrant model
  2478 ;;
  2479                           
  2480                           	psect	text2
  2481  000BEA                     __ptext2:
  2482                           	opt stack 0
  2483  000BEA                     _scale:
  2484                           	opt stack 27
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;incstack = 0
  2488                           ;scale@scl stored from wreg
  2489  000BEA  6E2A               	movwf	scale@scl,c
  2490                           
  2491                           ;doprnt.c: 428: if(scl < 0) {
  2492  000BEC  AE2A               	btfss	scale@scl,7,c
  2493  000BEE  D0EF               	goto	l2452
  2494                           
  2495                           ;doprnt.c: 429: scl = -scl;
  2496  000BF0  6C2A               	negf	scale@scl,c
  2497                           
  2498                           ;doprnt.c: 430: if(scl>=110)
  2499  000BF2  502A               	movf	scale@scl,w,c
  2500  000BF4  0A80               	xorlw	128
  2501  000BF6  0F12               	addlw	-238
  2502  000BF8  A0D8               	btfss	status,0,c
  2503  000BFA  D08D               	goto	l2442
  2504                           
  2505                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2506  000BFC  0E00               	movlw	0
  2507  000BFE  6E12               	movwf	___wmul@multiplicand+1,c
  2508  000C00  0E03               	movlw	3
  2509  000C02  6E11               	movwf	___wmul@multiplicand,c
  2510  000C04  0E00               	movlw	0
  2511  000C06  6E0A               	movwf	___awdiv@divisor+1,c
  2512  000C08  0E0A               	movlw	10
  2513  000C0A  6E09               	movwf	___awdiv@divisor,c
  2514  000C0C  0E00               	movlw	0
  2515  000C0E  6E04               	movwf	___awmod@divisor+1,c
  2516  000C10  0E64               	movlw	100
  2517  000C12  6E03               	movwf	___awmod@divisor,c
  2518  000C14  502A               	movf	scale@scl,w,c
  2519  000C16  6E01               	movwf	___awmod@dividend,c
  2520  000C18  6A02               	clrf	___awmod@dividend+1,c
  2521  000C1A  BE01               	btfsc	___awmod@dividend,7,c
  2522  000C1C  0602               	decf	___awmod@dividend+1,f,c
  2523  000C1E  EC23  F010         	call	___awmod	;wreg free
  2524  000C22  C001  F007         	movff	?___awmod,___awdiv@dividend
  2525  000C26  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2526  000C2A  EC47  F00F         	call	___awdiv	;wreg free
  2527  000C2E  0E09               	movlw	9
  2528  000C30  2407               	addwf	?___awdiv,w,c
  2529  000C32  6E0F               	movwf	___wmul@multiplier,c
  2530  000C34  0E00               	movlw	0
  2531  000C36  2008               	addwfc	?___awdiv+1,w,c
  2532  000C38  6E10               	movwf	___wmul@multiplier+1,c
  2533  000C3A  ECE1  F011         	call	___wmul	;wreg free
  2534  000C3E  0E29               	movlw	low __npowers_
  2535  000C40  240F               	addwf	?___wmul,w,c
  2536  000C42  6EF6               	movwf	tblptrl,c
  2537  000C44  0E03               	movlw	high __npowers_
  2538  000C46  2010               	addwfc	?___wmul+1,w,c
  2539  000C48  6EF7               	movwf	tblptrh,c
  2540  000C4A                     	if	0	;There are less than 3 active tblptr bytes
  2541  000C4A                     	endif
  2542  000C4A  0009               	tblrd		*+
  2543  000C4C  CFF5 F018          	movff	tablat,___ftmul@f2
  2544  000C50  0009               	tblrd		*+
  2545  000C52  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2546  000C56  000A               	tblrd		*-
  2547  000C58  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2548  000C5C  0E00               	movlw	0
  2549  000C5E  6E0A               	movwf	___awdiv@divisor+1,c
  2550  000C60  0E64               	movlw	100
  2551  000C62  6E09               	movwf	___awdiv@divisor,c
  2552  000C64  502A               	movf	scale@scl,w,c
  2553  000C66  6E07               	movwf	___awdiv@dividend,c
  2554  000C68  6A08               	clrf	___awdiv@dividend+1,c
  2555  000C6A  BE07               	btfsc	___awdiv@dividend,7,c
  2556  000C6C  0608               	decf	___awdiv@dividend+1,f,c
  2557  000C6E  EC47  F00F         	call	___awdiv	;wreg free
  2558  000C72  0E12               	movlw	18
  2559  000C74  2407               	addwf	?___awdiv,w,c
  2560  000C76  6E0F               	movwf	___wmul@multiplier,c
  2561  000C78  0E00               	movlw	0
  2562  000C7A  2008               	addwfc	?___awdiv+1,w,c
  2563  000C7C  6E10               	movwf	___wmul@multiplier+1,c
  2564  000C7E  0E00               	movlw	0
  2565  000C80  6E12               	movwf	___wmul@multiplicand+1,c
  2566  000C82  0E03               	movlw	3
  2567  000C84  6E11               	movwf	___wmul@multiplicand,c
  2568  000C86  ECE1  F011         	call	___wmul	;wreg free
  2569  000C8A  0E29               	movlw	low __npowers_
  2570  000C8C  240F               	addwf	?___wmul,w,c
  2571  000C8E  6EF6               	movwf	tblptrl,c
  2572  000C90  0E03               	movlw	high __npowers_
  2573  000C92  2010               	addwfc	?___wmul+1,w,c
  2574  000C94  6EF7               	movwf	tblptrh,c
  2575  000C96                     	if	0	;There are less than 3 active tblptr bytes
  2576  000C96                     	endif
  2577  000C96  0009               	tblrd		*+
  2578  000C98  CFF5 F015          	movff	tablat,___ftmul@f1
  2579  000C9C  0009               	tblrd		*+
  2580  000C9E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2581  000CA2  000A               	tblrd		*-
  2582  000CA4  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2583  000CA8  EC27  F00D         	call	___ftmul	;wreg free
  2584  000CAC  C015  F027         	movff	?___ftmul,_scale$1138
  2585  000CB0  C016  F028         	movff	?___ftmul+1,_scale$1138+1
  2586  000CB4  C017  F029         	movff	?___ftmul+2,_scale$1138+2
  2587                           
  2588                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2589  000CB8  C027  F015         	movff	_scale$1138,___ftmul@f1
  2590  000CBC  C028  F016         	movff	_scale$1138+1,___ftmul@f1+1
  2591  000CC0  C029  F017         	movff	_scale$1138+2,___ftmul@f1+2
  2592  000CC4  0E00               	movlw	0
  2593  000CC6  6E12               	movwf	___wmul@multiplicand+1,c
  2594  000CC8  0E03               	movlw	3
  2595  000CCA  6E11               	movwf	___wmul@multiplicand,c
  2596  000CCC  0E00               	movlw	0
  2597  000CCE  6E04               	movwf	___awmod@divisor+1,c
  2598  000CD0  0E0A               	movlw	10
  2599  000CD2  6E03               	movwf	___awmod@divisor,c
  2600  000CD4  502A               	movf	scale@scl,w,c
  2601  000CD6  6E01               	movwf	___awmod@dividend,c
  2602  000CD8  6A02               	clrf	___awmod@dividend+1,c
  2603  000CDA  BE01               	btfsc	___awmod@dividend,7,c
  2604  000CDC  0602               	decf	___awmod@dividend+1,f,c
  2605  000CDE  EC23  F010         	call	___awmod	;wreg free
  2606  000CE2  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2607  000CE6  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2608  000CEA  ECE1  F011         	call	___wmul	;wreg free
  2609  000CEE  0E29               	movlw	low __npowers_
  2610  000CF0  240F               	addwf	?___wmul,w,c
  2611  000CF2  6EF6               	movwf	tblptrl,c
  2612  000CF4  0E03               	movlw	high __npowers_
  2613  000CF6  2010               	addwfc	?___wmul+1,w,c
  2614  000CF8  6EF7               	movwf	tblptrh,c
  2615  000CFA                     	if	0	;There are less than 3 active tblptr bytes
  2616  000CFA                     	endif
  2617  000CFA  0009               	tblrd		*+
  2618  000CFC  CFF5 F018          	movff	tablat,___ftmul@f2
  2619  000D00  0009               	tblrd		*+
  2620  000D02  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2621  000D06  000A               	tblrd		*-
  2622  000D08  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2623  000D0C  EC27  F00D         	call	___ftmul	;wreg free
  2624  000D10  D141               	goto	L6
  2625  000D12  D15A               	goto	l219
  2626  000D14  D054               	goto	l2448
  2627  000D16                     l2442:
  2628                           
  2629                           ;doprnt.c: 432: else if(scl > 10)
  2630  000D16  502A               	movf	scale@scl,w,c
  2631  000D18  0A80               	xorlw	128
  2632  000D1A  0F75               	addlw	-139
  2633  000D1C  A0D8               	btfss	status,0,c
  2634  000D1E  D04F               	goto	l2448
  2635                           
  2636                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2637  000D20  0E00               	movlw	0
  2638  000D22  6E0A               	movwf	___awdiv@divisor+1,c
  2639  000D24  0E0A               	movlw	10
  2640  000D26  6E09               	movwf	___awdiv@divisor,c
  2641  000D28  502A               	movf	scale@scl,w,c
  2642  000D2A  6E07               	movwf	___awdiv@dividend,c
  2643  000D2C  6A08               	clrf	___awdiv@dividend+1,c
  2644  000D2E  BE07               	btfsc	___awdiv@dividend,7,c
  2645  000D30  0608               	decf	___awdiv@dividend+1,f,c
  2646  000D32  EC47  F00F         	call	___awdiv	;wreg free
  2647  000D36  0E09               	movlw	9
  2648  000D38  2407               	addwf	?___awdiv,w,c
  2649  000D3A  6E0F               	movwf	___wmul@multiplier,c
  2650  000D3C  0E00               	movlw	0
  2651  000D3E  2008               	addwfc	?___awdiv+1,w,c
  2652  000D40  6E10               	movwf	___wmul@multiplier+1,c
  2653  000D42  0E00               	movlw	0
  2654  000D44  6E12               	movwf	___wmul@multiplicand+1,c
  2655  000D46  0E03               	movlw	3
  2656  000D48  6E11               	movwf	___wmul@multiplicand,c
  2657  000D4A  ECE1  F011         	call	___wmul	;wreg free
  2658  000D4E  0E29               	movlw	low __npowers_
  2659  000D50  240F               	addwf	?___wmul,w,c
  2660  000D52  6EF6               	movwf	tblptrl,c
  2661  000D54  0E03               	movlw	high __npowers_
  2662  000D56  2010               	addwfc	?___wmul+1,w,c
  2663  000D58  6EF7               	movwf	tblptrh,c
  2664  000D5A                     	if	0	;There are less than 3 active tblptr bytes
  2665  000D5A                     	endif
  2666  000D5A  0009               	tblrd		*+
  2667  000D5C  CFF5 F015          	movff	tablat,___ftmul@f1
  2668  000D60  0009               	tblrd		*+
  2669  000D62  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2670  000D66  000A               	tblrd		*-
  2671  000D68  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2672  000D6C  0E00               	movlw	0
  2673  000D6E  6E12               	movwf	___wmul@multiplicand+1,c
  2674  000D70  0E03               	movlw	3
  2675  000D72  6E11               	movwf	___wmul@multiplicand,c
  2676  000D74  0E00               	movlw	0
  2677  000D76  6E04               	movwf	___awmod@divisor+1,c
  2678  000D78  0E0A               	movlw	10
  2679  000D7A  6E03               	movwf	___awmod@divisor,c
  2680  000D7C  502A               	movf	scale@scl,w,c
  2681  000D7E  6E01               	movwf	___awmod@dividend,c
  2682  000D80  6A02               	clrf	___awmod@dividend+1,c
  2683  000D82  BE01               	btfsc	___awmod@dividend,7,c
  2684  000D84  0602               	decf	___awmod@dividend+1,f,c
  2685  000D86  EC23  F010         	call	___awmod	;wreg free
  2686  000D8A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2687  000D8E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2688  000D92  ECE1  F011         	call	___wmul	;wreg free
  2689  000D96  0E29               	movlw	low __npowers_
  2690  000D98  240F               	addwf	?___wmul,w,c
  2691  000D9A  6EF6               	movwf	tblptrl,c
  2692  000D9C  0E03               	movlw	high __npowers_
  2693  000D9E  2010               	addwfc	?___wmul+1,w,c
  2694  000DA0  6EF7               	movwf	tblptrh,c
  2695  000DA2                     	if	0	;There are less than 3 active tblptr bytes
  2696  000DA2                     	endif
  2697  000DA2  0009               	tblrd		*+
  2698  000DA4  CFF5 F018          	movff	tablat,___ftmul@f2
  2699  000DA8  0009               	tblrd		*+
  2700  000DAA  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2701  000DAE  000A               	tblrd		*-
  2702  000DB0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2703  000DB4  EC27  F00D         	call	___ftmul	;wreg free
  2704  000DB8  D0ED               	goto	L6
  2705  000DBA  D106               	goto	l219
  2706  000DBC  D000               	goto	l2448
  2707  000DBE                     l2448:
  2708                           
  2709                           ;doprnt.c: 434: return _npowers_[scl];
  2710  000DBE  502A               	movf	scale@scl,w,c
  2711  000DC0  0D03               	mullw	3
  2712  000DC2  0E29               	movlw	low __npowers_
  2713  000DC4  24F3               	addwf	prodl,w,c
  2714  000DC6  6EF6               	movwf	tblptrl,c
  2715  000DC8  0E03               	movlw	high __npowers_
  2716  000DCA  D0F2               	goto	L5
  2717  000DCC  D0FD               	goto	l219
  2718  000DCE                     l2452:
  2719                           
  2720                           ;doprnt.c: 435: }
  2721                           ;doprnt.c: 436: if(scl>=110)
  2722  000DCE  502A               	movf	scale@scl,w,c
  2723  000DD0  0A80               	xorlw	128
  2724  000DD2  0F12               	addlw	-238
  2725  000DD4  A0D8               	btfss	status,0,c
  2726  000DD6  D08D               	goto	l2460
  2727                           
  2728                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2729  000DD8  0E00               	movlw	0
  2730  000DDA  6E12               	movwf	___wmul@multiplicand+1,c
  2731  000DDC  0E03               	movlw	3
  2732  000DDE  6E11               	movwf	___wmul@multiplicand,c
  2733  000DE0  0E00               	movlw	0
  2734  000DE2  6E0A               	movwf	___awdiv@divisor+1,c
  2735  000DE4  0E0A               	movlw	10
  2736  000DE6  6E09               	movwf	___awdiv@divisor,c
  2737  000DE8  0E00               	movlw	0
  2738  000DEA  6E04               	movwf	___awmod@divisor+1,c
  2739  000DEC  0E64               	movlw	100
  2740  000DEE  6E03               	movwf	___awmod@divisor,c
  2741  000DF0  502A               	movf	scale@scl,w,c
  2742  000DF2  6E01               	movwf	___awmod@dividend,c
  2743  000DF4  6A02               	clrf	___awmod@dividend+1,c
  2744  000DF6  BE01               	btfsc	___awmod@dividend,7,c
  2745  000DF8  0602               	decf	___awmod@dividend+1,f,c
  2746  000DFA  EC23  F010         	call	___awmod	;wreg free
  2747  000DFE  C001  F007         	movff	?___awmod,___awdiv@dividend
  2748  000E02  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2749  000E06  EC47  F00F         	call	___awdiv	;wreg free
  2750  000E0A  0E09               	movlw	9
  2751  000E0C  2407               	addwf	?___awdiv,w,c
  2752  000E0E  6E0F               	movwf	___wmul@multiplier,c
  2753  000E10  0E00               	movlw	0
  2754  000E12  2008               	addwfc	?___awdiv+1,w,c
  2755  000E14  6E10               	movwf	___wmul@multiplier+1,c
  2756  000E16  ECE1  F011         	call	___wmul	;wreg free
  2757  000E1A  0E50               	movlw	low __powers_
  2758  000E1C  240F               	addwf	?___wmul,w,c
  2759  000E1E  6EF6               	movwf	tblptrl,c
  2760  000E20  0E03               	movlw	high __powers_
  2761  000E22  2010               	addwfc	?___wmul+1,w,c
  2762  000E24  6EF7               	movwf	tblptrh,c
  2763  000E26                     	if	0	;There are less than 3 active tblptr bytes
  2764  000E26                     	endif
  2765  000E26  0009               	tblrd		*+
  2766  000E28  CFF5 F018          	movff	tablat,___ftmul@f2
  2767  000E2C  0009               	tblrd		*+
  2768  000E2E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2769  000E32  000A               	tblrd		*-
  2770  000E34  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2771  000E38  0E00               	movlw	0
  2772  000E3A  6E0A               	movwf	___awdiv@divisor+1,c
  2773  000E3C  0E64               	movlw	100
  2774  000E3E  6E09               	movwf	___awdiv@divisor,c
  2775  000E40  502A               	movf	scale@scl,w,c
  2776  000E42  6E07               	movwf	___awdiv@dividend,c
  2777  000E44  6A08               	clrf	___awdiv@dividend+1,c
  2778  000E46  BE07               	btfsc	___awdiv@dividend,7,c
  2779  000E48  0608               	decf	___awdiv@dividend+1,f,c
  2780  000E4A  EC47  F00F         	call	___awdiv	;wreg free
  2781  000E4E  0E12               	movlw	18
  2782  000E50  2407               	addwf	?___awdiv,w,c
  2783  000E52  6E0F               	movwf	___wmul@multiplier,c
  2784  000E54  0E00               	movlw	0
  2785  000E56  2008               	addwfc	?___awdiv+1,w,c
  2786  000E58  6E10               	movwf	___wmul@multiplier+1,c
  2787  000E5A  0E00               	movlw	0
  2788  000E5C  6E12               	movwf	___wmul@multiplicand+1,c
  2789  000E5E  0E03               	movlw	3
  2790  000E60  6E11               	movwf	___wmul@multiplicand,c
  2791  000E62  ECE1  F011         	call	___wmul	;wreg free
  2792  000E66  0E50               	movlw	low __powers_
  2793  000E68  240F               	addwf	?___wmul,w,c
  2794  000E6A  6EF6               	movwf	tblptrl,c
  2795  000E6C  0E03               	movlw	high __powers_
  2796  000E6E  2010               	addwfc	?___wmul+1,w,c
  2797  000E70  6EF7               	movwf	tblptrh,c
  2798  000E72                     	if	0	;There are less than 3 active tblptr bytes
  2799  000E72                     	endif
  2800  000E72  0009               	tblrd		*+
  2801  000E74  CFF5 F015          	movff	tablat,___ftmul@f1
  2802  000E78  0009               	tblrd		*+
  2803  000E7A  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2804  000E7E  000A               	tblrd		*-
  2805  000E80  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2806  000E84  EC27  F00D         	call	___ftmul	;wreg free
  2807  000E88  C015  F027         	movff	?___ftmul,_scale$1138
  2808  000E8C  C016  F028         	movff	?___ftmul+1,_scale$1138+1
  2809  000E90  C017  F029         	movff	?___ftmul+2,_scale$1138+2
  2810                           
  2811                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2812  000E94  C027  F015         	movff	_scale$1138,___ftmul@f1
  2813  000E98  C028  F016         	movff	_scale$1138+1,___ftmul@f1+1
  2814  000E9C  C029  F017         	movff	_scale$1138+2,___ftmul@f1+2
  2815  000EA0  0E00               	movlw	0
  2816  000EA2  6E12               	movwf	___wmul@multiplicand+1,c
  2817  000EA4  0E03               	movlw	3
  2818  000EA6  6E11               	movwf	___wmul@multiplicand,c
  2819  000EA8  0E00               	movlw	0
  2820  000EAA  6E04               	movwf	___awmod@divisor+1,c
  2821  000EAC  0E0A               	movlw	10
  2822  000EAE  6E03               	movwf	___awmod@divisor,c
  2823  000EB0  502A               	movf	scale@scl,w,c
  2824  000EB2  6E01               	movwf	___awmod@dividend,c
  2825  000EB4  6A02               	clrf	___awmod@dividend+1,c
  2826  000EB6  BE01               	btfsc	___awmod@dividend,7,c
  2827  000EB8  0602               	decf	___awmod@dividend+1,f,c
  2828  000EBA  EC23  F010         	call	___awmod	;wreg free
  2829  000EBE  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2830  000EC2  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2831  000EC6  ECE1  F011         	call	___wmul	;wreg free
  2832  000ECA  0E50               	movlw	low __powers_
  2833  000ECC  240F               	addwf	?___wmul,w,c
  2834  000ECE  6EF6               	movwf	tblptrl,c
  2835  000ED0  0E03               	movlw	high __powers_
  2836  000ED2  2010               	addwfc	?___wmul+1,w,c
  2837  000ED4  6EF7               	movwf	tblptrh,c
  2838  000ED6                     	if	0	;There are less than 3 active tblptr bytes
  2839  000ED6                     	endif
  2840  000ED6  0009               	tblrd		*+
  2841  000ED8  CFF5 F018          	movff	tablat,___ftmul@f2
  2842  000EDC  0009               	tblrd		*+
  2843  000EDE  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2844  000EE2  000A               	tblrd		*-
  2845  000EE4  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2846  000EE8  EC27  F00D         	call	___ftmul	;wreg free
  2847  000EEC  D053               	goto	L6
  2848  000EEE  D06C               	goto	l219
  2849  000EF0  D059               	goto	l2466
  2850  000EF2                     l2460:
  2851                           
  2852                           ;doprnt.c: 438: else if(scl > 10)
  2853  000EF2  502A               	movf	scale@scl,w,c
  2854  000EF4  0A80               	xorlw	128
  2855  000EF6  0F75               	addlw	-139
  2856  000EF8  A0D8               	btfss	status,0,c
  2857  000EFA  D054               	goto	l2466
  2858                           
  2859                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2860  000EFC  0E00               	movlw	0
  2861  000EFE  6E0A               	movwf	___awdiv@divisor+1,c
  2862  000F00  0E0A               	movlw	10
  2863  000F02  6E09               	movwf	___awdiv@divisor,c
  2864  000F04  502A               	movf	scale@scl,w,c
  2865  000F06  6E07               	movwf	___awdiv@dividend,c
  2866  000F08  6A08               	clrf	___awdiv@dividend+1,c
  2867  000F0A  BE07               	btfsc	___awdiv@dividend,7,c
  2868  000F0C  0608               	decf	___awdiv@dividend+1,f,c
  2869  000F0E  EC47  F00F         	call	___awdiv	;wreg free
  2870  000F12  0E09               	movlw	9
  2871  000F14  2407               	addwf	?___awdiv,w,c
  2872  000F16  6E0F               	movwf	___wmul@multiplier,c
  2873  000F18  0E00               	movlw	0
  2874  000F1A  2008               	addwfc	?___awdiv+1,w,c
  2875  000F1C  6E10               	movwf	___wmul@multiplier+1,c
  2876  000F1E  0E00               	movlw	0
  2877  000F20  6E12               	movwf	___wmul@multiplicand+1,c
  2878  000F22  0E03               	movlw	3
  2879  000F24  6E11               	movwf	___wmul@multiplicand,c
  2880  000F26  ECE1  F011         	call	___wmul	;wreg free
  2881  000F2A  0E50               	movlw	low __powers_
  2882  000F2C  240F               	addwf	?___wmul,w,c
  2883  000F2E  6EF6               	movwf	tblptrl,c
  2884  000F30  0E03               	movlw	high __powers_
  2885  000F32  2010               	addwfc	?___wmul+1,w,c
  2886  000F34  6EF7               	movwf	tblptrh,c
  2887  000F36                     	if	0	;There are less than 3 active tblptr bytes
  2888  000F36                     	endif
  2889  000F36  0009               	tblrd		*+
  2890  000F38  CFF5 F015          	movff	tablat,___ftmul@f1
  2891  000F3C  0009               	tblrd		*+
  2892  000F3E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2893  000F42  000A               	tblrd		*-
  2894  000F44  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2895  000F48  0E00               	movlw	0
  2896  000F4A  6E12               	movwf	___wmul@multiplicand+1,c
  2897  000F4C  0E03               	movlw	3
  2898  000F4E  6E11               	movwf	___wmul@multiplicand,c
  2899  000F50  0E00               	movlw	0
  2900  000F52  6E04               	movwf	___awmod@divisor+1,c
  2901  000F54  0E0A               	movlw	10
  2902  000F56  6E03               	movwf	___awmod@divisor,c
  2903  000F58  502A               	movf	scale@scl,w,c
  2904  000F5A  6E01               	movwf	___awmod@dividend,c
  2905  000F5C  6A02               	clrf	___awmod@dividend+1,c
  2906  000F5E  BE01               	btfsc	___awmod@dividend,7,c
  2907  000F60  0602               	decf	___awmod@dividend+1,f,c
  2908  000F62  EC23  F010         	call	___awmod	;wreg free
  2909  000F66  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2910  000F6A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2911  000F6E  ECE1  F011         	call	___wmul	;wreg free
  2912  000F72  0E50               	movlw	low __powers_
  2913  000F74  240F               	addwf	?___wmul,w,c
  2914  000F76  6EF6               	movwf	tblptrl,c
  2915  000F78  0E03               	movlw	high __powers_
  2916  000F7A  2010               	addwfc	?___wmul+1,w,c
  2917  000F7C  6EF7               	movwf	tblptrh,c
  2918  000F7E                     	if	0	;There are less than 3 active tblptr bytes
  2919  000F7E                     	endif
  2920  000F7E  0009               	tblrd		*+
  2921  000F80  CFF5 F018          	movff	tablat,___ftmul@f2
  2922  000F84  0009               	tblrd		*+
  2923  000F86  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2924  000F8A  000A               	tblrd		*-
  2925  000F8C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2926  000F90  EC27  F00D         	call	___ftmul	;wreg free
  2927  000F94                     L6:
  2928  000F94  C015  F024         	movff	?___ftmul,?_scale
  2929  000F98  C016  F025         	movff	?___ftmul+1,?_scale+1
  2930  000F9C  C017  F026         	movff	?___ftmul+2,?_scale+2
  2931  000FA0  D013               	goto	l219
  2932  000FA2  D000               	goto	l2466
  2933  000FA4                     l2466:
  2934                           
  2935                           ;doprnt.c: 440: return _powers_[scl];
  2936  000FA4  502A               	movf	scale@scl,w,c
  2937  000FA6  0D03               	mullw	3
  2938  000FA8  0E50               	movlw	low __powers_
  2939  000FAA  24F3               	addwf	prodl,w,c
  2940  000FAC  6EF6               	movwf	tblptrl,c
  2941  000FAE  0E03               	movlw	high __powers_
  2942  000FB0                     L5:
  2943  000FB0  20F4               	addwfc	prodh,w,c
  2944  000FB2  6EF7               	movwf	tblptrh,c
  2945  000FB4                     	if	0	;There are less than 3 active tblptr bytes
  2946  000FB4                     	endif
  2947  000FB4  0009               	tblrd		*+
  2948  000FB6  CFF5 F024          	movff	tablat,?_scale
  2949  000FBA  0009               	tblrd		*+
  2950  000FBC  CFF5 F025          	movff	tablat,?_scale+1
  2951  000FC0  000A               	tblrd		*-
  2952  000FC2  CFF5 F026          	movff	tablat,?_scale+2
  2953  000FC6  D000               	goto	l219
  2954  000FC8                     l219:
  2955  000FC8  0012               	return		;funcret
  2956  000FCA                     __end_of_scale:
  2957                           	opt stack 0
  2958                           tblptru	equ	0xFF8
  2959                           tblptrh	equ	0xFF7
  2960                           tblptrl	equ	0xFF6
  2961                           tablat	equ	0xFF5
  2962                           prodh	equ	0xFF4
  2963                           prodl	equ	0xFF3
  2964                           postinc0	equ	0xFEE
  2965                           wreg	equ	0xFE8
  2966                           indf2	equ	0xFDF
  2967                           postinc2	equ	0xFDE
  2968                           postdec2	equ	0xFDD
  2969                           fsr2h	equ	0xFDA
  2970                           fsr2l	equ	0xFD9
  2971                           status	equ	0xFD8
  2972                           
  2973 ;; *************** function _isdigit *****************
  2974 ;; Defined at:
  2975 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2976 ;; Parameters:    Size  Location     Type
  2977 ;;  c               1    wreg     unsigned char 
  2978 ;; Auto vars:     Size  Location     Type
  2979 ;;  c               1    2[COMRAM] unsigned char 
  2980 ;; Return value:  Size  Location     Type
  2981 ;;		None               void
  2982 ;; Registers used:
  2983 ;;		wreg, status,2, status,0
  2984 ;; Tracked objects:
  2985 ;;		On entry : 0/0
  2986 ;;		On exit  : 0/0
  2987 ;;		Unchanged: 0/0
  2988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2989 ;;      Params:         0       0       0       0
  2990 ;;      Locals:         2       0       0       0
  2991 ;;      Temps:          1       0       0       0
  2992 ;;      Totals:         3       0       0       0
  2993 ;;Total ram usage:        3 bytes
  2994 ;; Hardware stack levels used:    1
  2995 ;; This function calls:
  2996 ;;		Nothing
  2997 ;; This function is called by:
  2998 ;;		_sprintf
  2999 ;; This function uses a non-reentrant model
  3000 ;;
  3001                           
  3002                           	psect	text3
  3003  002480                     __ptext3:
  3004                           	opt stack 0
  3005  002480                     _isdigit:
  3006                           	opt stack 29
  3007                           
  3008                           ;incstack = 0
  3009                           ;isdigit@c stored from wreg
  3010  002480  6E03               	movwf	isdigit@c,c
  3011  002482  0E00               	movlw	0
  3012  002484  6E02               	movwf	_isdigit$854,c
  3013  002486  0E3A               	movlw	58
  3014  002488  6003               	cpfslt	isdigit@c,c
  3015  00248A  D006               	goto	l2478
  3016  00248C  0E2F               	movlw	47
  3017  00248E  6403               	cpfsgt	isdigit@c,c
  3018  002490  D003               	goto	l2478
  3019  002492  0E01               	movlw	1
  3020  002494  6E02               	movwf	_isdigit$854,c
  3021  002496  D000               	goto	l2478
  3022  002498                     l2478:
  3023  002498  C002  F001         	movff	_isdigit$854,??_isdigit
  3024  00249C  3001               	rrcf	??_isdigit,w,c
  3025  00249E  D000               	goto	l753
  3026  0024A0                     l753:
  3027  0024A0  0012               	return		;funcret
  3028  0024A2                     __end_of_isdigit:
  3029                           	opt stack 0
  3030                           tblptru	equ	0xFF8
  3031                           tblptrh	equ	0xFF7
  3032                           tblptrl	equ	0xFF6
  3033                           tablat	equ	0xFF5
  3034                           prodh	equ	0xFF4
  3035                           prodl	equ	0xFF3
  3036                           postinc0	equ	0xFEE
  3037                           wreg	equ	0xFE8
  3038                           indf2	equ	0xFDF
  3039                           postinc2	equ	0xFDE
  3040                           postdec2	equ	0xFDD
  3041                           fsr2h	equ	0xFDA
  3042                           fsr2l	equ	0xFD9
  3043                           status	equ	0xFD8
  3044                           
  3045 ;; *************** function _fround *****************
  3046 ;; Defined at:
  3047 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  3048 ;; Parameters:    Size  Location     Type
  3049 ;;  prec            1    wreg     unsigned char 
  3050 ;; Auto vars:     Size  Location     Type
  3051 ;;  prec            1   44[COMRAM] unsigned char 
  3052 ;; Return value:  Size  Location     Type
  3053 ;;                  3   35[COMRAM] unsigned char 
  3054 ;; Registers used:
  3055 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3056 ;; Tracked objects:
  3057 ;;		On entry : 0/0
  3058 ;;		On exit  : 0/0
  3059 ;;		Unchanged: 0/0
  3060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3061 ;;      Params:         3       0       0       0
  3062 ;;      Locals:         7       0       0       0
  3063 ;;      Temps:          0       0       0       0
  3064 ;;      Totals:        10       0       0       0
  3065 ;;Total ram usage:       10 bytes
  3066 ;; Hardware stack levels used:    1
  3067 ;; Hardware stack levels required when called:    2
  3068 ;; This function calls:
  3069 ;;		___awdiv
  3070 ;;		___awmod
  3071 ;;		___ftmul
  3072 ;;		___wmul
  3073 ;; This function is called by:
  3074 ;;		_sprintf
  3075 ;; This function uses a non-reentrant model
  3076 ;;
  3077                           
  3078                           	psect	text4
  3079  000FCA                     __ptext4:
  3080                           	opt stack 0
  3081  000FCA                     _fround:
  3082                           	opt stack 27
  3083                           
  3084                           ;incstack = 0
  3085                           ;fround@prec stored from wreg
  3086  000FCA  6E2D               	movwf	fround@prec,c
  3087                           
  3088                           ;doprnt.c: 413: if(prec>=110)
  3089  000FCC  0E6D               	movlw	109
  3090  000FCE  642D               	cpfsgt	fround@prec,c
  3091  000FD0  D09B               	goto	l2420
  3092                           
  3093                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3094  000FD2  0E00               	movlw	0
  3095  000FD4  6E12               	movwf	___wmul@multiplicand+1,c
  3096  000FD6  0E03               	movlw	3
  3097  000FD8  6E11               	movwf	___wmul@multiplicand,c
  3098  000FDA  0E00               	movlw	0
  3099  000FDC  6E0A               	movwf	___awdiv@divisor+1,c
  3100  000FDE  0E0A               	movlw	10
  3101  000FE0  6E09               	movwf	___awdiv@divisor,c
  3102  000FE2  0E00               	movlw	0
  3103  000FE4  6E04               	movwf	___awmod@divisor+1,c
  3104  000FE6  0E64               	movlw	100
  3105  000FE8  6E03               	movwf	___awmod@divisor,c
  3106  000FEA  C02D  F001         	movff	fround@prec,___awmod@dividend
  3107  000FEE  6A02               	clrf	___awmod@dividend+1,c
  3108  000FF0  EC23  F010         	call	___awmod	;wreg free
  3109  000FF4  C001  F007         	movff	?___awmod,___awdiv@dividend
  3110  000FF8  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3111  000FFC  EC47  F00F         	call	___awdiv	;wreg free
  3112  001000  0E09               	movlw	9
  3113  001002  2407               	addwf	?___awdiv,w,c
  3114  001004  6E0F               	movwf	___wmul@multiplier,c
  3115  001006  0E00               	movlw	0
  3116  001008  2008               	addwfc	?___awdiv+1,w,c
  3117  00100A  6E10               	movwf	___wmul@multiplier+1,c
  3118  00100C  ECE1  F011         	call	___wmul	;wreg free
  3119  001010  0E29               	movlw	low __npowers_
  3120  001012  240F               	addwf	?___wmul,w,c
  3121  001014  6EF6               	movwf	tblptrl,c
  3122  001016  0E03               	movlw	high __npowers_
  3123  001018  2010               	addwfc	?___wmul+1,w,c
  3124  00101A  6EF7               	movwf	tblptrh,c
  3125  00101C                     	if	0	;There are less than 3 active tblptr bytes
  3126  00101C                     	endif
  3127  00101C  0009               	tblrd		*+
  3128  00101E  CFF5 F018          	movff	tablat,___ftmul@f2
  3129  001022  0009               	tblrd		*+
  3130  001024  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3131  001028  000A               	tblrd		*-
  3132  00102A  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3133  00102E  0E00               	movlw	0
  3134  001030  6E0A               	movwf	___awdiv@divisor+1,c
  3135  001032  0E64               	movlw	100
  3136  001034  6E09               	movwf	___awdiv@divisor,c
  3137  001036  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3138  00103A  6A08               	clrf	___awdiv@dividend+1,c
  3139  00103C  EC47  F00F         	call	___awdiv	;wreg free
  3140  001040  0E12               	movlw	18
  3141  001042  2407               	addwf	?___awdiv,w,c
  3142  001044  6E0F               	movwf	___wmul@multiplier,c
  3143  001046  0E00               	movlw	0
  3144  001048  2008               	addwfc	?___awdiv+1,w,c
  3145  00104A  6E10               	movwf	___wmul@multiplier+1,c
  3146  00104C  0E00               	movlw	0
  3147  00104E  6E12               	movwf	___wmul@multiplicand+1,c
  3148  001050  0E03               	movlw	3
  3149  001052  6E11               	movwf	___wmul@multiplicand,c
  3150  001054  ECE1  F011         	call	___wmul	;wreg free
  3151  001058  0E29               	movlw	low __npowers_
  3152  00105A  240F               	addwf	?___wmul,w,c
  3153  00105C  6EF6               	movwf	tblptrl,c
  3154  00105E  0E03               	movlw	high __npowers_
  3155  001060  2010               	addwfc	?___wmul+1,w,c
  3156  001062  6EF7               	movwf	tblptrh,c
  3157  001064                     	if	0	;There are less than 3 active tblptr bytes
  3158  001064                     	endif
  3159  001064  0009               	tblrd		*+
  3160  001066  CFF5 F015          	movff	tablat,___ftmul@f1
  3161  00106A  0009               	tblrd		*+
  3162  00106C  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3163  001070  000A               	tblrd		*-
  3164  001072  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3165  001076  EC27  F00D         	call	___ftmul	;wreg free
  3166  00107A  C015  F02A         	movff	?___ftmul,_fround$1136
  3167  00107E  C016  F02B         	movff	?___ftmul+1,_fround$1136+1
  3168  001082  C017  F02C         	movff	?___ftmul+2,_fround$1136+2
  3169                           
  3170                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3171  001086  0E00               	movlw	0
  3172  001088  6E12               	movwf	___wmul@multiplicand+1,c
  3173  00108A  0E03               	movlw	3
  3174  00108C  6E11               	movwf	___wmul@multiplicand,c
  3175  00108E  0E00               	movlw	0
  3176  001090  6E04               	movwf	___awmod@divisor+1,c
  3177  001092  0E0A               	movlw	10
  3178  001094  6E03               	movwf	___awmod@divisor,c
  3179  001096  C02D  F001         	movff	fround@prec,___awmod@dividend
  3180  00109A  6A02               	clrf	___awmod@dividend+1,c
  3181  00109C  EC23  F010         	call	___awmod	;wreg free
  3182  0010A0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3183  0010A4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3184  0010A8  ECE1  F011         	call	___wmul	;wreg free
  3185  0010AC  0E29               	movlw	low __npowers_
  3186  0010AE  240F               	addwf	?___wmul,w,c
  3187  0010B0  6EF6               	movwf	tblptrl,c
  3188  0010B2  0E03               	movlw	high __npowers_
  3189  0010B4  2010               	addwfc	?___wmul+1,w,c
  3190  0010B6  6EF7               	movwf	tblptrh,c
  3191  0010B8                     	if	0	;There are less than 3 active tblptr bytes
  3192  0010B8                     	endif
  3193  0010B8  0009               	tblrd		*+
  3194  0010BA  CFF5 F018          	movff	tablat,___ftmul@f2
  3195  0010BE  0009               	tblrd		*+
  3196  0010C0  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3197  0010C4  000A               	tblrd		*-
  3198  0010C6  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3199  0010CA  C02A  F015         	movff	_fround$1136,___ftmul@f1
  3200  0010CE  C02B  F016         	movff	_fround$1136+1,___ftmul@f1+1
  3201  0010D2  C02C  F017         	movff	_fround$1136+2,___ftmul@f1+2
  3202  0010D6  EC27  F00D         	call	___ftmul	;wreg free
  3203  0010DA  C015  F027         	movff	?___ftmul,_fround$1137
  3204  0010DE  C016  F028         	movff	?___ftmul+1,_fround$1137+1
  3205  0010E2  C017  F029         	movff	?___ftmul+2,_fround$1137+2
  3206                           
  3207                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3208  0010E6  C027  F015         	movff	_fround$1137,___ftmul@f1
  3209  0010EA  C028  F016         	movff	_fround$1137+1,___ftmul@f1+1
  3210  0010EE  C029  F017         	movff	_fround$1137+2,___ftmul@f1+2
  3211  0010F2  0E00               	movlw	0
  3212  0010F4  6E18               	movwf	___ftmul@f2,c
  3213  0010F6  0E00               	movlw	0
  3214  0010F8  6E19               	movwf	___ftmul@f2+1,c
  3215  0010FA  0E3F               	movlw	63
  3216  0010FC  6E1A               	movwf	___ftmul@f2+2,c
  3217  0010FE  EC27  F00D         	call	___ftmul	;wreg free
  3218  001102  D07D               	goto	L8
  3219  001104  D083               	goto	l212
  3220  001106  D062               	goto	l2428
  3221  001108                     l2420:
  3222                           
  3223                           ;doprnt.c: 415: else if(prec > 10)
  3224  001108  0E0A               	movlw	10
  3225  00110A  642D               	cpfsgt	fround@prec,c
  3226  00110C  D05F               	goto	l2428
  3227                           
  3228                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3229  00110E  0E00               	movlw	0
  3230  001110  6E12               	movwf	___wmul@multiplicand+1,c
  3231  001112  0E03               	movlw	3
  3232  001114  6E11               	movwf	___wmul@multiplicand,c
  3233  001116  0E00               	movlw	0
  3234  001118  6E04               	movwf	___awmod@divisor+1,c
  3235  00111A  0E0A               	movlw	10
  3236  00111C  6E03               	movwf	___awmod@divisor,c
  3237  00111E  C02D  F001         	movff	fround@prec,___awmod@dividend
  3238  001122  6A02               	clrf	___awmod@dividend+1,c
  3239  001124  EC23  F010         	call	___awmod	;wreg free
  3240  001128  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3241  00112C  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3242  001130  ECE1  F011         	call	___wmul	;wreg free
  3243  001134  0E29               	movlw	low __npowers_
  3244  001136  240F               	addwf	?___wmul,w,c
  3245  001138  6EF6               	movwf	tblptrl,c
  3246  00113A  0E03               	movlw	high __npowers_
  3247  00113C  2010               	addwfc	?___wmul+1,w,c
  3248  00113E  6EF7               	movwf	tblptrh,c
  3249  001140                     	if	0	;There are less than 3 active tblptr bytes
  3250  001140                     	endif
  3251  001140  0009               	tblrd		*+
  3252  001142  CFF5 F018          	movff	tablat,___ftmul@f2
  3253  001146  0009               	tblrd		*+
  3254  001148  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3255  00114C  000A               	tblrd		*-
  3256  00114E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3257  001152  0E00               	movlw	0
  3258  001154  6E0A               	movwf	___awdiv@divisor+1,c
  3259  001156  0E0A               	movlw	10
  3260  001158  6E09               	movwf	___awdiv@divisor,c
  3261  00115A  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3262  00115E  6A08               	clrf	___awdiv@dividend+1,c
  3263  001160  EC47  F00F         	call	___awdiv	;wreg free
  3264  001164  0E09               	movlw	9
  3265  001166  2407               	addwf	?___awdiv,w,c
  3266  001168  6E0F               	movwf	___wmul@multiplier,c
  3267  00116A  0E00               	movlw	0
  3268  00116C  2008               	addwfc	?___awdiv+1,w,c
  3269  00116E  6E10               	movwf	___wmul@multiplier+1,c
  3270  001170  0E00               	movlw	0
  3271  001172  6E12               	movwf	___wmul@multiplicand+1,c
  3272  001174  0E03               	movlw	3
  3273  001176  6E11               	movwf	___wmul@multiplicand,c
  3274  001178  ECE1  F011         	call	___wmul	;wreg free
  3275  00117C  0E29               	movlw	low __npowers_
  3276  00117E  240F               	addwf	?___wmul,w,c
  3277  001180  6EF6               	movwf	tblptrl,c
  3278  001182  0E03               	movlw	high __npowers_
  3279  001184  2010               	addwfc	?___wmul+1,w,c
  3280  001186  6EF7               	movwf	tblptrh,c
  3281  001188                     	if	0	;There are less than 3 active tblptr bytes
  3282  001188                     	endif
  3283  001188  0009               	tblrd		*+
  3284  00118A  CFF5 F015          	movff	tablat,___ftmul@f1
  3285  00118E  0009               	tblrd		*+
  3286  001190  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3287  001194  000A               	tblrd		*-
  3288  001196  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3289  00119A  EC27  F00D         	call	___ftmul	;wreg free
  3290  00119E  C015  F02A         	movff	?___ftmul,_fround$1136
  3291  0011A2  C016  F02B         	movff	?___ftmul+1,_fround$1136+1
  3292  0011A6  C017  F02C         	movff	?___ftmul+2,_fround$1136+2
  3293                           
  3294                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3295  0011AA  C02A  F015         	movff	_fround$1136,___ftmul@f1
  3296  0011AE  C02B  F016         	movff	_fround$1136+1,___ftmul@f1+1
  3297  0011B2  C02C  F017         	movff	_fround$1136+2,___ftmul@f1+2
  3298  0011B6  0E00               	movlw	0
  3299  0011B8  6E18               	movwf	___ftmul@f2,c
  3300  0011BA  0E00               	movlw	0
  3301  0011BC  6E19               	movwf	___ftmul@f2+1,c
  3302  0011BE  0E3F               	movlw	63
  3303  0011C0  6E1A               	movwf	___ftmul@f2+2,c
  3304  0011C2  EC27  F00D         	call	___ftmul	;wreg free
  3305  0011C6  D01B               	goto	L8
  3306  0011C8  D021               	goto	l212
  3307  0011CA  D000               	goto	l2428
  3308  0011CC                     l2428:
  3309                           
  3310                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3311  0011CC  502D               	movf	fround@prec,w,c
  3312  0011CE  0D03               	mullw	3
  3313  0011D0  0E29               	movlw	low __npowers_
  3314  0011D2  24F3               	addwf	prodl,w,c
  3315  0011D4  6EF6               	movwf	tblptrl,c
  3316  0011D6  0E03               	movlw	high __npowers_
  3317  0011D8  20F4               	addwfc	prodh,w,c
  3318  0011DA  6EF7               	movwf	tblptrh,c
  3319  0011DC                     	if	0	;There are less than 3 active tblptr bytes
  3320  0011DC                     	endif
  3321  0011DC  0009               	tblrd		*+
  3322  0011DE  CFF5 F015          	movff	tablat,___ftmul@f1
  3323  0011E2  0009               	tblrd		*+
  3324  0011E4  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3325  0011E8  000A               	tblrd		*-
  3326  0011EA  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3327  0011EE  0E00               	movlw	0
  3328  0011F0  6E18               	movwf	___ftmul@f2,c
  3329  0011F2  0E00               	movlw	0
  3330  0011F4  6E19               	movwf	___ftmul@f2+1,c
  3331  0011F6  0E3F               	movlw	63
  3332  0011F8  6E1A               	movwf	___ftmul@f2+2,c
  3333  0011FA  EC27  F00D         	call	___ftmul	;wreg free
  3334  0011FE                     L8:
  3335  0011FE  C015  F024         	movff	?___ftmul,?_fround
  3336  001202  C016  F025         	movff	?___ftmul+1,?_fround+1
  3337  001206  C017  F026         	movff	?___ftmul+2,?_fround+2
  3338  00120A  D000               	goto	l212
  3339  00120C                     l212:
  3340  00120C  0012               	return		;funcret
  3341  00120E                     __end_of_fround:
  3342                           	opt stack 0
  3343                           tblptru	equ	0xFF8
  3344                           tblptrh	equ	0xFF7
  3345                           tblptrl	equ	0xFF6
  3346                           tablat	equ	0xFF5
  3347                           prodh	equ	0xFF4
  3348                           prodl	equ	0xFF3
  3349                           postinc0	equ	0xFEE
  3350                           wreg	equ	0xFE8
  3351                           indf2	equ	0xFDF
  3352                           postinc2	equ	0xFDE
  3353                           postdec2	equ	0xFDD
  3354                           fsr2h	equ	0xFDA
  3355                           fsr2l	equ	0xFD9
  3356                           status	equ	0xFD8
  3357                           
  3358 ;; *************** function ___awmod *****************
  3359 ;; Defined at:
  3360 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;  dividend        2    0[COMRAM] int 
  3363 ;;  divisor         2    2[COMRAM] int 
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;  sign            1    5[COMRAM] unsigned char 
  3366 ;;  counter         1    4[COMRAM] unsigned char 
  3367 ;; Return value:  Size  Location     Type
  3368 ;;                  2    0[COMRAM] int 
  3369 ;; Registers used:
  3370 ;;		wreg, status,2, status,0
  3371 ;; Tracked objects:
  3372 ;;		On entry : 0/0
  3373 ;;		On exit  : 0/0
  3374 ;;		Unchanged: 0/0
  3375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3376 ;;      Params:         4       0       0       0
  3377 ;;      Locals:         2       0       0       0
  3378 ;;      Temps:          0       0       0       0
  3379 ;;      Totals:         6       0       0       0
  3380 ;;Total ram usage:        6 bytes
  3381 ;; Hardware stack levels used:    1
  3382 ;; This function calls:
  3383 ;;		Nothing
  3384 ;; This function is called by:
  3385 ;;		_fround
  3386 ;;		_scale
  3387 ;; This function uses a non-reentrant model
  3388 ;;
  3389                           
  3390                           	psect	text5
  3391  002046                     __ptext5:
  3392                           	opt stack 0
  3393  002046                     ___awmod:
  3394                           	opt stack 28
  3395                           
  3396                           ;incstack = 0
  3397  002046  0E00               	movlw	0
  3398  002048  6E06               	movwf	___awmod@sign,c
  3399  00204A  AE02               	btfss	___awmod@dividend+1,7,c
  3400  00204C  D007               	goto	l2330
  3401  00204E  6C01               	negf	___awmod@dividend,c
  3402  002050  1E02               	comf	___awmod@dividend+1,f,c
  3403  002052  B0D8               	btfsc	status,0,c
  3404  002054  2A02               	incf	___awmod@dividend+1,f,c
  3405  002056  0E01               	movlw	1
  3406  002058  6E06               	movwf	___awmod@sign,c
  3407  00205A  D000               	goto	l2330
  3408  00205C                     l2330:
  3409  00205C  AE04               	btfss	___awmod@divisor+1,7,c
  3410  00205E  D005               	goto	l2334
  3411  002060  6C03               	negf	___awmod@divisor,c
  3412  002062  1E04               	comf	___awmod@divisor+1,f,c
  3413  002064  B0D8               	btfsc	status,0,c
  3414  002066  2A04               	incf	___awmod@divisor+1,f,c
  3415  002068  D000               	goto	l2334
  3416  00206A                     l2334:
  3417  00206A  5003               	movf	___awmod@divisor,w,c
  3418  00206C  1004               	iorwf	___awmod@divisor+1,w,c
  3419  00206E  B4D8               	btfsc	status,2,c
  3420  002070  D01D               	goto	l2350
  3421  002072  0E01               	movlw	1
  3422  002074  6E05               	movwf	___awmod@counter,c
  3423  002076  D005               	goto	l2340
  3424  002078                     l2338:
  3425  002078  90D8               	bcf	status,0,c
  3426  00207A  3603               	rlcf	___awmod@divisor,f,c
  3427  00207C  3604               	rlcf	___awmod@divisor+1,f,c
  3428  00207E  2A05               	incf	___awmod@counter,f,c
  3429  002080  D000               	goto	l2340
  3430  002082                     l2340:
  3431  002082  BE04               	btfsc	___awmod@divisor+1,7,c
  3432  002084  D002               	goto	l2342
  3433  002086  D7F8               	goto	l2338
  3434  002088  D000               	goto	l2342
  3435  00208A                     l2342:
  3436  00208A  5003               	movf	___awmod@divisor,w,c
  3437  00208C  5C01               	subwf	___awmod@dividend,w,c
  3438  00208E  5004               	movf	___awmod@divisor+1,w,c
  3439  002090  5802               	subwfb	___awmod@dividend+1,w,c
  3440  002092  A0D8               	btfss	status,0,c
  3441  002094  D005               	goto	l2346
  3442  002096  5003               	movf	___awmod@divisor,w,c
  3443  002098  5E01               	subwf	___awmod@dividend,f,c
  3444  00209A  5004               	movf	___awmod@divisor+1,w,c
  3445  00209C  5A02               	subwfb	___awmod@dividend+1,f,c
  3446  00209E  D000               	goto	l2346
  3447  0020A0                     l2346:
  3448  0020A0  90D8               	bcf	status,0,c
  3449  0020A2  3204               	rrcf	___awmod@divisor+1,f,c
  3450  0020A4  3203               	rrcf	___awmod@divisor,f,c
  3451  0020A6  2E05               	decfsz	___awmod@counter,f,c
  3452  0020A8  D7F0               	goto	l2342
  3453  0020AA  D000               	goto	l2350
  3454  0020AC                     l2350:
  3455  0020AC  5006               	movf	___awmod@sign,w,c
  3456  0020AE  B4D8               	btfsc	status,2,c
  3457  0020B0  D005               	goto	l2354
  3458  0020B2  6C01               	negf	___awmod@dividend,c
  3459  0020B4  1E02               	comf	___awmod@dividend+1,f,c
  3460  0020B6  B0D8               	btfsc	status,0,c
  3461  0020B8  2A02               	incf	___awmod@dividend+1,f,c
  3462  0020BA  D000               	goto	l2354
  3463  0020BC                     l2354:
  3464  0020BC  C001  F001         	movff	___awmod@dividend,?___awmod
  3465  0020C0  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3466  0020C4  D000               	goto	l494
  3467  0020C6                     l494:
  3468  0020C6  0012               	return		;funcret
  3469  0020C8                     __end_of___awmod:
  3470                           	opt stack 0
  3471                           tblptru	equ	0xFF8
  3472                           tblptrh	equ	0xFF7
  3473                           tblptrl	equ	0xFF6
  3474                           tablat	equ	0xFF5
  3475                           prodh	equ	0xFF4
  3476                           prodl	equ	0xFF3
  3477                           postinc0	equ	0xFEE
  3478                           wreg	equ	0xFE8
  3479                           indf2	equ	0xFDF
  3480                           postinc2	equ	0xFDE
  3481                           postdec2	equ	0xFDD
  3482                           fsr2h	equ	0xFDA
  3483                           fsr2l	equ	0xFD9
  3484                           status	equ	0xFD8
  3485                           
  3486 ;; *************** function ___awdiv *****************
  3487 ;; Defined at:
  3488 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  3489 ;; Parameters:    Size  Location     Type
  3490 ;;  dividend        2    6[COMRAM] int 
  3491 ;;  divisor         2    8[COMRAM] int 
  3492 ;; Auto vars:     Size  Location     Type
  3493 ;;  quotient        2   12[COMRAM] int 
  3494 ;;  sign            1   11[COMRAM] unsigned char 
  3495 ;;  counter         1   10[COMRAM] unsigned char 
  3496 ;; Return value:  Size  Location     Type
  3497 ;;                  2    6[COMRAM] int 
  3498 ;; Registers used:
  3499 ;;		wreg, status,2, status,0
  3500 ;; Tracked objects:
  3501 ;;		On entry : 0/0
  3502 ;;		On exit  : 0/0
  3503 ;;		Unchanged: 0/0
  3504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3505 ;;      Params:         4       0       0       0
  3506 ;;      Locals:         4       0       0       0
  3507 ;;      Temps:          0       0       0       0
  3508 ;;      Totals:         8       0       0       0
  3509 ;;Total ram usage:        8 bytes
  3510 ;; Hardware stack levels used:    1
  3511 ;; This function calls:
  3512 ;;		Nothing
  3513 ;; This function is called by:
  3514 ;;		_fround
  3515 ;;		_scale
  3516 ;;		_sprintf
  3517 ;; This function uses a non-reentrant model
  3518 ;;
  3519                           
  3520                           	psect	text6
  3521  001E8E                     __ptext6:
  3522                           	opt stack 0
  3523  001E8E                     ___awdiv:
  3524                           	opt stack 28
  3525                           
  3526                           ;incstack = 0
  3527  001E8E  0E00               	movlw	0
  3528  001E90  6E0C               	movwf	___awdiv@sign,c
  3529  001E92  AE0A               	btfss	___awdiv@divisor+1,7,c
  3530  001E94  D007               	goto	l2286
  3531  001E96  6C09               	negf	___awdiv@divisor,c
  3532  001E98  1E0A               	comf	___awdiv@divisor+1,f,c
  3533  001E9A  B0D8               	btfsc	status,0,c
  3534  001E9C  2A0A               	incf	___awdiv@divisor+1,f,c
  3535  001E9E  0E01               	movlw	1
  3536  001EA0  6E0C               	movwf	___awdiv@sign,c
  3537  001EA2  D000               	goto	l2286
  3538  001EA4                     l2286:
  3539  001EA4  AE08               	btfss	___awdiv@dividend+1,7,c
  3540  001EA6  D007               	goto	l2292
  3541  001EA8  6C07               	negf	___awdiv@dividend,c
  3542  001EAA  1E08               	comf	___awdiv@dividend+1,f,c
  3543  001EAC  B0D8               	btfsc	status,0,c
  3544  001EAE  2A08               	incf	___awdiv@dividend+1,f,c
  3545  001EB0  0E01               	movlw	1
  3546  001EB2  1A0C               	xorwf	___awdiv@sign,f,c
  3547  001EB4  D000               	goto	l2292
  3548  001EB6                     l2292:
  3549  001EB6  0E00               	movlw	0
  3550  001EB8  6E0E               	movwf	___awdiv@quotient+1,c
  3551  001EBA  0E00               	movlw	0
  3552  001EBC  6E0D               	movwf	___awdiv@quotient,c
  3553  001EBE  5009               	movf	___awdiv@divisor,w,c
  3554  001EC0  100A               	iorwf	___awdiv@divisor+1,w,c
  3555  001EC2  B4D8               	btfsc	status,2,c
  3556  001EC4  D021               	goto	l2314
  3557  001EC6  0E01               	movlw	1
  3558  001EC8  6E0B               	movwf	___awdiv@counter,c
  3559  001ECA  D005               	goto	l2300
  3560  001ECC                     l2298:
  3561  001ECC  90D8               	bcf	status,0,c
  3562  001ECE  3609               	rlcf	___awdiv@divisor,f,c
  3563  001ED0  360A               	rlcf	___awdiv@divisor+1,f,c
  3564  001ED2  2A0B               	incf	___awdiv@counter,f,c
  3565  001ED4  D000               	goto	l2300
  3566  001ED6                     l2300:
  3567  001ED6  BE0A               	btfsc	___awdiv@divisor+1,7,c
  3568  001ED8  D002               	goto	l2302
  3569  001EDA  D7F8               	goto	l2298
  3570  001EDC  D000               	goto	l2302
  3571  001EDE                     l2302:
  3572  001EDE  90D8               	bcf	status,0,c
  3573  001EE0  360D               	rlcf	___awdiv@quotient,f,c
  3574  001EE2  360E               	rlcf	___awdiv@quotient+1,f,c
  3575  001EE4  5009               	movf	___awdiv@divisor,w,c
  3576  001EE6  5C07               	subwf	___awdiv@dividend,w,c
  3577  001EE8  500A               	movf	___awdiv@divisor+1,w,c
  3578  001EEA  5808               	subwfb	___awdiv@dividend+1,w,c
  3579  001EEC  A0D8               	btfss	status,0,c
  3580  001EEE  D006               	goto	l2310
  3581  001EF0  5009               	movf	___awdiv@divisor,w,c
  3582  001EF2  5E07               	subwf	___awdiv@dividend,f,c
  3583  001EF4  500A               	movf	___awdiv@divisor+1,w,c
  3584  001EF6  5A08               	subwfb	___awdiv@dividend+1,f,c
  3585  001EF8  800D               	bsf	___awdiv@quotient,0,c
  3586  001EFA  D000               	goto	l2310
  3587  001EFC                     l2310:
  3588  001EFC  90D8               	bcf	status,0,c
  3589  001EFE  320A               	rrcf	___awdiv@divisor+1,f,c
  3590  001F00  3209               	rrcf	___awdiv@divisor,f,c
  3591  001F02  2E0B               	decfsz	___awdiv@counter,f,c
  3592  001F04  D7EC               	goto	l2302
  3593  001F06  D000               	goto	l2314
  3594  001F08                     l2314:
  3595  001F08  500C               	movf	___awdiv@sign,w,c
  3596  001F0A  B4D8               	btfsc	status,2,c
  3597  001F0C  D005               	goto	l2318
  3598  001F0E  6C0D               	negf	___awdiv@quotient,c
  3599  001F10  1E0E               	comf	___awdiv@quotient+1,f,c
  3600  001F12  B0D8               	btfsc	status,0,c
  3601  001F14  2A0E               	incf	___awdiv@quotient+1,f,c
  3602  001F16  D000               	goto	l2318
  3603  001F18                     l2318:
  3604  001F18  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3605  001F1C  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3606  001F20  D000               	goto	l481
  3607  001F22                     l481:
  3608  001F22  0012               	return		;funcret
  3609  001F24                     __end_of___awdiv:
  3610                           	opt stack 0
  3611                           tblptru	equ	0xFF8
  3612                           tblptrh	equ	0xFF7
  3613                           tblptrl	equ	0xFF6
  3614                           tablat	equ	0xFF5
  3615                           prodh	equ	0xFF4
  3616                           prodl	equ	0xFF3
  3617                           postinc0	equ	0xFEE
  3618                           wreg	equ	0xFE8
  3619                           indf2	equ	0xFDF
  3620                           postinc2	equ	0xFDE
  3621                           postdec2	equ	0xFDD
  3622                           fsr2h	equ	0xFDA
  3623                           fsr2l	equ	0xFD9
  3624                           status	equ	0xFD8
  3625                           
  3626 ;; *************** function __tdiv_to_l_ *****************
  3627 ;; Defined at:
  3628 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;  f1              3    0[COMRAM] float 
  3631 ;;  f2              3    3[COMRAM] float 
  3632 ;; Auto vars:     Size  Location     Type
  3633 ;;  quot            4    9[COMRAM] unsigned long 
  3634 ;;  exp1            1   14[COMRAM] unsigned char 
  3635 ;;  cntr            1   13[COMRAM] unsigned char 
  3636 ;; Return value:  Size  Location     Type
  3637 ;;                  4    0[COMRAM] unsigned long 
  3638 ;; Registers used:
  3639 ;;		wreg, status,2, status,0
  3640 ;; Tracked objects:
  3641 ;;		On entry : 0/0
  3642 ;;		On exit  : 0/0
  3643 ;;		Unchanged: 0/0
  3644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3645 ;;      Params:         6       0       0       0
  3646 ;;      Locals:         6       0       0       0
  3647 ;;      Temps:          3       0       0       0
  3648 ;;      Totals:        15       0       0       0
  3649 ;;Total ram usage:       15 bytes
  3650 ;; Hardware stack levels used:    1
  3651 ;; This function calls:
  3652 ;;		Nothing
  3653 ;; This function is called by:
  3654 ;;		_sprintf
  3655 ;; This function uses a non-reentrant model
  3656 ;;
  3657                           
  3658                           	psect	text7
  3659  001834                     __ptext7:
  3660                           	opt stack 0
  3661  001834                     __tdiv_to_l_:
  3662                           	opt stack 29
  3663                           
  3664                           ;incstack = 0
  3665  001834  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3666  001838  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3667  00183A  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3668  00183C  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3669  00183E  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3670  001840  E301               	bnc	u2211
  3671  001842  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3672  001844                     u2211:
  3673  001844  5007               	movf	??__tdiv_to_l_,w,c
  3674  001846  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3675  001848  500F               	movf	__tdiv_to_l_@exp1,w,c
  3676  00184A  A4D8               	btfss	status,2,c
  3677  00184C  D002               	goto	l2488
  3678  00184E  D05D               	goto	l2530
  3679  001850  D078               	goto	l693
  3680  001852                     l2488:
  3681  001852  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3682  001856  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3683  001858  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3684  00185A  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3685  00185C  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3686  00185E  E301               	bnc	u2231
  3687  001860  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3688  001862                     u2231:
  3689  001862  5007               	movf	??__tdiv_to_l_,w,c
  3690  001864  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3691  001866  500E               	movf	__tdiv_to_l_@cntr,w,c
  3692  001868  A4D8               	btfss	status,2,c
  3693  00186A  D002               	goto	l2494
  3694  00186C  D04E               	goto	l2530
  3695  00186E  D069               	goto	l693
  3696  001870                     l2494:
  3697  001870  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3698  001872  0EFF               	movlw	255
  3699  001874  1601               	andwf	__tdiv_to_l_@f1,f,c
  3700  001876  0EFF               	movlw	255
  3701  001878  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3702  00187A  0E00               	movlw	0
  3703  00187C  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3704  00187E  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3705  001880  0EFF               	movlw	255
  3706  001882  1604               	andwf	__tdiv_to_l_@f2,f,c
  3707  001884  0EFF               	movlw	255
  3708  001886  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3709  001888  0E00               	movlw	0
  3710  00188A  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3711  00188C  0E00               	movlw	0
  3712  00188E  6E0A               	movwf	__tdiv_to_l_@quot,c
  3713  001890  0E00               	movlw	0
  3714  001892  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3715  001894  0E00               	movlw	0
  3716  001896  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3717  001898  0E00               	movlw	0
  3718  00189A  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3719  00189C  0E7F               	movlw	127
  3720  00189E  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3721  0018A0  500E               	movf	__tdiv_to_l_@cntr,w,c
  3722  0018A2  0F98               	addlw	152
  3723  0018A4  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3724  0018A6  0E18               	movlw	24
  3725  0018A8  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3726  0018AA                     l695:
  3727  0018AA  90D8               	bcf	status,0,c
  3728  0018AC  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3729  0018AE  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3730  0018B0  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3731  0018B2  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3732  0018B4  5004               	movf	__tdiv_to_l_@f2,w,c
  3733  0018B6  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3734  0018B8  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3735  0018BA  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3736  0018BC  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3737  0018BE  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3738  0018C0  A0D8               	btfss	status,0,c
  3739  0018C2  D007               	goto	l696
  3740  0018C4  5004               	movf	__tdiv_to_l_@f2,w,c
  3741  0018C6  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3742  0018C8  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3743  0018CA  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3744  0018CC  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3745  0018CE  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3746  0018D0  800A               	bsf	__tdiv_to_l_@quot,0,c
  3747  0018D2                     l696:
  3748  0018D2  90D8               	bcf	status,0,c
  3749  0018D4  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3750  0018D6  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  3751  0018D8  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  3752  0018DA  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  3753  0018DC  D7E6               	goto	l695
  3754  0018DE  D000               	goto	l2516
  3755  0018E0                     l2516:
  3756  0018E0  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  3757  0018E2  D010               	goto	l2528
  3758  0018E4  500F               	movf	__tdiv_to_l_@exp1,w,c
  3759  0018E6  0A80               	xorlw	128
  3760  0018E8  0F97               	addlw	151
  3761  0018EA  B0D8               	btfsc	status,0,c
  3762  0018EC  D003               	goto	l2524
  3763  0018EE  D00D               	goto	l2530
  3764  0018F0  D028               	goto	l693
  3765  0018F2  D000               	goto	l2524
  3766  0018F4                     l2524:
  3767  0018F4  90D8               	bcf	status,0,c
  3768  0018F6  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  3769  0018F8  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  3770  0018FA  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  3771  0018FC  320A               	rrcf	__tdiv_to_l_@quot,f,c
  3772  0018FE  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  3773  001900  D7F9               	goto	l2524
  3774  001902  D017               	goto	l702
  3775  001904                     l2528:
  3776  001904  0E17               	movlw	23
  3777  001906  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  3778  001908  D011               	goto	l2536
  3779  00190A                     l2530:
  3780  00190A  0E00               	movlw	0
  3781  00190C  6E01               	movwf	?__tdiv_to_l_,c
  3782  00190E  0E00               	movlw	0
  3783  001910  6E02               	movwf	?__tdiv_to_l_+1,c
  3784  001912  0E00               	movlw	0
  3785  001914  6E03               	movwf	?__tdiv_to_l_+2,c
  3786  001916  0E00               	movlw	0
  3787  001918  6E04               	movwf	?__tdiv_to_l_+3,c
  3788  00191A  D013               	goto	l693
  3789  00191C  D007               	goto	l2536
  3790  00191E                     l2534:
  3791  00191E  90D8               	bcf	status,0,c
  3792  001920  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3793  001922  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3794  001924  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3795  001926  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3796  001928  060F               	decf	__tdiv_to_l_@exp1,f,c
  3797  00192A  D000               	goto	l2536
  3798  00192C                     l2536:
  3799  00192C  500F               	movf	__tdiv_to_l_@exp1,w,c
  3800  00192E  A4D8               	btfss	status,2,c
  3801  001930  D7F6               	goto	l2534
  3802  001932                     l702:
  3803  001932  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3804  001936  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3805  00193A  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3806  00193E  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3807  001942                     l693:
  3808  001942  0012               	return		;funcret
  3809  001944                     __end_of__tdiv_to_l_:
  3810                           	opt stack 0
  3811                           tblptru	equ	0xFF8
  3812                           tblptrh	equ	0xFF7
  3813                           tblptrl	equ	0xFF6
  3814                           tablat	equ	0xFF5
  3815                           prodh	equ	0xFF4
  3816                           prodl	equ	0xFF3
  3817                           postinc0	equ	0xFEE
  3818                           wreg	equ	0xFE8
  3819                           indf2	equ	0xFDF
  3820                           postinc2	equ	0xFDE
  3821                           postdec2	equ	0xFDD
  3822                           fsr2h	equ	0xFDA
  3823                           fsr2l	equ	0xFD9
  3824                           status	equ	0xFD8
  3825                           
  3826 ;; *************** function __div_to_l_ *****************
  3827 ;; Defined at:
  3828 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
  3829 ;; Parameters:    Size  Location     Type
  3830 ;;  f1              3    0[COMRAM] unsigned long 
  3831 ;;  f2              3    3[COMRAM] unsigned long 
  3832 ;; Auto vars:     Size  Location     Type
  3833 ;;  quot            4    6[COMRAM] unsigned long 
  3834 ;;  exp1            1   11[COMRAM] unsigned char 
  3835 ;;  cntr            1   10[COMRAM] unsigned char 
  3836 ;; Return value:  Size  Location     Type
  3837 ;;                  4    0[COMRAM] unsigned long 
  3838 ;; Registers used:
  3839 ;;		wreg, status,2, status,0
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/0
  3842 ;;		On exit  : 0/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3845 ;;      Params:         6       0       0       0
  3846 ;;      Locals:         6       0       0       0
  3847 ;;      Temps:          0       0       0       0
  3848 ;;      Totals:        12       0       0       0
  3849 ;;Total ram usage:       12 bytes
  3850 ;; Hardware stack levels used:    1
  3851 ;; This function calls:
  3852 ;;		Nothing
  3853 ;; This function is called by:
  3854 ;;		_sprintf
  3855 ;; This function uses a non-reentrant model
  3856 ;;
  3857                           
  3858                           	psect	text8
  3859  001944                     __ptext8:
  3860                           	opt stack 0
  3861  001944                     __div_to_l_:
  3862                           	opt stack 29
  3863                           
  3864                           ;incstack = 0
  3865  001944  3403               	rlcf	__div_to_l_@f1+2,w,c
  3866  001946  3404               	rlcf	__div_to_l_@f1+3,w,c
  3867  001948  6E0C               	movwf	__div_to_l_@exp1,c
  3868  00194A  500C               	movf	__div_to_l_@exp1,w,c
  3869  00194C  A4D8               	btfss	status,2,c
  3870  00194E  D002               	goto	l2544
  3871  001950  D061               	goto	l2590
  3872  001952  D07C               	goto	l572
  3873  001954                     l2544:
  3874  001954  3406               	rlcf	__div_to_l_@f2+2,w,c
  3875  001956  3407               	rlcf	__div_to_l_@f2+3,w,c
  3876  001958  6E0B               	movwf	__div_to_l_@cntr,c
  3877  00195A  500B               	movf	__div_to_l_@cntr,w,c
  3878  00195C  A4D8               	btfss	status,2,c
  3879  00195E  D002               	goto	l2550
  3880  001960  D059               	goto	l2590
  3881  001962  D074               	goto	l572
  3882  001964                     l2550:
  3883  001964  8E03               	bsf	__div_to_l_@f1+2,7,c
  3884  001966  0EFF               	movlw	255
  3885  001968  1601               	andwf	__div_to_l_@f1,f,c
  3886  00196A  0EFF               	movlw	255
  3887  00196C  1602               	andwf	__div_to_l_@f1+1,f,c
  3888  00196E  0EFF               	movlw	255
  3889  001970  1603               	andwf	__div_to_l_@f1+2,f,c
  3890  001972  0E00               	movlw	0
  3891  001974  1604               	andwf	__div_to_l_@f1+3,f,c
  3892  001976  8E06               	bsf	__div_to_l_@f2+2,7,c
  3893  001978  0EFF               	movlw	255
  3894  00197A  1604               	andwf	__div_to_l_@f2,f,c
  3895  00197C  0EFF               	movlw	255
  3896  00197E  1605               	andwf	__div_to_l_@f2+1,f,c
  3897  001980  0EFF               	movlw	255
  3898  001982  1606               	andwf	__div_to_l_@f2+2,f,c
  3899  001984  0E00               	movlw	0
  3900  001986  1607               	andwf	__div_to_l_@f2+3,f,c
  3901  001988  0E00               	movlw	0
  3902  00198A  6E07               	movwf	__div_to_l_@quot,c
  3903  00198C  0E00               	movlw	0
  3904  00198E  6E08               	movwf	__div_to_l_@quot+1,c
  3905  001990  0E00               	movlw	0
  3906  001992  6E09               	movwf	__div_to_l_@quot+2,c
  3907  001994  0E00               	movlw	0
  3908  001996  6E0A               	movwf	__div_to_l_@quot+3,c
  3909  001998  0E7F               	movlw	127
  3910  00199A  5E0C               	subwf	__div_to_l_@exp1,f,c
  3911  00199C  500B               	movf	__div_to_l_@cntr,w,c
  3912  00199E  0FA0               	addlw	160
  3913  0019A0  5E0C               	subwf	__div_to_l_@exp1,f,c
  3914  0019A2  0E20               	movlw	32
  3915  0019A4  6E0B               	movwf	__div_to_l_@cntr,c
  3916  0019A6  D000               	goto	l2564
  3917  0019A8                     l2564:
  3918  0019A8  90D8               	bcf	status,0,c
  3919  0019AA  3607               	rlcf	__div_to_l_@quot,f,c
  3920  0019AC  3608               	rlcf	__div_to_l_@quot+1,f,c
  3921  0019AE  3609               	rlcf	__div_to_l_@quot+2,f,c
  3922  0019B0  360A               	rlcf	__div_to_l_@quot+3,f,c
  3923  0019B2  5004               	movf	__div_to_l_@f2,w,c
  3924  0019B4  5C01               	subwf	__div_to_l_@f1,w,c
  3925  0019B6  5005               	movf	__div_to_l_@f2+1,w,c
  3926  0019B8  5802               	subwfb	__div_to_l_@f1+1,w,c
  3927  0019BA  5006               	movf	__div_to_l_@f2+2,w,c
  3928  0019BC  5803               	subwfb	__div_to_l_@f1+2,w,c
  3929  0019BE  5007               	movf	__div_to_l_@f2+3,w,c
  3930  0019C0  5804               	subwfb	__div_to_l_@f1+3,w,c
  3931  0019C2  A0D8               	btfss	status,0,c
  3932  0019C4  D00A               	goto	l2572
  3933  0019C6  5004               	movf	__div_to_l_@f2,w,c
  3934  0019C8  5E01               	subwf	__div_to_l_@f1,f,c
  3935  0019CA  5005               	movf	__div_to_l_@f2+1,w,c
  3936  0019CC  5A02               	subwfb	__div_to_l_@f1+1,f,c
  3937  0019CE  5006               	movf	__div_to_l_@f2+2,w,c
  3938  0019D0  5A03               	subwfb	__div_to_l_@f1+2,f,c
  3939  0019D2  5007               	movf	__div_to_l_@f2+3,w,c
  3940  0019D4  5A04               	subwfb	__div_to_l_@f1+3,f,c
  3941  0019D6  8007               	bsf	__div_to_l_@quot,0,c
  3942  0019D8  D000               	goto	l2572
  3943  0019DA                     l2572:
  3944  0019DA  90D8               	bcf	status,0,c
  3945  0019DC  3601               	rlcf	__div_to_l_@f1,f,c
  3946  0019DE  3602               	rlcf	__div_to_l_@f1+1,f,c
  3947  0019E0  3603               	rlcf	__div_to_l_@f1+2,f,c
  3948  0019E2  3604               	rlcf	__div_to_l_@f1+3,f,c
  3949  0019E4  2E0B               	decfsz	__div_to_l_@cntr,f,c
  3950  0019E6  D7E0               	goto	l2564
  3951  0019E8  D000               	goto	l2576
  3952  0019EA                     l2576:
  3953  0019EA  AE0C               	btfss	__div_to_l_@exp1,7,c
  3954  0019EC  D010               	goto	l2588
  3955  0019EE  500C               	movf	__div_to_l_@exp1,w,c
  3956  0019F0  0A80               	xorlw	128
  3957  0019F2  0F9F               	addlw	159
  3958  0019F4  B0D8               	btfsc	status,0,c
  3959  0019F6  D003               	goto	l2584
  3960  0019F8  D00D               	goto	l2590
  3961  0019FA  D028               	goto	l572
  3962  0019FC  D000               	goto	l2584
  3963  0019FE                     l2584:
  3964  0019FE  90D8               	bcf	status,0,c
  3965  001A00  320A               	rrcf	__div_to_l_@quot+3,f,c
  3966  001A02  3209               	rrcf	__div_to_l_@quot+2,f,c
  3967  001A04  3208               	rrcf	__div_to_l_@quot+1,f,c
  3968  001A06  3207               	rrcf	__div_to_l_@quot,f,c
  3969  001A08  3E0C               	incfsz	__div_to_l_@exp1,f,c
  3970  001A0A  D7F9               	goto	l2584
  3971  001A0C  D017               	goto	l581
  3972  001A0E                     l2588:
  3973  001A0E  0E1F               	movlw	31
  3974  001A10  640C               	cpfsgt	__div_to_l_@exp1,c
  3975  001A12  D011               	goto	l2596
  3976  001A14                     l2590:
  3977  001A14  0E00               	movlw	0
  3978  001A16  6E01               	movwf	?__div_to_l_,c
  3979  001A18  0E00               	movlw	0
  3980  001A1A  6E02               	movwf	?__div_to_l_+1,c
  3981  001A1C  0E00               	movlw	0
  3982  001A1E  6E03               	movwf	?__div_to_l_+2,c
  3983  001A20  0E00               	movlw	0
  3984  001A22  6E04               	movwf	?__div_to_l_+3,c
  3985  001A24  D013               	goto	l572
  3986  001A26  D007               	goto	l2596
  3987  001A28                     l2594:
  3988  001A28  90D8               	bcf	status,0,c
  3989  001A2A  3607               	rlcf	__div_to_l_@quot,f,c
  3990  001A2C  3608               	rlcf	__div_to_l_@quot+1,f,c
  3991  001A2E  3609               	rlcf	__div_to_l_@quot+2,f,c
  3992  001A30  360A               	rlcf	__div_to_l_@quot+3,f,c
  3993  001A32  060C               	decf	__div_to_l_@exp1,f,c
  3994  001A34  D000               	goto	l2596
  3995  001A36                     l2596:
  3996  001A36  500C               	movf	__div_to_l_@exp1,w,c
  3997  001A38  A4D8               	btfss	status,2,c
  3998  001A3A  D7F6               	goto	l2594
  3999  001A3C                     l581:
  4000  001A3C  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4001  001A40  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4002  001A44  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4003  001A48  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4004  001A4C                     l572:
  4005  001A4C  0012               	return		;funcret
  4006  001A4E                     __end_of__div_to_l_:
  4007                           	opt stack 0
  4008                           tblptru	equ	0xFF8
  4009                           tblptrh	equ	0xFF7
  4010                           tblptrl	equ	0xFF6
  4011                           tablat	equ	0xFF5
  4012                           prodh	equ	0xFF4
  4013                           prodl	equ	0xFF3
  4014                           postinc0	equ	0xFEE
  4015                           wreg	equ	0xFE8
  4016                           indf2	equ	0xFDF
  4017                           postinc2	equ	0xFDE
  4018                           postdec2	equ	0xFDD
  4019                           fsr2h	equ	0xFDA
  4020                           fsr2l	equ	0xFD9
  4021                           status	equ	0xFD8
  4022                           
  4023 ;; *************** function ___lltoft *****************
  4024 ;; Defined at:
  4025 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  4026 ;; Parameters:    Size  Location     Type
  4027 ;;  c               4    8[COMRAM] unsigned long 
  4028 ;; Auto vars:     Size  Location     Type
  4029 ;;  exp             1   16[COMRAM] unsigned char 
  4030 ;; Return value:  Size  Location     Type
  4031 ;;                  3    8[COMRAM] float 
  4032 ;; Registers used:
  4033 ;;		wreg, status,2, status,0, cstack
  4034 ;; Tracked objects:
  4035 ;;		On entry : 0/0
  4036 ;;		On exit  : 0/0
  4037 ;;		Unchanged: 0/0
  4038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4039 ;;      Params:         4       0       0       0
  4040 ;;      Locals:         1       0       0       0
  4041 ;;      Temps:          4       0       0       0
  4042 ;;      Totals:         9       0       0       0
  4043 ;;Total ram usage:        9 bytes
  4044 ;; Hardware stack levels used:    1
  4045 ;; Hardware stack levels required when called:    1
  4046 ;; This function calls:
  4047 ;;		___ftpack
  4048 ;; This function is called by:
  4049 ;;		_sprintf
  4050 ;; This function uses a non-reentrant model
  4051 ;;
  4052                           
  4053                           	psect	text9
  4054  002210                     __ptext9:
  4055                           	opt stack 0
  4056  002210                     ___lltoft:
  4057                           	opt stack 28
  4058                           
  4059                           ;incstack = 0
  4060  002210  0E8E               	movlw	142
  4061  002212  6E11               	movwf	___lltoft@exp,c
  4062  002214  D007               	goto	l2762
  4063  002216                     l2760:
  4064  002216  90D8               	bcf	status,0,c
  4065  002218  320C               	rrcf	___lltoft@c+3,f,c
  4066  00221A  320B               	rrcf	___lltoft@c+2,f,c
  4067  00221C  320A               	rrcf	___lltoft@c+1,f,c
  4068  00221E  3209               	rrcf	___lltoft@c,f,c
  4069  002220  2A11               	incf	___lltoft@exp,f,c
  4070  002222  D000               	goto	l2762
  4071  002224                     l2762:
  4072  002224  0E00               	movlw	0
  4073  002226  1409               	andwf	___lltoft@c,w,c
  4074  002228  6E0D               	movwf	??___lltoft& (0+255),c
  4075  00222A  0E00               	movlw	0
  4076  00222C  140A               	andwf	___lltoft@c+1,w,c
  4077  00222E  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4078  002230  0E00               	movlw	0
  4079  002232  140B               	andwf	___lltoft@c+2,w,c
  4080  002234  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4081  002236  0EFF               	movlw	255
  4082  002238  140C               	andwf	___lltoft@c+3,w,c
  4083  00223A  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4084  00223C  500D               	movf	??___lltoft,w,c
  4085  00223E  100E               	iorwf	??___lltoft+1,w,c
  4086  002240  100F               	iorwf	??___lltoft+2,w,c
  4087  002242  1010               	iorwf	??___lltoft+3,w,c
  4088  002244  A4D8               	btfss	status,2,c
  4089  002246  D7E7               	goto	l2760
  4090  002248  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4091  00224C  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4092  002250  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4093  002254  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4094  002258  0E00               	movlw	0
  4095  00225A  6E05               	movwf	___ftpack@sign,c
  4096  00225C  EC87  F00E         	call	___ftpack	;wreg free
  4097  002260  C001  F009         	movff	?___ftpack,?___lltoft
  4098  002264  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4099  002268  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4100  00226C  D000               	goto	l826
  4101  00226E                     l826:
  4102  00226E  0012               	return		;funcret
  4103  002270                     __end_of___lltoft:
  4104                           	opt stack 0
  4105                           tblptru	equ	0xFF8
  4106                           tblptrh	equ	0xFF7
  4107                           tblptrl	equ	0xFF6
  4108                           tablat	equ	0xFF5
  4109                           prodh	equ	0xFF4
  4110                           prodl	equ	0xFF3
  4111                           postinc0	equ	0xFEE
  4112                           wreg	equ	0xFE8
  4113                           indf2	equ	0xFDF
  4114                           postinc2	equ	0xFDE
  4115                           postdec2	equ	0xFDD
  4116                           fsr2h	equ	0xFDA
  4117                           fsr2l	equ	0xFD9
  4118                           status	equ	0xFD8
  4119                           
  4120 ;; *************** function ___llmod *****************
  4121 ;; Defined at:
  4122 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  4123 ;; Parameters:    Size  Location     Type
  4124 ;;  dividend        4    0[COMRAM] unsigned long 
  4125 ;;  divisor         4    4[COMRAM] unsigned long 
  4126 ;; Auto vars:     Size  Location     Type
  4127 ;;  counter         1    8[COMRAM] unsigned char 
  4128 ;; Return value:  Size  Location     Type
  4129 ;;                  4    0[COMRAM] unsigned long 
  4130 ;; Registers used:
  4131 ;;		wreg, status,2, status,0
  4132 ;; Tracked objects:
  4133 ;;		On entry : 0/0
  4134 ;;		On exit  : 0/0
  4135 ;;		Unchanged: 0/0
  4136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4137 ;;      Params:         8       0       0       0
  4138 ;;      Locals:         1       0       0       0
  4139 ;;      Temps:          0       0       0       0
  4140 ;;      Totals:         9       0       0       0
  4141 ;;Total ram usage:        9 bytes
  4142 ;; Hardware stack levels used:    1
  4143 ;; This function calls:
  4144 ;;		Nothing
  4145 ;; This function is called by:
  4146 ;;		_sprintf
  4147 ;; This function uses a non-reentrant model
  4148 ;;
  4149                           
  4150                           	psect	text10
  4151  0020C8                     __ptext10:
  4152                           	opt stack 0
  4153  0020C8                     ___llmod:
  4154                           	opt stack 29
  4155                           
  4156                           ;incstack = 0
  4157  0020C8  5005               	movf	___llmod@divisor,w,c
  4158  0020CA  1006               	iorwf	___llmod@divisor+1,w,c
  4159  0020CC  1007               	iorwf	___llmod@divisor+2,w,c
  4160  0020CE  1008               	iorwf	___llmod@divisor+3,w,c
  4161  0020D0  B4D8               	btfsc	status,2,c
  4162  0020D2  D029               	goto	l806
  4163  0020D4  0E01               	movlw	1
  4164  0020D6  6E09               	movwf	___llmod@counter,c
  4165  0020D8  D007               	goto	l2748
  4166  0020DA                     l2746:
  4167  0020DA  90D8               	bcf	status,0,c
  4168  0020DC  3605               	rlcf	___llmod@divisor,f,c
  4169  0020DE  3606               	rlcf	___llmod@divisor+1,f,c
  4170  0020E0  3607               	rlcf	___llmod@divisor+2,f,c
  4171  0020E2  3608               	rlcf	___llmod@divisor+3,f,c
  4172  0020E4  2A09               	incf	___llmod@counter,f,c
  4173  0020E6  D000               	goto	l2748
  4174  0020E8                     l2748:
  4175  0020E8  BE08               	btfsc	___llmod@divisor+3,7,c
  4176  0020EA  D002               	goto	l2750
  4177  0020EC  D7F6               	goto	l2746
  4178  0020EE  D000               	goto	l2750
  4179  0020F0                     l2750:
  4180  0020F0  5005               	movf	___llmod@divisor,w,c
  4181  0020F2  5C01               	subwf	___llmod@dividend,w,c
  4182  0020F4  5006               	movf	___llmod@divisor+1,w,c
  4183  0020F6  5802               	subwfb	___llmod@dividend+1,w,c
  4184  0020F8  5007               	movf	___llmod@divisor+2,w,c
  4185  0020FA  5803               	subwfb	___llmod@dividend+2,w,c
  4186  0020FC  5008               	movf	___llmod@divisor+3,w,c
  4187  0020FE  5804               	subwfb	___llmod@dividend+3,w,c
  4188  002100  A0D8               	btfss	status,0,c
  4189  002102  D009               	goto	l2754
  4190  002104  5005               	movf	___llmod@divisor,w,c
  4191  002106  5E01               	subwf	___llmod@dividend,f,c
  4192  002108  5006               	movf	___llmod@divisor+1,w,c
  4193  00210A  5A02               	subwfb	___llmod@dividend+1,f,c
  4194  00210C  5007               	movf	___llmod@divisor+2,w,c
  4195  00210E  5A03               	subwfb	___llmod@dividend+2,f,c
  4196  002110  5008               	movf	___llmod@divisor+3,w,c
  4197  002112  5A04               	subwfb	___llmod@dividend+3,f,c
  4198  002114  D000               	goto	l2754
  4199  002116                     l2754:
  4200  002116  90D8               	bcf	status,0,c
  4201  002118  3208               	rrcf	___llmod@divisor+3,f,c
  4202  00211A  3207               	rrcf	___llmod@divisor+2,f,c
  4203  00211C  3206               	rrcf	___llmod@divisor+1,f,c
  4204  00211E  3205               	rrcf	___llmod@divisor,f,c
  4205  002120  2E09               	decfsz	___llmod@counter,f,c
  4206  002122  D7E6               	goto	l2750
  4207  002124  D000               	goto	l806
  4208  002126                     l806:
  4209  002126  C001  F001         	movff	___llmod@dividend,?___llmod
  4210  00212A  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  4211  00212E  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  4212  002132  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  4213  002136  0012               	return		;funcret
  4214  002138                     __end_of___llmod:
  4215                           	opt stack 0
  4216                           tblptru	equ	0xFF8
  4217                           tblptrh	equ	0xFF7
  4218                           tblptrl	equ	0xFF6
  4219                           tablat	equ	0xFF5
  4220                           prodh	equ	0xFF4
  4221                           prodl	equ	0xFF3
  4222                           postinc0	equ	0xFEE
  4223                           wreg	equ	0xFE8
  4224                           indf2	equ	0xFDF
  4225                           postinc2	equ	0xFDE
  4226                           postdec2	equ	0xFDD
  4227                           fsr2h	equ	0xFDA
  4228                           fsr2l	equ	0xFD9
  4229                           status	equ	0xFD8
  4230                           
  4231 ;; *************** function ___lldiv *****************
  4232 ;; Defined at:
  4233 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  4234 ;; Parameters:    Size  Location     Type
  4235 ;;  dividend        4    0[COMRAM] unsigned long 
  4236 ;;  divisor         4    4[COMRAM] unsigned long 
  4237 ;; Auto vars:     Size  Location     Type
  4238 ;;  quotient        4    8[COMRAM] unsigned long 
  4239 ;;  counter         1   12[COMRAM] unsigned char 
  4240 ;; Return value:  Size  Location     Type
  4241 ;;                  4    0[COMRAM] unsigned long 
  4242 ;; Registers used:
  4243 ;;		wreg, status,2, status,0
  4244 ;; Tracked objects:
  4245 ;;		On entry : 0/0
  4246 ;;		On exit  : 0/0
  4247 ;;		Unchanged: 0/0
  4248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4249 ;;      Params:         8       0       0       0
  4250 ;;      Locals:         5       0       0       0
  4251 ;;      Temps:          0       0       0       0
  4252 ;;      Totals:        13       0       0       0
  4253 ;;Total ram usage:       13 bytes
  4254 ;; Hardware stack levels used:    1
  4255 ;; This function calls:
  4256 ;;		Nothing
  4257 ;; This function is called by:
  4258 ;;		_sprintf
  4259 ;; This function uses a non-reentrant model
  4260 ;;
  4261                           
  4262                           	psect	text11
  4263  001FBA                     __ptext11:
  4264                           	opt stack 0
  4265  001FBA                     ___lldiv:
  4266                           	opt stack 29
  4267                           
  4268                           ;incstack = 0
  4269  001FBA  0E00               	movlw	0
  4270  001FBC  6E09               	movwf	___lldiv@quotient,c
  4271  001FBE  0E00               	movlw	0
  4272  001FC0  6E0A               	movwf	___lldiv@quotient+1,c
  4273  001FC2  0E00               	movlw	0
  4274  001FC4  6E0B               	movwf	___lldiv@quotient+2,c
  4275  001FC6  0E00               	movlw	0
  4276  001FC8  6E0C               	movwf	___lldiv@quotient+3,c
  4277  001FCA  5005               	movf	___lldiv@divisor,w,c
  4278  001FCC  1006               	iorwf	___lldiv@divisor+1,w,c
  4279  001FCE  1007               	iorwf	___lldiv@divisor+2,w,c
  4280  001FD0  1008               	iorwf	___lldiv@divisor+3,w,c
  4281  001FD2  B4D8               	btfsc	status,2,c
  4282  001FD4  D02F               	goto	l796
  4283  001FD6  0E01               	movlw	1
  4284  001FD8  6E0D               	movwf	___lldiv@counter,c
  4285  001FDA  D007               	goto	l2728
  4286  001FDC                     l2726:
  4287  001FDC  90D8               	bcf	status,0,c
  4288  001FDE  3605               	rlcf	___lldiv@divisor,f,c
  4289  001FE0  3606               	rlcf	___lldiv@divisor+1,f,c
  4290  001FE2  3607               	rlcf	___lldiv@divisor+2,f,c
  4291  001FE4  3608               	rlcf	___lldiv@divisor+3,f,c
  4292  001FE6  2A0D               	incf	___lldiv@counter,f,c
  4293  001FE8  D000               	goto	l2728
  4294  001FEA                     l2728:
  4295  001FEA  BE08               	btfsc	___lldiv@divisor+3,7,c
  4296  001FEC  D002               	goto	l2730
  4297  001FEE  D7F6               	goto	l2726
  4298  001FF0  D000               	goto	l2730
  4299  001FF2                     l2730:
  4300  001FF2  90D8               	bcf	status,0,c
  4301  001FF4  3609               	rlcf	___lldiv@quotient,f,c
  4302  001FF6  360A               	rlcf	___lldiv@quotient+1,f,c
  4303  001FF8  360B               	rlcf	___lldiv@quotient+2,f,c
  4304  001FFA  360C               	rlcf	___lldiv@quotient+3,f,c
  4305  001FFC  5005               	movf	___lldiv@divisor,w,c
  4306  001FFE  5C01               	subwf	___lldiv@dividend,w,c
  4307  002000  5006               	movf	___lldiv@divisor+1,w,c
  4308  002002  5802               	subwfb	___lldiv@dividend+1,w,c
  4309  002004  5007               	movf	___lldiv@divisor+2,w,c
  4310  002006  5803               	subwfb	___lldiv@dividend+2,w,c
  4311  002008  5008               	movf	___lldiv@divisor+3,w,c
  4312  00200A  5804               	subwfb	___lldiv@dividend+3,w,c
  4313  00200C  A0D8               	btfss	status,0,c
  4314  00200E  D00A               	goto	l2738
  4315  002010  5005               	movf	___lldiv@divisor,w,c
  4316  002012  5E01               	subwf	___lldiv@dividend,f,c
  4317  002014  5006               	movf	___lldiv@divisor+1,w,c
  4318  002016  5A02               	subwfb	___lldiv@dividend+1,f,c
  4319  002018  5007               	movf	___lldiv@divisor+2,w,c
  4320  00201A  5A03               	subwfb	___lldiv@dividend+2,f,c
  4321  00201C  5008               	movf	___lldiv@divisor+3,w,c
  4322  00201E  5A04               	subwfb	___lldiv@dividend+3,f,c
  4323  002020  8009               	bsf	___lldiv@quotient,0,c
  4324  002022  D000               	goto	l2738
  4325  002024                     l2738:
  4326  002024  90D8               	bcf	status,0,c
  4327  002026  3208               	rrcf	___lldiv@divisor+3,f,c
  4328  002028  3207               	rrcf	___lldiv@divisor+2,f,c
  4329  00202A  3206               	rrcf	___lldiv@divisor+1,f,c
  4330  00202C  3205               	rrcf	___lldiv@divisor,f,c
  4331  00202E  2E0D               	decfsz	___lldiv@counter,f,c
  4332  002030  D7E0               	goto	l2730
  4333  002032  D000               	goto	l796
  4334  002034                     l796:
  4335  002034  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4336  002038  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4337  00203C  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4338  002040  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4339  002044  0012               	return		;funcret
  4340  002046                     __end_of___lldiv:
  4341                           	opt stack 0
  4342                           tblptru	equ	0xFF8
  4343                           tblptrh	equ	0xFF7
  4344                           tblptrl	equ	0xFF6
  4345                           tablat	equ	0xFF5
  4346                           prodh	equ	0xFF4
  4347                           prodl	equ	0xFF3
  4348                           postinc0	equ	0xFEE
  4349                           wreg	equ	0xFE8
  4350                           indf2	equ	0xFDF
  4351                           postinc2	equ	0xFDE
  4352                           postdec2	equ	0xFDD
  4353                           fsr2h	equ	0xFDA
  4354                           fsr2l	equ	0xFD9
  4355                           status	equ	0xFD8
  4356                           
  4357 ;; *************** function ___fttol *****************
  4358 ;; Defined at:
  4359 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  4360 ;; Parameters:    Size  Location     Type
  4361 ;;  f1              3   42[COMRAM] float 
  4362 ;; Auto vars:     Size  Location     Type
  4363 ;;  lval            4   52[COMRAM] unsigned long 
  4364 ;;  exp1            1   56[COMRAM] unsigned char 
  4365 ;;  sign1           1   51[COMRAM] unsigned char 
  4366 ;; Return value:  Size  Location     Type
  4367 ;;                  4   42[COMRAM] long 
  4368 ;; Registers used:
  4369 ;;		wreg, status,2, status,0
  4370 ;; Tracked objects:
  4371 ;;		On entry : 0/0
  4372 ;;		On exit  : 0/0
  4373 ;;		Unchanged: 0/0
  4374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4375 ;;      Params:         4       0       0       0
  4376 ;;      Locals:         6       0       0       0
  4377 ;;      Temps:          5       0       0       0
  4378 ;;      Totals:        15       0       0       0
  4379 ;;Total ram usage:       15 bytes
  4380 ;; Hardware stack levels used:    1
  4381 ;; This function calls:
  4382 ;;		Nothing
  4383 ;; This function is called by:
  4384 ;;		_sprintf
  4385 ;; This function uses a non-reentrant model
  4386 ;;
  4387                           
  4388                           	psect	text12
  4389  001B46                     __ptext12:
  4390                           	opt stack 0
  4391  001B46                     ___fttol:
  4392                           	opt stack 29
  4393                           
  4394                           ;incstack = 0
  4395  001B46  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4396  001B4A  6A30               	clrf	(??___fttol+1)& (0+255),c
  4397  001B4C  6A31               	clrf	(??___fttol+2)& (0+255),c
  4398  001B4E  342C               	rlcf	___fttol@f1+1,w,c
  4399  001B50  362F               	rlcf	??___fttol& (0+255),f,c
  4400  001B52  E301               	bnc	u2471
  4401  001B54  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4402  001B56                     u2471:
  4403  001B56  502F               	movf	??___fttol,w,c
  4404  001B58  6E39               	movwf	___fttol@exp1,c
  4405  001B5A  5039               	movf	___fttol@exp1,w,c
  4406  001B5C  A4D8               	btfss	status,2,c
  4407  001B5E  D002               	goto	l2680
  4408  001B60  D039               	goto	l2704
  4409  001B62  D063               	goto	l738
  4410  001B64                     l2680:
  4411  001B64  0E17               	movlw	23
  4412  001B66  6E2F               	movwf	??___fttol& (0+255),c
  4413  001B68  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4414  001B6C  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4415  001B70  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4416  001B74  282F               	incf	??___fttol,w,c
  4417  001B76  6E33               	movwf	(??___fttol+4)& (0+255),c
  4418  001B78  D004               	goto	u2490
  4419  001B7A                     u2495:
  4420  001B7A  90D8               	bcf	status,0,c
  4421  001B7C  3232               	rrcf	??___fttol+3,f,c
  4422  001B7E  3231               	rrcf	??___fttol+2,f,c
  4423  001B80  3230               	rrcf	??___fttol+1,f,c
  4424  001B82                     u2490:
  4425  001B82  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4426  001B84  D7FA               	goto	u2495
  4427  001B86  5030               	movf	??___fttol+1,w,c
  4428  001B88  6E34               	movwf	___fttol@sign1,c
  4429  001B8A  8E2C               	bsf	___fttol@f1+1,7,c
  4430  001B8C  0EFF               	movlw	255
  4431  001B8E  162B               	andwf	___fttol@f1,f,c
  4432  001B90  0EFF               	movlw	255
  4433  001B92  162C               	andwf	___fttol@f1+1,f,c
  4434  001B94  0E00               	movlw	0
  4435  001B96  162D               	andwf	___fttol@f1+2,f,c
  4436  001B98  502B               	movf	___fttol@f1,w,c
  4437  001B9A  6E35               	movwf	___fttol@lval,c
  4438  001B9C  502C               	movf	___fttol@f1+1,w,c
  4439  001B9E  6E36               	movwf	___fttol@lval+1,c
  4440  001BA0  502D               	movf	___fttol@f1+2,w,c
  4441  001BA2  6E37               	movwf	___fttol@lval+2,c
  4442  001BA4  6A38               	clrf	___fttol@lval+3,c
  4443  001BA6  0E8E               	movlw	142
  4444  001BA8  5E39               	subwf	___fttol@exp1,f,c
  4445  001BAA  AE39               	btfss	___fttol@exp1,7,c
  4446  001BAC  D010               	goto	l2702
  4447  001BAE  5039               	movf	___fttol@exp1,w,c
  4448  001BB0  0A80               	xorlw	128
  4449  001BB2  0F8F               	addlw	143
  4450  001BB4  B0D8               	btfsc	status,0,c
  4451  001BB6  D003               	goto	l2698
  4452  001BB8  D00D               	goto	l2704
  4453  001BBA  D037               	goto	l738
  4454  001BBC  D000               	goto	l2698
  4455  001BBE                     l2698:
  4456  001BBE  90D8               	bcf	status,0,c
  4457  001BC0  3238               	rrcf	___fttol@lval+3,f,c
  4458  001BC2  3237               	rrcf	___fttol@lval+2,f,c
  4459  001BC4  3236               	rrcf	___fttol@lval+1,f,c
  4460  001BC6  3235               	rrcf	___fttol@lval,f,c
  4461  001BC8  3E39               	incfsz	___fttol@exp1,f,c
  4462  001BCA  D7F9               	goto	l2698
  4463  001BCC  D019               	goto	l2712
  4464  001BCE                     l2702:
  4465  001BCE  0E17               	movlw	23
  4466  001BD0  6439               	cpfsgt	___fttol@exp1,c
  4467  001BD2  D011               	goto	l2710
  4468  001BD4                     l2704:
  4469  001BD4  0E00               	movlw	0
  4470  001BD6  6E2B               	movwf	?___fttol,c
  4471  001BD8  0E00               	movlw	0
  4472  001BDA  6E2C               	movwf	?___fttol+1,c
  4473  001BDC  0E00               	movlw	0
  4474  001BDE  6E2D               	movwf	?___fttol+2,c
  4475  001BE0  0E00               	movlw	0
  4476  001BE2  6E2E               	movwf	?___fttol+3,c
  4477  001BE4  D022               	goto	l738
  4478  001BE6  D007               	goto	l2710
  4479  001BE8                     l2708:
  4480  001BE8  90D8               	bcf	status,0,c
  4481  001BEA  3635               	rlcf	___fttol@lval,f,c
  4482  001BEC  3636               	rlcf	___fttol@lval+1,f,c
  4483  001BEE  3637               	rlcf	___fttol@lval+2,f,c
  4484  001BF0  3638               	rlcf	___fttol@lval+3,f,c
  4485  001BF2  0639               	decf	___fttol@exp1,f,c
  4486  001BF4  D000               	goto	l2710
  4487  001BF6                     l2710:
  4488  001BF6  5039               	movf	___fttol@exp1,w,c
  4489  001BF8  B4D8               	btfsc	status,2,c
  4490  001BFA  D002               	goto	l2712
  4491  001BFC  D7F5               	goto	l2708
  4492  001BFE  D000               	goto	l2712
  4493  001C00                     l2712:
  4494  001C00  5034               	movf	___fttol@sign1,w,c
  4495  001C02  B4D8               	btfsc	status,2,c
  4496  001C04  D009               	goto	l2716
  4497  001C06  1E38               	comf	___fttol@lval+3,f,c
  4498  001C08  1E37               	comf	___fttol@lval+2,f,c
  4499  001C0A  1E36               	comf	___fttol@lval+1,f,c
  4500  001C0C  6C35               	negf	___fttol@lval,c
  4501  001C0E  0E00               	movlw	0
  4502  001C10  2236               	addwfc	___fttol@lval+1,f,c
  4503  001C12  2237               	addwfc	___fttol@lval+2,f,c
  4504  001C14  2238               	addwfc	___fttol@lval+3,f,c
  4505  001C16  D000               	goto	l2716
  4506  001C18                     l2716:
  4507  001C18  C035  F02B         	movff	___fttol@lval,?___fttol
  4508  001C1C  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  4509  001C20  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  4510  001C24  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  4511  001C28  D000               	goto	l738
  4512  001C2A                     l738:
  4513  001C2A  0012               	return		;funcret
  4514  001C2C                     __end_of___fttol:
  4515                           	opt stack 0
  4516                           tblptru	equ	0xFF8
  4517                           tblptrh	equ	0xFF7
  4518                           tblptrl	equ	0xFF6
  4519                           tablat	equ	0xFF5
  4520                           prodh	equ	0xFF4
  4521                           prodl	equ	0xFF3
  4522                           postinc0	equ	0xFEE
  4523                           wreg	equ	0xFE8
  4524                           indf2	equ	0xFDF
  4525                           postinc2	equ	0xFDE
  4526                           postdec2	equ	0xFDD
  4527                           fsr2h	equ	0xFDA
  4528                           fsr2l	equ	0xFD9
  4529                           status	equ	0xFD8
  4530                           
  4531 ;; *************** function ___ftsub *****************
  4532 ;; Defined at:
  4533 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  4534 ;; Parameters:    Size  Location     Type
  4535 ;;  f1              3   57[COMRAM] float 
  4536 ;;  f2              3   60[COMRAM] float 
  4537 ;; Auto vars:     Size  Location     Type
  4538 ;;		None
  4539 ;; Return value:  Size  Location     Type
  4540 ;;                  3   57[COMRAM] float 
  4541 ;; Registers used:
  4542 ;;		wreg, status,2, status,0, cstack
  4543 ;; Tracked objects:
  4544 ;;		On entry : 0/0
  4545 ;;		On exit  : 0/0
  4546 ;;		Unchanged: 0/0
  4547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4548 ;;      Params:         6       0       0       0
  4549 ;;      Locals:         0       0       0       0
  4550 ;;      Temps:          0       0       0       0
  4551 ;;      Totals:         6       0       0       0
  4552 ;;Total ram usage:        6 bytes
  4553 ;; Hardware stack levels used:    1
  4554 ;; Hardware stack levels required when called:    2
  4555 ;; This function calls:
  4556 ;;		___ftadd
  4557 ;; This function is called by:
  4558 ;;		_sprintf
  4559 ;; This function uses a non-reentrant model
  4560 ;;
  4561                           
  4562                           	psect	text13
  4563  0022C2                     __ptext13:
  4564                           	opt stack 0
  4565  0022C2                     ___ftsub:
  4566                           	opt stack 27
  4567                           
  4568                           ;incstack = 0
  4569  0022C2  503D               	movf	___ftsub@f2,w,c
  4570  0022C4  103E               	iorwf	___ftsub@f2+1,w,c
  4571  0022C6  103F               	iorwf	___ftsub@f2+2,w,c
  4572  0022C8  B4D8               	btfsc	status,2,c
  4573  0022CA  D007               	goto	l2648
  4574  0022CC  0E00               	movlw	0
  4575  0022CE  1A3D               	xorwf	___ftsub@f2,f,c
  4576  0022D0  0E00               	movlw	0
  4577  0022D2  1A3E               	xorwf	___ftsub@f2+1,f,c
  4578  0022D4  0E80               	movlw	128
  4579  0022D6  1A3F               	xorwf	___ftsub@f2+2,f,c
  4580  0022D8  D000               	goto	l2648
  4581  0022DA                     l2648:
  4582  0022DA  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  4583  0022DE  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  4584  0022E2  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  4585  0022E6  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  4586  0022EA  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  4587  0022EE  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  4588  0022F2  EC07  F009         	call	___ftadd	;wreg free
  4589  0022F6  C02E  F03A         	movff	?___ftadd,?___ftsub
  4590  0022FA  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  4591  0022FE  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  4592  002302  D000               	goto	l734
  4593  002304                     l734:
  4594  002304  0012               	return		;funcret
  4595  002306                     __end_of___ftsub:
  4596                           	opt stack 0
  4597                           tblptru	equ	0xFF8
  4598                           tblptrh	equ	0xFF7
  4599                           tblptrl	equ	0xFF6
  4600                           tablat	equ	0xFF5
  4601                           prodh	equ	0xFF4
  4602                           prodl	equ	0xFF3
  4603                           postinc0	equ	0xFEE
  4604                           wreg	equ	0xFE8
  4605                           indf2	equ	0xFDF
  4606                           postinc2	equ	0xFDE
  4607                           postdec2	equ	0xFDD
  4608                           fsr2h	equ	0xFDA
  4609                           fsr2l	equ	0xFD9
  4610                           status	equ	0xFD8
  4611                           
  4612 ;; *************** function ___ftadd *****************
  4613 ;; Defined at:
  4614 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  4615 ;; Parameters:    Size  Location     Type
  4616 ;;  f1              3   45[COMRAM] float 
  4617 ;;  f2              3   48[COMRAM] float 
  4618 ;; Auto vars:     Size  Location     Type
  4619 ;;  exp1            1   56[COMRAM] unsigned char 
  4620 ;;  exp2            1   55[COMRAM] unsigned char 
  4621 ;;  sign            1   54[COMRAM] unsigned char 
  4622 ;; Return value:  Size  Location     Type
  4623 ;;                  3   45[COMRAM] float 
  4624 ;; Registers used:
  4625 ;;		wreg, status,2, status,0, cstack
  4626 ;; Tracked objects:
  4627 ;;		On entry : 0/0
  4628 ;;		On exit  : 0/0
  4629 ;;		Unchanged: 0/0
  4630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4631 ;;      Params:         6       0       0       0
  4632 ;;      Locals:         3       0       0       0
  4633 ;;      Temps:          3       0       0       0
  4634 ;;      Totals:        12       0       0       0
  4635 ;;Total ram usage:       12 bytes
  4636 ;; Hardware stack levels used:    1
  4637 ;; Hardware stack levels required when called:    1
  4638 ;; This function calls:
  4639 ;;		___ftpack
  4640 ;; This function is called by:
  4641 ;;		_sprintf
  4642 ;;		___ftsub
  4643 ;; This function uses a non-reentrant model
  4644 ;;
  4645                           
  4646                           	psect	text14
  4647  00120E                     __ptext14:
  4648                           	opt stack 0
  4649  00120E                     ___ftadd:
  4650                           	opt stack 27
  4651                           
  4652                           ;incstack = 0
  4653  00120E  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  4654  001212  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4655  001214  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4656  001216  342F               	rlcf	___ftadd@f1+1,w,c
  4657  001218  3634               	rlcf	??___ftadd& (0+255),f,c
  4658  00121A  E301               	bnc	u1711
  4659  00121C  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4660  00121E                     u1711:
  4661  00121E  5034               	movf	??___ftadd,w,c
  4662  001220  6E39               	movwf	___ftadd@exp1,c
  4663  001222  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  4664  001226  6A35               	clrf	(??___ftadd+1)& (0+255),c
  4665  001228  6A36               	clrf	(??___ftadd+2)& (0+255),c
  4666  00122A  3432               	rlcf	___ftadd@f2+1,w,c
  4667  00122C  3634               	rlcf	??___ftadd& (0+255),f,c
  4668  00122E  E301               	bnc	u1721
  4669  001230  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  4670  001232                     u1721:
  4671  001232  5034               	movf	??___ftadd,w,c
  4672  001234  6E38               	movwf	___ftadd@exp2,c
  4673  001236  5039               	movf	___ftadd@exp1,w,c
  4674  001238  B4D8               	btfsc	status,2,c
  4675  00123A  D00B               	goto	l653
  4676  00123C  5038               	movf	___ftadd@exp2,w,c
  4677  00123E  5C39               	subwf	___ftadd@exp1,w,c
  4678  001240  B0D8               	btfsc	status,0,c
  4679  001242  D00E               	goto	l2168
  4680  001244  5039               	movf	___ftadd@exp1,w,c
  4681  001246  0800               	sublw	0
  4682  001248  2438               	addwf	___ftadd@exp2,w,c
  4683  00124A  6E34               	movwf	??___ftadd& (0+255),c
  4684  00124C  0E18               	movlw	24
  4685  00124E  6434               	cpfsgt	??___ftadd,c
  4686  001250  D007               	goto	l2168
  4687  001252                     l653:
  4688  001252  C031  F02E         	movff	___ftadd@f2,?___ftadd
  4689  001256  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  4690  00125A  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  4691  00125E  D0B8               	goto	l654
  4692  001260                     l2168:
  4693  001260  5038               	movf	___ftadd@exp2,w,c
  4694  001262  B4D8               	btfsc	status,2,c
  4695  001264  D00B               	goto	l657
  4696  001266  5039               	movf	___ftadd@exp1,w,c
  4697  001268  5C38               	subwf	___ftadd@exp2,w,c
  4698  00126A  B0D8               	btfsc	status,0,c
  4699  00126C  D00E               	goto	l2174
  4700  00126E  5038               	movf	___ftadd@exp2,w,c
  4701  001270  0800               	sublw	0
  4702  001272  2439               	addwf	___ftadd@exp1,w,c
  4703  001274  6E34               	movwf	??___ftadd& (0+255),c
  4704  001276  0E18               	movlw	24
  4705  001278  6434               	cpfsgt	??___ftadd,c
  4706  00127A  D007               	goto	l2174
  4707  00127C                     l657:
  4708  00127C  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  4709  001280  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  4710  001284  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  4711  001288  D0A3               	goto	l654
  4712  00128A                     l2174:
  4713  00128A  0E06               	movlw	6
  4714  00128C  6E37               	movwf	___ftadd@sign,c
  4715  00128E  AE30               	btfss	___ftadd@f1+2,7,c
  4716  001290  D002               	goto	l2180
  4717  001292  8E37               	bsf	___ftadd@sign,7,c
  4718  001294  D000               	goto	l2180
  4719  001296                     l2180:
  4720  001296  BE33               	btfsc	___ftadd@f2+2,7,c
  4721  001298  8C37               	bsf	___ftadd@sign,6,c
  4722  00129A  8E2F               	bsf	___ftadd@f1+1,7,c
  4723  00129C  0EFF               	movlw	255
  4724  00129E  162E               	andwf	___ftadd@f1,f,c
  4725  0012A0  0EFF               	movlw	255
  4726  0012A2  162F               	andwf	___ftadd@f1+1,f,c
  4727  0012A4  0E00               	movlw	0
  4728  0012A6  1630               	andwf	___ftadd@f1+2,f,c
  4729  0012A8  8E32               	bsf	___ftadd@f2+1,7,c
  4730  0012AA  0EFF               	movlw	255
  4731  0012AC  1631               	andwf	___ftadd@f2,f,c
  4732  0012AE  0EFF               	movlw	255
  4733  0012B0  1632               	andwf	___ftadd@f2+1,f,c
  4734  0012B2  0E00               	movlw	0
  4735  0012B4  1633               	andwf	___ftadd@f2+2,f,c
  4736  0012B6  5038               	movf	___ftadd@exp2,w,c
  4737  0012B8  5C39               	subwf	___ftadd@exp1,w,c
  4738  0012BA  B0D8               	btfsc	status,0,c
  4739  0012BC  D01E               	goto	l2200
  4740  0012BE                     l2190:
  4741  0012BE  90D8               	bcf	status,0,c
  4742  0012C0  3631               	rlcf	___ftadd@f2,f,c
  4743  0012C2  3632               	rlcf	___ftadd@f2+1,f,c
  4744  0012C4  3633               	rlcf	___ftadd@f2+2,f,c
  4745  0012C6  0638               	decf	___ftadd@exp2,f,c
  4746  0012C8  5039               	movf	___ftadd@exp1,w,c
  4747  0012CA  1838               	xorwf	___ftadd@exp2,w,c
  4748  0012CC  B4D8               	btfsc	status,2,c
  4749  0012CE  D00F               	goto	l2198
  4750  0012D0  0637               	decf	___ftadd@sign,f,c
  4751  0012D2  C037  F034         	movff	___ftadd@sign,??___ftadd
  4752  0012D6  0E07               	movlw	7
  4753  0012D8  1634               	andwf	??___ftadd,f,c
  4754  0012DA  B4D8               	btfsc	status,2,c
  4755  0012DC  D008               	goto	l2198
  4756  0012DE  D7EF               	goto	l2190
  4757  0012E0  D006               	goto	l2198
  4758  0012E2                     l2196:
  4759  0012E2  90D8               	bcf	status,0,c
  4760  0012E4  3230               	rrcf	___ftadd@f1+2,f,c
  4761  0012E6  322F               	rrcf	___ftadd@f1+1,f,c
  4762  0012E8  322E               	rrcf	___ftadd@f1,f,c
  4763  0012EA  2A39               	incf	___ftadd@exp1,f,c
  4764  0012EC  D000               	goto	l2198
  4765  0012EE                     l2198:
  4766  0012EE  5038               	movf	___ftadd@exp2,w,c
  4767  0012F0  1839               	xorwf	___ftadd@exp1,w,c
  4768  0012F2  B4D8               	btfsc	status,2,c
  4769  0012F4  D024               	goto	l668
  4770  0012F6  D7F5               	goto	l2196
  4771  0012F8  D022               	goto	l668
  4772  0012FA                     l2200:
  4773  0012FA  5039               	movf	___ftadd@exp1,w,c
  4774  0012FC  5C38               	subwf	___ftadd@exp2,w,c
  4775  0012FE  B0D8               	btfsc	status,0,c
  4776  001300  D01E               	goto	l668
  4777  001302                     l2202:
  4778  001302  90D8               	bcf	status,0,c
  4779  001304  362E               	rlcf	___ftadd@f1,f,c
  4780  001306  362F               	rlcf	___ftadd@f1+1,f,c
  4781  001308  3630               	rlcf	___ftadd@f1+2,f,c
  4782  00130A  0639               	decf	___ftadd@exp1,f,c
  4783  00130C  5039               	movf	___ftadd@exp1,w,c
  4784  00130E  1838               	xorwf	___ftadd@exp2,w,c
  4785  001310  B4D8               	btfsc	status,2,c
  4786  001312  D00F               	goto	l2210
  4787  001314  0637               	decf	___ftadd@sign,f,c
  4788  001316  C037  F034         	movff	___ftadd@sign,??___ftadd
  4789  00131A  0E07               	movlw	7
  4790  00131C  1634               	andwf	??___ftadd,f,c
  4791  00131E  B4D8               	btfsc	status,2,c
  4792  001320  D008               	goto	l2210
  4793  001322  D7EF               	goto	l2202
  4794  001324  D006               	goto	l2210
  4795  001326                     l2208:
  4796  001326  90D8               	bcf	status,0,c
  4797  001328  3233               	rrcf	___ftadd@f2+2,f,c
  4798  00132A  3232               	rrcf	___ftadd@f2+1,f,c
  4799  00132C  3231               	rrcf	___ftadd@f2,f,c
  4800  00132E  2A38               	incf	___ftadd@exp2,f,c
  4801  001330  D000               	goto	l2210
  4802  001332                     l2210:
  4803  001332  5038               	movf	___ftadd@exp2,w,c
  4804  001334  1839               	xorwf	___ftadd@exp1,w,c
  4805  001336  B4D8               	btfsc	status,2,c
  4806  001338  D002               	goto	l668
  4807  00133A  D7F5               	goto	l2208
  4808  00133C  D000               	goto	l668
  4809  00133E                     l668:
  4810  00133E  AE37               	btfss	___ftadd@sign,7,c
  4811  001340  D00C               	goto	l677
  4812  001342  0EFF               	movlw	255
  4813  001344  1A2E               	xorwf	___ftadd@f1,f,c
  4814  001346  0EFF               	movlw	255
  4815  001348  1A2F               	xorwf	___ftadd@f1+1,f,c
  4816  00134A  0EFF               	movlw	255
  4817  00134C  1A30               	xorwf	___ftadd@f1+2,f,c
  4818  00134E  0E01               	movlw	1
  4819  001350  262E               	addwf	___ftadd@f1,f,c
  4820  001352  0E00               	movlw	0
  4821  001354  222F               	addwfc	___ftadd@f1+1,f,c
  4822  001356  0E00               	movlw	0
  4823  001358  2230               	addwfc	___ftadd@f1+2,f,c
  4824  00135A                     l677:
  4825  00135A  AC37               	btfss	___ftadd@sign,6,c
  4826  00135C  D00D               	goto	l2216
  4827  00135E  0EFF               	movlw	255
  4828  001360  1A31               	xorwf	___ftadd@f2,f,c
  4829  001362  0EFF               	movlw	255
  4830  001364  1A32               	xorwf	___ftadd@f2+1,f,c
  4831  001366  0EFF               	movlw	255
  4832  001368  1A33               	xorwf	___ftadd@f2+2,f,c
  4833  00136A  0E01               	movlw	1
  4834  00136C  2631               	addwf	___ftadd@f2,f,c
  4835  00136E  0E00               	movlw	0
  4836  001370  2232               	addwfc	___ftadd@f2+1,f,c
  4837  001372  0E00               	movlw	0
  4838  001374  2233               	addwfc	___ftadd@f2+2,f,c
  4839  001376  D000               	goto	l2216
  4840  001378                     l2216:
  4841  001378  0E00               	movlw	0
  4842  00137A  6E37               	movwf	___ftadd@sign,c
  4843  00137C  502E               	movf	___ftadd@f1,w,c
  4844  00137E  2631               	addwf	___ftadd@f2,f,c
  4845  001380  502F               	movf	___ftadd@f1+1,w,c
  4846  001382  2232               	addwfc	___ftadd@f2+1,f,c
  4847  001384  5030               	movf	___ftadd@f1+2,w,c
  4848  001386  2233               	addwfc	___ftadd@f2+2,f,c
  4849  001388  AE33               	btfss	___ftadd@f2+2,7,c
  4850  00138A  D00F               	goto	l2226
  4851  00138C  0EFF               	movlw	255
  4852  00138E  1A31               	xorwf	___ftadd@f2,f,c
  4853  001390  0EFF               	movlw	255
  4854  001392  1A32               	xorwf	___ftadd@f2+1,f,c
  4855  001394  0EFF               	movlw	255
  4856  001396  1A33               	xorwf	___ftadd@f2+2,f,c
  4857  001398  0E01               	movlw	1
  4858  00139A  2631               	addwf	___ftadd@f2,f,c
  4859  00139C  0E00               	movlw	0
  4860  00139E  2232               	addwfc	___ftadd@f2+1,f,c
  4861  0013A0  0E00               	movlw	0
  4862  0013A2  2233               	addwfc	___ftadd@f2+2,f,c
  4863  0013A4  0E01               	movlw	1
  4864  0013A6  6E37               	movwf	___ftadd@sign,c
  4865  0013A8  D000               	goto	l2226
  4866  0013AA                     l2226:
  4867  0013AA  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  4868  0013AE  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4869  0013B2  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4870  0013B6  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  4871  0013BA  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  4872  0013BE  EC87  F00E         	call	___ftpack	;wreg free
  4873  0013C2  C001  F02E         	movff	?___ftpack,?___ftadd
  4874  0013C6  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  4875  0013CA  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  4876  0013CE  D000               	goto	l654
  4877  0013D0                     l654:
  4878  0013D0  0012               	return		;funcret
  4879  0013D2                     __end_of___ftadd:
  4880                           	opt stack 0
  4881                           tblptru	equ	0xFF8
  4882                           tblptrh	equ	0xFF7
  4883                           tblptrl	equ	0xFF6
  4884                           tablat	equ	0xFF5
  4885                           prodh	equ	0xFF4
  4886                           prodl	equ	0xFF3
  4887                           postinc0	equ	0xFEE
  4888                           wreg	equ	0xFE8
  4889                           indf2	equ	0xFDF
  4890                           postinc2	equ	0xFDE
  4891                           postdec2	equ	0xFDD
  4892                           fsr2h	equ	0xFDA
  4893                           fsr2l	equ	0xFD9
  4894                           status	equ	0xFD8
  4895                           
  4896 ;; *************** function ___ftneg *****************
  4897 ;; Defined at:
  4898 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  4899 ;; Parameters:    Size  Location     Type
  4900 ;;  f1              3    0[COMRAM] float 
  4901 ;; Auto vars:     Size  Location     Type
  4902 ;;		None
  4903 ;; Return value:  Size  Location     Type
  4904 ;;                  3    0[COMRAM] float 
  4905 ;; Registers used:
  4906 ;;		wreg, status,2, status,0
  4907 ;; Tracked objects:
  4908 ;;		On entry : 0/0
  4909 ;;		On exit  : 0/0
  4910 ;;		Unchanged: 0/0
  4911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4912 ;;      Params:         3       0       0       0
  4913 ;;      Locals:         0       0       0       0
  4914 ;;      Temps:          0       0       0       0
  4915 ;;      Totals:         3       0       0       0
  4916 ;;Total ram usage:        3 bytes
  4917 ;; Hardware stack levels used:    1
  4918 ;; This function calls:
  4919 ;;		Nothing
  4920 ;; This function is called by:
  4921 ;;		_sprintf
  4922 ;; This function uses a non-reentrant model
  4923 ;;
  4924                           
  4925                           	psect	text15
  4926  00245C                     __ptext15:
  4927                           	opt stack 0
  4928  00245C                     ___ftneg:
  4929                           	opt stack 29
  4930                           
  4931                           ;incstack = 0
  4932  00245C  5001               	movf	___ftneg@f1,w,c
  4933  00245E  1002               	iorwf	___ftneg@f1+1,w,c
  4934  002460  1003               	iorwf	___ftneg@f1+2,w,c
  4935  002462  B4D8               	btfsc	status,2,c
  4936  002464  D006               	goto	l727
  4937  002466  0E00               	movlw	0
  4938  002468  1A01               	xorwf	___ftneg@f1,f,c
  4939  00246A  0E00               	movlw	0
  4940  00246C  1A02               	xorwf	___ftneg@f1+1,f,c
  4941  00246E  0E80               	movlw	128
  4942  002470  1A03               	xorwf	___ftneg@f1+2,f,c
  4943  002472                     l727:
  4944  002472  C001  F001         	movff	___ftneg@f1,?___ftneg
  4945  002476  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  4946  00247A  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  4947  00247E  0012               	return		;funcret
  4948  002480                     __end_of___ftneg:
  4949                           	opt stack 0
  4950                           tblptru	equ	0xFF8
  4951                           tblptrh	equ	0xFF7
  4952                           tblptrl	equ	0xFF6
  4953                           tablat	equ	0xFF5
  4954                           prodh	equ	0xFF4
  4955                           prodl	equ	0xFF3
  4956                           postinc0	equ	0xFEE
  4957                           wreg	equ	0xFE8
  4958                           indf2	equ	0xFDF
  4959                           postinc2	equ	0xFDE
  4960                           postdec2	equ	0xFDD
  4961                           fsr2h	equ	0xFDA
  4962                           fsr2l	equ	0xFD9
  4963                           status	equ	0xFD8
  4964                           
  4965 ;; *************** function ___ftge *****************
  4966 ;; Defined at:
  4967 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;  ff1             3    0[COMRAM] float 
  4970 ;;  ff2             3    3[COMRAM] float 
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;		None
  4973 ;; Return value:  Size  Location     Type
  4974 ;;		None               void
  4975 ;; Registers used:
  4976 ;;		wreg, status,2, status,0
  4977 ;; Tracked objects:
  4978 ;;		On entry : 0/0
  4979 ;;		On exit  : 0/0
  4980 ;;		Unchanged: 0/0
  4981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4982 ;;      Params:         6       0       0       0
  4983 ;;      Locals:         0       0       0       0
  4984 ;;      Temps:          3       0       0       0
  4985 ;;      Totals:         9       0       0       0
  4986 ;;Total ram usage:        9 bytes
  4987 ;; Hardware stack levels used:    1
  4988 ;; This function calls:
  4989 ;;		Nothing
  4990 ;; This function is called by:
  4991 ;;		_main
  4992 ;;		_sprintf
  4993 ;; This function uses a non-reentrant model
  4994 ;;
  4995                           
  4996                           	psect	text16
  4997  001F24                     __ptext16:
  4998                           	opt stack 0
  4999  001F24                     ___ftge:
  5000                           	opt stack 29
  5001                           
  5002                           ;incstack = 0
  5003  001F24  AE03               	btfss	___ftge@ff1+2,7,c
  5004  001F26  D017               	goto	l2656
  5005  001F28  C001  F007         	movff	___ftge@ff1,??___ftge
  5006  001F2C  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5007  001F30  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5008  001F34  1E07               	comf	??___ftge,f,c
  5009  001F36  1E08               	comf	??___ftge+1,f,c
  5010  001F38  1E09               	comf	??___ftge+2,f,c
  5011  001F3A  2A07               	incf	??___ftge,f,c
  5012  001F3C  0E00               	movlw	0
  5013  001F3E  2208               	addwfc	??___ftge+1,f,c
  5014  001F40  2209               	addwfc	??___ftge+2,f,c
  5015  001F42  0E00               	movlw	0
  5016  001F44  2407               	addwf	??___ftge,w,c
  5017  001F46  6E01               	movwf	___ftge@ff1,c
  5018  001F48  0E00               	movlw	0
  5019  001F4A  2008               	addwfc	??___ftge+1,w,c
  5020  001F4C  6E02               	movwf	___ftge@ff1+1,c
  5021  001F4E  0E80               	movlw	128
  5022  001F50  2009               	addwfc	??___ftge+2,w,c
  5023  001F52  6E03               	movwf	___ftge@ff1+2,c
  5024  001F54  D000               	goto	l2656
  5025  001F56                     l2656:
  5026  001F56  AE06               	btfss	___ftge@ff2+2,7,c
  5027  001F58  D017               	goto	l2660
  5028  001F5A  C004  F007         	movff	___ftge@ff2,??___ftge
  5029  001F5E  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5030  001F62  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5031  001F66  1E07               	comf	??___ftge,f,c
  5032  001F68  1E08               	comf	??___ftge+1,f,c
  5033  001F6A  1E09               	comf	??___ftge+2,f,c
  5034  001F6C  2A07               	incf	??___ftge,f,c
  5035  001F6E  0E00               	movlw	0
  5036  001F70  2208               	addwfc	??___ftge+1,f,c
  5037  001F72  2209               	addwfc	??___ftge+2,f,c
  5038  001F74  0E00               	movlw	0
  5039  001F76  2407               	addwf	??___ftge,w,c
  5040  001F78  6E04               	movwf	___ftge@ff2,c
  5041  001F7A  0E00               	movlw	0
  5042  001F7C  2008               	addwfc	??___ftge+1,w,c
  5043  001F7E  6E05               	movwf	___ftge@ff2+1,c
  5044  001F80  0E80               	movlw	128
  5045  001F82  2009               	addwfc	??___ftge+2,w,c
  5046  001F84  6E06               	movwf	___ftge@ff2+2,c
  5047  001F86  D000               	goto	l2660
  5048  001F88                     l2660:
  5049  001F88  0E00               	movlw	0
  5050  001F8A  1A01               	xorwf	___ftge@ff1,f,c
  5051  001F8C  0E00               	movlw	0
  5052  001F8E  1A02               	xorwf	___ftge@ff1+1,f,c
  5053  001F90  0E80               	movlw	128
  5054  001F92  1A03               	xorwf	___ftge@ff1+2,f,c
  5055  001F94  0E00               	movlw	0
  5056  001F96  1A04               	xorwf	___ftge@ff2,f,c
  5057  001F98  0E00               	movlw	0
  5058  001F9A  1A05               	xorwf	___ftge@ff2+1,f,c
  5059  001F9C  0E80               	movlw	128
  5060  001F9E  1A06               	xorwf	___ftge@ff2+2,f,c
  5061  001FA0  5004               	movf	___ftge@ff2,w,c
  5062  001FA2  5C01               	subwf	___ftge@ff1,w,c
  5063  001FA4  5005               	movf	___ftge@ff2+1,w,c
  5064  001FA6  5802               	subwfb	___ftge@ff1+1,w,c
  5065  001FA8  5006               	movf	___ftge@ff2+2,w,c
  5066  001FAA  5803               	subwfb	___ftge@ff1+2,w,c
  5067  001FAC  B0D8               	btfsc	status,0,c
  5068  001FAE  D002               	goto	l2666
  5069  001FB0  90D8               	bcf	status,0,c
  5070  001FB2  D002               	goto	l711
  5071  001FB4                     l2666:
  5072  001FB4  80D8               	bsf	status,0,c
  5073  001FB6  D000               	goto	l711
  5074  001FB8                     l711:
  5075  001FB8  0012               	return		;funcret
  5076  001FBA                     __end_of___ftge:
  5077                           	opt stack 0
  5078                           tblptru	equ	0xFF8
  5079                           tblptrh	equ	0xFF7
  5080                           tblptrl	equ	0xFF6
  5081                           tablat	equ	0xFF5
  5082                           prodh	equ	0xFF4
  5083                           prodl	equ	0xFF3
  5084                           postinc0	equ	0xFEE
  5085                           wreg	equ	0xFE8
  5086                           indf2	equ	0xFDF
  5087                           postinc2	equ	0xFDE
  5088                           postdec2	equ	0xFDD
  5089                           fsr2h	equ	0xFDA
  5090                           fsr2l	equ	0xFD9
  5091                           status	equ	0xFD8
  5092                           
  5093 ;; *************** function _read_adc *****************
  5094 ;; Defined at:
  5095 ;;		line 74 in file "batterua.c"
  5096 ;; Parameters:    Size  Location     Type
  5097 ;;		None
  5098 ;; Auto vars:     Size  Location     Type
  5099 ;;  i               1   52[COMRAM] unsigned char 
  5100 ;; Return value:  Size  Location     Type
  5101 ;;		None               void
  5102 ;; Registers used:
  5103 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5104 ;; Tracked objects:
  5105 ;;		On entry : 0/0
  5106 ;;		On exit  : 0/0
  5107 ;;		Unchanged: 0/0
  5108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5109 ;;      Params:         0       0       0       0
  5110 ;;      Locals:         1       0       0       0
  5111 ;;      Temps:          2       0       0       0
  5112 ;;      Totals:         3       0       0       0
  5113 ;;Total ram usage:        3 bytes
  5114 ;; Hardware stack levels used:    1
  5115 ;; Hardware stack levels required when called:    2
  5116 ;; This function calls:
  5117 ;;		___ftdiv
  5118 ;;		___ftmul
  5119 ;;		___lwtoft
  5120 ;;		_delay_ms
  5121 ;; This function is called by:
  5122 ;;		_main
  5123 ;; This function uses a non-reentrant model
  5124 ;;
  5125                           
  5126                           	psect	text17
  5127  0013D2                     __ptext17:
  5128                           	opt stack 0
  5129  0013D2                     _read_adc:
  5130                           	opt stack 28
  5131                           
  5132                           ;batterua.c: 75: for (char i = 0; i < 3; i++) {
  5133                           
  5134                           ;incstack = 0
  5135  0013D2  0E00               	movlw	0
  5136  0013D4  6E35               	movwf	read_adc@i,c
  5137  0013D6                     l2842:
  5138  0013D6  0E02               	movlw	2
  5139  0013D8  6435               	cpfsgt	read_adc@i,c
  5140  0013DA  D001               	goto	l2846
  5141  0013DC  D044               	goto	l2858
  5142  0013DE                     l2846:
  5143                           
  5144                           ;batterua.c: 76: ADCON0 = combinazioni[i];
  5145  0013DE  5035               	movf	read_adc@i,w,c
  5146  0013E0  0D01               	mullw	1
  5147  0013E2  0E8E               	movlw	low _combinazioni
  5148  0013E4  24F3               	addwf	prodl,w,c
  5149  0013E6  6ED9               	movwf	fsr2l,c
  5150  0013E8  0E00               	movlw	high _combinazioni
  5151  0013EA  20F4               	addwfc	prodh,w,c
  5152  0013EC  6EDA               	movwf	fsr2h,c
  5153  0013EE  50DF               	movf	indf2,w,c
  5154  0013F0  6EC2               	movwf	4034,c	;volatile
  5155                           
  5156                           ;batterua.c: 77: ADCON0bits.GO = 1;
  5157  0013F2  82C2               	bsf	4034,1,c	;volatile
  5158                           
  5159                           ;batterua.c: 78: while (ADCON0bits.GODONE == 1);
  5160  0013F4  D000               	goto	l186
  5161  0013F6                     l186:
  5162  0013F6  B2C2               	btfsc	4034,1,c	;volatile
  5163  0013F8  D7FE               	goto	l186
  5164                           
  5165                           ;batterua.c: 79: lettura [i] = ADRESH;
  5166  0013FA  50C4               	movf	4036,w,c	;volatile
  5167  0013FC  6E33               	movwf	??_read_adc& (0+255),c
  5168  0013FE  6A34               	clrf	(??_read_adc+1)& (0+255),c
  5169  001400  5035               	movf	read_adc@i,w,c
  5170  001402  0D02               	mullw	2
  5171  001404  0E4D               	movlw	low _lettura
  5172  001406  24F3               	addwf	prodl,w,c
  5173  001408  6ED9               	movwf	fsr2l,c
  5174  00140A  0E00               	movlw	high _lettura
  5175  00140C  20F4               	addwfc	prodh,w,c
  5176  00140E  6EDA               	movwf	fsr2h,c
  5177  001410  C033  FFDE         	movff	??_read_adc,postinc2
  5178  001414  C034  FFDD         	movff	??_read_adc+1,postdec2
  5179                           
  5180                           ;batterua.c: 80: lettura [i] = ((lettura[i] << 8) | ADRESL);
  5181  001418  5035               	movf	read_adc@i,w,c
  5182  00141A  0D02               	mullw	2
  5183  00141C  0E4D               	movlw	low _lettura
  5184  00141E  24F3               	addwf	prodl,w,c
  5185  001420  6ED9               	movwf	fsr2l,c
  5186  001422  0E00               	movlw	high _lettura
  5187  001424  20F4               	addwfc	prodh,w,c
  5188  001426  6EDA               	movwf	fsr2h,c
  5189  001428  CFDE F033          	movff	postinc2,??_read_adc
  5190  00142C  CFDD F034          	movff	postdec2,??_read_adc+1
  5191  001430  C033  F034         	movff	??_read_adc,??_read_adc+1
  5192  001434  6A33               	clrf	??_read_adc,c
  5193  001436  50C3               	movf	4035,w,c	;volatile
  5194  001438  1233               	iorwf	??_read_adc,f,c
  5195  00143A  0E00               	movlw	0
  5196  00143C  1234               	iorwf	??_read_adc+1,f,c
  5197  00143E  5035               	movf	read_adc@i,w,c
  5198  001440  0D02               	mullw	2
  5199  001442  0E4D               	movlw	low _lettura
  5200  001444  24F3               	addwf	prodl,w,c
  5201  001446  6ED9               	movwf	fsr2l,c
  5202  001448  0E00               	movlw	high _lettura
  5203  00144A  20F4               	addwfc	prodh,w,c
  5204  00144C  6EDA               	movwf	fsr2h,c
  5205  00144E  C033  FFDE         	movff	??_read_adc,postinc2
  5206  001452  C034  FFDD         	movff	??_read_adc+1,postdec2
  5207                           
  5208                           ;batterua.c: 81: delay_ms(5);
  5209  001456  0E00               	movlw	0
  5210  001458  6E16               	movwf	delay_ms@value_ms+1,c
  5211  00145A  0E05               	movlw	5
  5212  00145C  6E15               	movwf	delay_ms@value_ms,c
  5213  00145E  EC83  F011         	call	_delay_ms	;wreg free
  5214  001462  2A35               	incf	read_adc@i,f,c
  5215  001464  D7B8               	goto	l2842
  5216  001466                     l2858:
  5217                           
  5218                           ;batterua.c: 82: }
  5219                           ;batterua.c: 83: current = (lettura[0] - lettura[1]);
  5220  001466  EE20  F04F         	lfsr	2,_lettura+2
  5221  00146A  CFDE F033          	movff	postinc2,??_read_adc
  5222  00146E  CFDD F034          	movff	postdec2,??_read_adc+1
  5223  001472  1E33               	comf	??_read_adc,f,c
  5224  001474  1E34               	comf	??_read_adc+1,f,c
  5225  001476  4A33               	infsnz	??_read_adc,f,c
  5226  001478  2A34               	incf	??_read_adc+1,f,c
  5227  00147A  504D               	movf	_lettura,w,c
  5228  00147C  2433               	addwf	??_read_adc,w,c
  5229  00147E  6E09               	movwf	___lwtoft@c,c
  5230  001480  504E               	movf	_lettura+1,w,c
  5231  001482  2034               	addwfc	??_read_adc+1,w,c
  5232  001484  6E0A               	movwf	___lwtoft@c+1,c
  5233  001486  ECF5  F011         	call	___lwtoft	;wreg free
  5234  00148A  C009  F053         	movff	?___lwtoft,_current
  5235  00148E  C00A  F054         	movff	?___lwtoft+1,_current+1
  5236  001492  C00B  F055         	movff	?___lwtoft+2,_current+2
  5237                           
  5238                           ;batterua.c: 84: current = (current * 5);
  5239  001496  C053  F015         	movff	_current,___ftmul@f1
  5240  00149A  C054  F016         	movff	_current+1,___ftmul@f1+1
  5241  00149E  C055  F017         	movff	_current+2,___ftmul@f1+2
  5242  0014A2  0E00               	movlw	0
  5243  0014A4  6E18               	movwf	___ftmul@f2,c
  5244  0014A6  0EA0               	movlw	160
  5245  0014A8  6E19               	movwf	___ftmul@f2+1,c
  5246  0014AA  0E40               	movlw	64
  5247  0014AC  6E1A               	movwf	___ftmul@f2+2,c
  5248  0014AE  EC27  F00D         	call	___ftmul	;wreg free
  5249  0014B2  C015  F053         	movff	?___ftmul,_current
  5250  0014B6  C016  F054         	movff	?___ftmul+1,_current+1
  5251  0014BA  C017  F055         	movff	?___ftmul+2,_current+2
  5252                           
  5253                           ;batterua.c: 85: current = current / 1024;
  5254  0014BE  C053  F024         	movff	_current,___ftdiv@f1
  5255  0014C2  C054  F025         	movff	_current+1,___ftdiv@f1+1
  5256  0014C6  C055  F026         	movff	_current+2,___ftdiv@f1+2
  5257  0014CA  0E00               	movlw	0
  5258  0014CC  6E27               	movwf	___ftdiv@f2,c
  5259  0014CE  0E80               	movlw	128
  5260  0014D0  6E28               	movwf	___ftdiv@f2+1,c
  5261  0014D2  0E44               	movlw	68
  5262  0014D4  6E29               	movwf	___ftdiv@f2+2,c
  5263  0014D6  EC16  F00E         	call	___ftdiv	;wreg free
  5264  0014DA  C024  F053         	movff	?___ftdiv,_current
  5265  0014DE  C025  F054         	movff	?___ftdiv+1,_current+1
  5266  0014E2  C026  F055         	movff	?___ftdiv+2,_current+2
  5267                           
  5268                           ;batterua.c: 86: current = current / 0.200;
  5269  0014E6  C053  F024         	movff	_current,___ftdiv@f1
  5270  0014EA  C054  F025         	movff	_current+1,___ftdiv@f1+1
  5271  0014EE  C055  F026         	movff	_current+2,___ftdiv@f1+2
  5272  0014F2  0ECD               	movlw	205
  5273  0014F4  6E27               	movwf	___ftdiv@f2,c
  5274  0014F6  0E4C               	movlw	76
  5275  0014F8  6E28               	movwf	___ftdiv@f2+1,c
  5276  0014FA  0E3E               	movlw	62
  5277  0014FC  6E29               	movwf	___ftdiv@f2+2,c
  5278  0014FE  EC16  F00E         	call	___ftdiv	;wreg free
  5279  001502  C024  F053         	movff	?___ftdiv,_current
  5280  001506  C025  F054         	movff	?___ftdiv+1,_current+1
  5281  00150A  C026  F055         	movff	?___ftdiv+2,_current+2
  5282                           
  5283                           ;batterua.c: 87: voltage = (lettura[2]);
  5284  00150E  C051  F009         	movff	_lettura+4,___lwtoft@c
  5285  001512  C052  F00A         	movff	_lettura+5,___lwtoft@c+1
  5286  001516  ECF5  F011         	call	___lwtoft	;wreg free
  5287  00151A  C009  F056         	movff	?___lwtoft,_voltage
  5288  00151E  C00A  F057         	movff	?___lwtoft+1,_voltage+1
  5289  001522  C00B  F058         	movff	?___lwtoft+2,_voltage+2
  5290                           
  5291                           ;batterua.c: 88: voltage = (voltage * 5) / 1024;
  5292  001526  0E00               	movlw	0
  5293  001528  6E18               	movwf	___ftmul@f2,c
  5294  00152A  0EA0               	movlw	160
  5295  00152C  6E19               	movwf	___ftmul@f2+1,c
  5296  00152E  0E40               	movlw	64
  5297  001530  6E1A               	movwf	___ftmul@f2+2,c
  5298  001532  C056  F015         	movff	_voltage,___ftmul@f1
  5299  001536  C057  F016         	movff	_voltage+1,___ftmul@f1+1
  5300  00153A  C058  F017         	movff	_voltage+2,___ftmul@f1+2
  5301  00153E  EC27  F00D         	call	___ftmul	;wreg free
  5302  001542  C015  F024         	movff	?___ftmul,___ftdiv@f1
  5303  001546  C016  F025         	movff	?___ftmul+1,___ftdiv@f1+1
  5304  00154A  C017  F026         	movff	?___ftmul+2,___ftdiv@f1+2
  5305  00154E  0E00               	movlw	0
  5306  001550  6E27               	movwf	___ftdiv@f2,c
  5307  001552  0E80               	movlw	128
  5308  001554  6E28               	movwf	___ftdiv@f2+1,c
  5309  001556  0E44               	movlw	68
  5310  001558  6E29               	movwf	___ftdiv@f2+2,c
  5311  00155A  EC16  F00E         	call	___ftdiv	;wreg free
  5312  00155E  C024  F056         	movff	?___ftdiv,_voltage
  5313  001562  C025  F057         	movff	?___ftdiv+1,_voltage+1
  5314  001566  C026  F058         	movff	?___ftdiv+2,_voltage+2
  5315                           
  5316                           ;batterua.c: 89: voltage = voltage / rapporto;
  5317  00156A  C056  F024         	movff	_voltage,___ftdiv@f1
  5318  00156E  C057  F025         	movff	_voltage+1,___ftdiv@f1+1
  5319  001572  C058  F026         	movff	_voltage+2,___ftdiv@f1+2
  5320  001576  C08B  F027         	movff	_rapporto,___ftdiv@f2
  5321  00157A  C08C  F028         	movff	_rapporto+1,___ftdiv@f2+1
  5322  00157E  C08D  F029         	movff	_rapporto+2,___ftdiv@f2+2
  5323  001582  EC16  F00E         	call	___ftdiv	;wreg free
  5324  001586  C024  F056         	movff	?___ftdiv,_voltage
  5325  00158A  C025  F057         	movff	?___ftdiv+1,_voltage+1
  5326  00158E  C026  F058         	movff	?___ftdiv+2,_voltage+2
  5327  001592  0012               	return		;funcret
  5328  001594                     __end_of_read_adc:
  5329                           	opt stack 0
  5330                           tblptru	equ	0xFF8
  5331                           tblptrh	equ	0xFF7
  5332                           tblptrl	equ	0xFF6
  5333                           tablat	equ	0xFF5
  5334                           prodh	equ	0xFF4
  5335                           prodl	equ	0xFF3
  5336                           postinc0	equ	0xFEE
  5337                           wreg	equ	0xFE8
  5338                           indf2	equ	0xFDF
  5339                           postinc2	equ	0xFDE
  5340                           postdec2	equ	0xFDD
  5341                           fsr2h	equ	0xFDA
  5342                           fsr2l	equ	0xFD9
  5343                           status	equ	0xFD8
  5344                           
  5345 ;; *************** function ___lwtoft *****************
  5346 ;; Defined at:
  5347 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  5348 ;; Parameters:    Size  Location     Type
  5349 ;;  c               2    8[COMRAM] unsigned int 
  5350 ;; Auto vars:     Size  Location     Type
  5351 ;;		None
  5352 ;; Return value:  Size  Location     Type
  5353 ;;                  3    8[COMRAM] float 
  5354 ;; Registers used:
  5355 ;;		wreg, status,2, status,0, cstack
  5356 ;; Tracked objects:
  5357 ;;		On entry : 0/0
  5358 ;;		On exit  : 0/0
  5359 ;;		Unchanged: 0/0
  5360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5361 ;;      Params:         3       0       0       0
  5362 ;;      Locals:         0       0       0       0
  5363 ;;      Temps:          0       0       0       0
  5364 ;;      Totals:         3       0       0       0
  5365 ;;Total ram usage:        3 bytes
  5366 ;; Hardware stack levels used:    1
  5367 ;; Hardware stack levels required when called:    1
  5368 ;; This function calls:
  5369 ;;		___ftpack
  5370 ;; This function is called by:
  5371 ;;		_read_adc
  5372 ;; This function uses a non-reentrant model
  5373 ;;
  5374                           
  5375                           	psect	text18
  5376  0023EA                     __ptext18:
  5377                           	opt stack 0
  5378  0023EA                     ___lwtoft:
  5379                           	opt stack 28
  5380                           
  5381                           ;incstack = 0
  5382  0023EA  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  5383  0023EE  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  5384  0023F2  6A03               	clrf	___ftpack@arg+2,c
  5385  0023F4  0E8E               	movlw	142
  5386  0023F6  6E04               	movwf	___ftpack@exp,c
  5387  0023F8  0E00               	movlw	0
  5388  0023FA  6E05               	movwf	___ftpack@sign,c
  5389  0023FC  EC87  F00E         	call	___ftpack	;wreg free
  5390  002400  C001  F009         	movff	?___ftpack,?___lwtoft
  5391  002404  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  5392  002408  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  5393  00240C  D000               	goto	l886
  5394  00240E                     l886:
  5395  00240E  0012               	return		;funcret
  5396  002410                     __end_of___lwtoft:
  5397                           	opt stack 0
  5398                           tblptru	equ	0xFF8
  5399                           tblptrh	equ	0xFF7
  5400                           tblptrl	equ	0xFF6
  5401                           tablat	equ	0xFF5
  5402                           prodh	equ	0xFF4
  5403                           prodl	equ	0xFF3
  5404                           postinc0	equ	0xFEE
  5405                           wreg	equ	0xFE8
  5406                           indf2	equ	0xFDF
  5407                           postinc2	equ	0xFDE
  5408                           postdec2	equ	0xFDD
  5409                           fsr2h	equ	0xFDA
  5410                           fsr2l	equ	0xFD9
  5411                           status	equ	0xFD8
  5412                           
  5413 ;; *************** function ___ftmul *****************
  5414 ;; Defined at:
  5415 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  5416 ;; Parameters:    Size  Location     Type
  5417 ;;  f1              3   20[COMRAM] float 
  5418 ;;  f2              3   23[COMRAM] float 
  5419 ;; Auto vars:     Size  Location     Type
  5420 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  5421 ;;  sign            1   34[COMRAM] unsigned char 
  5422 ;;  cntr            1   33[COMRAM] unsigned char 
  5423 ;;  exp             1   29[COMRAM] unsigned char 
  5424 ;; Return value:  Size  Location     Type
  5425 ;;                  3   20[COMRAM] float 
  5426 ;; Registers used:
  5427 ;;		wreg, status,2, status,0, cstack
  5428 ;; Tracked objects:
  5429 ;;		On entry : 0/0
  5430 ;;		On exit  : 0/0
  5431 ;;		Unchanged: 0/0
  5432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5433 ;;      Params:         6       0       0       0
  5434 ;;      Locals:         6       0       0       0
  5435 ;;      Temps:          3       0       0       0
  5436 ;;      Totals:        15       0       0       0
  5437 ;;Total ram usage:       15 bytes
  5438 ;; Hardware stack levels used:    1
  5439 ;; Hardware stack levels required when called:    1
  5440 ;; This function calls:
  5441 ;;		___ftpack
  5442 ;; This function is called by:
  5443 ;;		_read_adc
  5444 ;;		_fround
  5445 ;;		_scale
  5446 ;;		_sprintf
  5447 ;; This function uses a non-reentrant model
  5448 ;;
  5449                           
  5450                           	psect	text19
  5451  001A4E                     __ptext19:
  5452                           	opt stack 0
  5453  001A4E                     ___ftmul:
  5454                           	opt stack 27
  5455                           
  5456                           ;incstack = 0
  5457  001A4E  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  5458  001A52  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  5459  001A54  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  5460  001A56  3416               	rlcf	___ftmul@f1+1,w,c
  5461  001A58  361B               	rlcf	??___ftmul& (0+255),f,c
  5462  001A5A  E301               	bnc	u1921
  5463  001A5C  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  5464  001A5E                     u1921:
  5465  001A5E  501B               	movf	??___ftmul,w,c
  5466  001A60  6E1E               	movwf	___ftmul@exp,c
  5467  001A62  501E               	movf	___ftmul@exp,w,c
  5468  001A64  A4D8               	btfss	status,2,c
  5469  001A66  D002               	goto	l2236
  5470  001A68  D00E               	goto	l2238
  5471  001A6A  D06C               	goto	l717
  5472  001A6C                     l2236:
  5473  001A6C  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  5474  001A70  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  5475  001A72  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  5476  001A74  3419               	rlcf	___ftmul@f2+1,w,c
  5477  001A76  361B               	rlcf	??___ftmul& (0+255),f,c
  5478  001A78  E301               	bnc	u1941
  5479  001A7A  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  5480  001A7C                     u1941:
  5481  001A7C  501B               	movf	??___ftmul,w,c
  5482  001A7E  6E23               	movwf	___ftmul@sign,c
  5483  001A80  5023               	movf	___ftmul@sign,w,c
  5484  001A82  A4D8               	btfss	status,2,c
  5485  001A84  D007               	goto	l2242
  5486  001A86                     l2238:
  5487  001A86  0E00               	movlw	0
  5488  001A88  6E15               	movwf	?___ftmul,c
  5489  001A8A  0E00               	movlw	0
  5490  001A8C  6E16               	movwf	?___ftmul+1,c
  5491  001A8E  0E00               	movlw	0
  5492  001A90  6E17               	movwf	?___ftmul+2,c
  5493  001A92  D058               	goto	l717
  5494  001A94                     l2242:
  5495  001A94  5023               	movf	___ftmul@sign,w,c
  5496  001A96  0F7B               	addlw	123
  5497  001A98  261E               	addwf	___ftmul@exp,f,c
  5498  001A9A  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  5499  001A9E  501A               	movf	___ftmul@f2+2,w,c
  5500  001AA0  1A23               	xorwf	___ftmul@sign,f,c
  5501  001AA2  0E80               	movlw	128
  5502  001AA4  1623               	andwf	___ftmul@sign,f,c
  5503  001AA6  8E16               	bsf	___ftmul@f1+1,7,c
  5504  001AA8  8E19               	bsf	___ftmul@f2+1,7,c
  5505  001AAA  0EFF               	movlw	255
  5506  001AAC  1618               	andwf	___ftmul@f2,f,c
  5507  001AAE  0EFF               	movlw	255
  5508  001AB0  1619               	andwf	___ftmul@f2+1,f,c
  5509  001AB2  0E00               	movlw	0
  5510  001AB4  161A               	andwf	___ftmul@f2+2,f,c
  5511  001AB6  0E00               	movlw	0
  5512  001AB8  6E1F               	movwf	___ftmul@f3_as_product,c
  5513  001ABA  0E00               	movlw	0
  5514  001ABC  6E20               	movwf	___ftmul@f3_as_product+1,c
  5515  001ABE  0E00               	movlw	0
  5516  001AC0  6E21               	movwf	___ftmul@f3_as_product+2,c
  5517  001AC2  0E07               	movlw	7
  5518  001AC4  6E22               	movwf	___ftmul@cntr,c
  5519  001AC6  D000               	goto	l2256
  5520  001AC8                     l2256:
  5521  001AC8  A015               	btfss	___ftmul@f1,0,c
  5522  001ACA  D007               	goto	l2260
  5523  001ACC  5018               	movf	___ftmul@f2,w,c
  5524  001ACE  261F               	addwf	___ftmul@f3_as_product,f,c
  5525  001AD0  5019               	movf	___ftmul@f2+1,w,c
  5526  001AD2  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  5527  001AD4  501A               	movf	___ftmul@f2+2,w,c
  5528  001AD6  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  5529  001AD8  D000               	goto	l2260
  5530  001ADA                     l2260:
  5531  001ADA  90D8               	bcf	status,0,c
  5532  001ADC  3217               	rrcf	___ftmul@f1+2,f,c
  5533  001ADE  3216               	rrcf	___ftmul@f1+1,f,c
  5534  001AE0  3215               	rrcf	___ftmul@f1,f,c
  5535  001AE2  90D8               	bcf	status,0,c
  5536  001AE4  3618               	rlcf	___ftmul@f2,f,c
  5537  001AE6  3619               	rlcf	___ftmul@f2+1,f,c
  5538  001AE8  361A               	rlcf	___ftmul@f2+2,f,c
  5539  001AEA  2E22               	decfsz	___ftmul@cntr,f,c
  5540  001AEC  D7ED               	goto	l2256
  5541  001AEE  D000               	goto	l2264
  5542  001AF0                     l2264:
  5543  001AF0  0E09               	movlw	9
  5544  001AF2  6E22               	movwf	___ftmul@cntr,c
  5545  001AF4  D000               	goto	l2266
  5546  001AF6                     l2266:
  5547  001AF6  A015               	btfss	___ftmul@f1,0,c
  5548  001AF8  D007               	goto	l2270
  5549  001AFA  5018               	movf	___ftmul@f2,w,c
  5550  001AFC  261F               	addwf	___ftmul@f3_as_product,f,c
  5551  001AFE  5019               	movf	___ftmul@f2+1,w,c
  5552  001B00  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  5553  001B02  501A               	movf	___ftmul@f2+2,w,c
  5554  001B04  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  5555  001B06  D000               	goto	l2270
  5556  001B08                     l2270:
  5557  001B08  90D8               	bcf	status,0,c
  5558  001B0A  3217               	rrcf	___ftmul@f1+2,f,c
  5559  001B0C  3216               	rrcf	___ftmul@f1+1,f,c
  5560  001B0E  3215               	rrcf	___ftmul@f1,f,c
  5561  001B10  90D8               	bcf	status,0,c
  5562  001B12  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  5563  001B14  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  5564  001B16  321F               	rrcf	___ftmul@f3_as_product,f,c
  5565  001B18  2E22               	decfsz	___ftmul@cntr,f,c
  5566  001B1A  D7ED               	goto	l2266
  5567  001B1C  D000               	goto	l2274
  5568  001B1E                     l2274:
  5569  001B1E  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  5570  001B22  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5571  001B26  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5572  001B2A  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  5573  001B2E  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  5574  001B32  EC87  F00E         	call	___ftpack	;wreg free
  5575  001B36  C001  F015         	movff	?___ftpack,?___ftmul
  5576  001B3A  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  5577  001B3E  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  5578  001B42  D000               	goto	l717
  5579  001B44                     l717:
  5580  001B44  0012               	return		;funcret
  5581  001B46                     __end_of___ftmul:
  5582                           	opt stack 0
  5583                           tblptru	equ	0xFF8
  5584                           tblptrh	equ	0xFF7
  5585                           tblptrl	equ	0xFF6
  5586                           tablat	equ	0xFF5
  5587                           prodh	equ	0xFF4
  5588                           prodl	equ	0xFF3
  5589                           postinc0	equ	0xFEE
  5590                           wreg	equ	0xFE8
  5591                           indf2	equ	0xFDF
  5592                           postinc2	equ	0xFDE
  5593                           postdec2	equ	0xFDD
  5594                           fsr2h	equ	0xFDA
  5595                           fsr2l	equ	0xFD9
  5596                           status	equ	0xFD8
  5597                           
  5598 ;; *************** function ___ftdiv *****************
  5599 ;; Defined at:
  5600 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5601 ;; Parameters:    Size  Location     Type
  5602 ;;  f1              3   35[COMRAM] float 
  5603 ;;  f2              3   38[COMRAM] float 
  5604 ;; Auto vars:     Size  Location     Type
  5605 ;;  f3              3   45[COMRAM] float 
  5606 ;;  sign            1   49[COMRAM] unsigned char 
  5607 ;;  exp             1   48[COMRAM] unsigned char 
  5608 ;;  cntr            1   44[COMRAM] unsigned char 
  5609 ;; Return value:  Size  Location     Type
  5610 ;;                  3   35[COMRAM] float 
  5611 ;; Registers used:
  5612 ;;		wreg, status,2, status,0, cstack
  5613 ;; Tracked objects:
  5614 ;;		On entry : 0/0
  5615 ;;		On exit  : 0/0
  5616 ;;		Unchanged: 0/0
  5617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5618 ;;      Params:         6       0       0       0
  5619 ;;      Locals:         6       0       0       0
  5620 ;;      Temps:          3       0       0       0
  5621 ;;      Totals:        15       0       0       0
  5622 ;;Total ram usage:       15 bytes
  5623 ;; Hardware stack levels used:    1
  5624 ;; Hardware stack levels required when called:    1
  5625 ;; This function calls:
  5626 ;;		___ftpack
  5627 ;; This function is called by:
  5628 ;;		_main
  5629 ;;		_read_adc
  5630 ;; This function uses a non-reentrant model
  5631 ;;
  5632                           
  5633                           	psect	text20
  5634  001C2C                     __ptext20:
  5635                           	opt stack 0
  5636  001C2C                     ___ftdiv:
  5637                           	opt stack 28
  5638                           
  5639                           ;incstack = 0
  5640  001C2C  C026  F02A         	movff	___ftdiv@f1+2,??___ftdiv
  5641  001C30  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  5642  001C32  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  5643  001C34  3425               	rlcf	___ftdiv@f1+1,w,c
  5644  001C36  362A               	rlcf	??___ftdiv& (0+255),f,c
  5645  001C38  E301               	bnc	u2371
  5646  001C3A  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  5647  001C3C                     u2371:
  5648  001C3C  502A               	movf	??___ftdiv,w,c
  5649  001C3E  6E31               	movwf	___ftdiv@exp,c
  5650  001C40  5031               	movf	___ftdiv@exp,w,c
  5651  001C42  A4D8               	btfss	status,2,c
  5652  001C44  D002               	goto	l2604
  5653  001C46  D00E               	goto	l2606
  5654  001C48  D061               	goto	l685
  5655  001C4A                     l2604:
  5656  001C4A  C029  F02A         	movff	___ftdiv@f2+2,??___ftdiv
  5657  001C4E  6A2B               	clrf	(??___ftdiv+1)& (0+255),c
  5658  001C50  6A2C               	clrf	(??___ftdiv+2)& (0+255),c
  5659  001C52  3428               	rlcf	___ftdiv@f2+1,w,c
  5660  001C54  362A               	rlcf	??___ftdiv& (0+255),f,c
  5661  001C56  E301               	bnc	u2391
  5662  001C58  802B               	bsf	(??___ftdiv+1)& (0+255),0,c
  5663  001C5A                     u2391:
  5664  001C5A  502A               	movf	??___ftdiv,w,c
  5665  001C5C  6E32               	movwf	___ftdiv@sign,c
  5666  001C5E  5032               	movf	___ftdiv@sign,w,c
  5667  001C60  A4D8               	btfss	status,2,c
  5668  001C62  D007               	goto	l2610
  5669  001C64                     l2606:
  5670  001C64  0E00               	movlw	0
  5671  001C66  6E24               	movwf	?___ftdiv,c
  5672  001C68  0E00               	movlw	0
  5673  001C6A  6E25               	movwf	?___ftdiv+1,c
  5674  001C6C  0E00               	movlw	0
  5675  001C6E  6E26               	movwf	?___ftdiv+2,c
  5676  001C70  D04D               	goto	l685
  5677  001C72                     l2610:
  5678  001C72  0E00               	movlw	0
  5679  001C74  6E2E               	movwf	___ftdiv@f3,c
  5680  001C76  0E00               	movlw	0
  5681  001C78  6E2F               	movwf	___ftdiv@f3+1,c
  5682  001C7A  0E00               	movlw	0
  5683  001C7C  6E30               	movwf	___ftdiv@f3+2,c
  5684  001C7E  5032               	movf	___ftdiv@sign,w,c
  5685  001C80  0F89               	addlw	137
  5686  001C82  5E31               	subwf	___ftdiv@exp,f,c
  5687  001C84  C026  F032         	movff	___ftdiv@f1+2,___ftdiv@sign
  5688  001C88  5029               	movf	___ftdiv@f2+2,w,c
  5689  001C8A  1A32               	xorwf	___ftdiv@sign,f,c
  5690  001C8C  0E80               	movlw	128
  5691  001C8E  1632               	andwf	___ftdiv@sign,f,c
  5692  001C90  8E25               	bsf	___ftdiv@f1+1,7,c
  5693  001C92  0EFF               	movlw	255
  5694  001C94  1624               	andwf	___ftdiv@f1,f,c
  5695  001C96  0EFF               	movlw	255
  5696  001C98  1625               	andwf	___ftdiv@f1+1,f,c
  5697  001C9A  0E00               	movlw	0
  5698  001C9C  1626               	andwf	___ftdiv@f1+2,f,c
  5699  001C9E  8E28               	bsf	___ftdiv@f2+1,7,c
  5700  001CA0  0EFF               	movlw	255
  5701  001CA2  1627               	andwf	___ftdiv@f2,f,c
  5702  001CA4  0EFF               	movlw	255
  5703  001CA6  1628               	andwf	___ftdiv@f2+1,f,c
  5704  001CA8  0E00               	movlw	0
  5705  001CAA  1629               	andwf	___ftdiv@f2+2,f,c
  5706  001CAC  0E18               	movlw	24
  5707  001CAE  6E2D               	movwf	___ftdiv@cntr,c
  5708  001CB0  D000               	goto	l2630
  5709  001CB2                     l2630:
  5710  001CB2  90D8               	bcf	status,0,c
  5711  001CB4  362E               	rlcf	___ftdiv@f3,f,c
  5712  001CB6  362F               	rlcf	___ftdiv@f3+1,f,c
  5713  001CB8  3630               	rlcf	___ftdiv@f3+2,f,c
  5714  001CBA  5027               	movf	___ftdiv@f2,w,c
  5715  001CBC  5C24               	subwf	___ftdiv@f1,w,c
  5716  001CBE  5028               	movf	___ftdiv@f2+1,w,c
  5717  001CC0  5825               	subwfb	___ftdiv@f1+1,w,c
  5718  001CC2  5029               	movf	___ftdiv@f2+2,w,c
  5719  001CC4  5826               	subwfb	___ftdiv@f1+2,w,c
  5720  001CC6  A0D8               	btfss	status,0,c
  5721  001CC8  D007               	goto	l688
  5722  001CCA  5027               	movf	___ftdiv@f2,w,c
  5723  001CCC  5E24               	subwf	___ftdiv@f1,f,c
  5724  001CCE  5028               	movf	___ftdiv@f2+1,w,c
  5725  001CD0  5A25               	subwfb	___ftdiv@f1+1,f,c
  5726  001CD2  5029               	movf	___ftdiv@f2+2,w,c
  5727  001CD4  5A26               	subwfb	___ftdiv@f1+2,f,c
  5728  001CD6  802E               	bsf	___ftdiv@f3,0,c
  5729  001CD8                     l688:
  5730  001CD8  90D8               	bcf	status,0,c
  5731  001CDA  3624               	rlcf	___ftdiv@f1,f,c
  5732  001CDC  3625               	rlcf	___ftdiv@f1+1,f,c
  5733  001CDE  3626               	rlcf	___ftdiv@f1+2,f,c
  5734  001CE0  2E2D               	decfsz	___ftdiv@cntr,f,c
  5735  001CE2  D7E7               	goto	l2630
  5736  001CE4  D000               	goto	l2640
  5737  001CE6                     l2640:
  5738  001CE6  C02E  F001         	movff	___ftdiv@f3,___ftpack@arg
  5739  001CEA  C02F  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5740  001CEE  C030  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5741  001CF2  C031  F004         	movff	___ftdiv@exp,___ftpack@exp
  5742  001CF6  C032  F005         	movff	___ftdiv@sign,___ftpack@sign
  5743  001CFA  EC87  F00E         	call	___ftpack	;wreg free
  5744  001CFE  C001  F024         	movff	?___ftpack,?___ftdiv
  5745  001D02  C002  F025         	movff	?___ftpack+1,?___ftdiv+1
  5746  001D06  C003  F026         	movff	?___ftpack+2,?___ftdiv+2
  5747  001D0A  D000               	goto	l685
  5748  001D0C                     l685:
  5749  001D0C  0012               	return		;funcret
  5750  001D0E                     __end_of___ftdiv:
  5751                           	opt stack 0
  5752                           tblptru	equ	0xFF8
  5753                           tblptrh	equ	0xFF7
  5754                           tblptrl	equ	0xFF6
  5755                           tablat	equ	0xFF5
  5756                           prodh	equ	0xFF4
  5757                           prodl	equ	0xFF3
  5758                           postinc0	equ	0xFEE
  5759                           wreg	equ	0xFE8
  5760                           indf2	equ	0xFDF
  5761                           postinc2	equ	0xFDE
  5762                           postdec2	equ	0xFDD
  5763                           fsr2h	equ	0xFDA
  5764                           fsr2l	equ	0xFD9
  5765                           status	equ	0xFD8
  5766                           
  5767 ;; *************** function ___ftpack *****************
  5768 ;; Defined at:
  5769 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  5770 ;; Parameters:    Size  Location     Type
  5771 ;;  arg             3    0[COMRAM] unsigned um
  5772 ;;  exp             1    3[COMRAM] unsigned char 
  5773 ;;  sign            1    4[COMRAM] unsigned char 
  5774 ;; Auto vars:     Size  Location     Type
  5775 ;;		None
  5776 ;; Return value:  Size  Location     Type
  5777 ;;                  3    0[COMRAM] float 
  5778 ;; Registers used:
  5779 ;;		wreg, status,2, status,0
  5780 ;; Tracked objects:
  5781 ;;		On entry : 0/0
  5782 ;;		On exit  : 0/0
  5783 ;;		Unchanged: 0/0
  5784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5785 ;;      Params:         5       0       0       0
  5786 ;;      Locals:         0       0       0       0
  5787 ;;      Temps:          3       0       0       0
  5788 ;;      Totals:         8       0       0       0
  5789 ;;Total ram usage:        8 bytes
  5790 ;; Hardware stack levels used:    1
  5791 ;; This function calls:
  5792 ;;		Nothing
  5793 ;; This function is called by:
  5794 ;;		___ftadd
  5795 ;;		___ftdiv
  5796 ;;		___ftmul
  5797 ;;		___lltoft
  5798 ;;		___lwtoft
  5799 ;; This function uses a non-reentrant model
  5800 ;;
  5801                           
  5802                           	psect	text21
  5803  001D0E                     __ptext21:
  5804                           	opt stack 0
  5805  001D0E                     ___ftpack:
  5806                           	opt stack 27
  5807                           
  5808                           ;incstack = 0
  5809  001D0E  5004               	movf	___ftpack@exp,w,c
  5810  001D10  B4D8               	btfsc	status,2,c
  5811  001D12  D005               	goto	l2104
  5812  001D14  5001               	movf	___ftpack@arg,w,c
  5813  001D16  1002               	iorwf	___ftpack@arg+1,w,c
  5814  001D18  1003               	iorwf	___ftpack@arg+2,w,c
  5815  001D1A  A4D8               	btfss	status,2,c
  5816  001D1C  D00E               	goto	l2110
  5817  001D1E                     l2104:
  5818  001D1E  0E00               	movlw	0
  5819  001D20  6E01               	movwf	?___ftpack,c
  5820  001D22  0E00               	movlw	0
  5821  001D24  6E02               	movwf	?___ftpack+1,c
  5822  001D26  0E00               	movlw	0
  5823  001D28  6E03               	movwf	?___ftpack+2,c
  5824  001D2A  D053               	goto	l613
  5825  001D2C  D006               	goto	l2110
  5826  001D2E                     l2108:
  5827  001D2E  2A04               	incf	___ftpack@exp,f,c
  5828  001D30  90D8               	bcf	status,0,c
  5829  001D32  3203               	rrcf	___ftpack@arg+2,f,c
  5830  001D34  3202               	rrcf	___ftpack@arg+1,f,c
  5831  001D36  3201               	rrcf	___ftpack@arg,f,c
  5832  001D38  D000               	goto	l2110
  5833  001D3A                     l2110:
  5834  001D3A  0E00               	movlw	0
  5835  001D3C  1401               	andwf	___ftpack@arg,w,c
  5836  001D3E  6E06               	movwf	??___ftpack& (0+255),c
  5837  001D40  0E00               	movlw	0
  5838  001D42  1402               	andwf	___ftpack@arg+1,w,c
  5839  001D44  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5840  001D46  0EFE               	movlw	254
  5841  001D48  1403               	andwf	___ftpack@arg+2,w,c
  5842  001D4A  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5843  001D4C  5006               	movf	??___ftpack,w,c
  5844  001D4E  1007               	iorwf	??___ftpack+1,w,c
  5845  001D50  1008               	iorwf	??___ftpack+2,w,c
  5846  001D52  B4D8               	btfsc	status,2,c
  5847  001D54  D00E               	goto	l2116
  5848  001D56  D7EB               	goto	l2108
  5849  001D58  D00C               	goto	l2116
  5850  001D5A                     l2112:
  5851  001D5A  2A04               	incf	___ftpack@exp,f,c
  5852  001D5C  0E01               	movlw	1
  5853  001D5E  2601               	addwf	___ftpack@arg,f,c
  5854  001D60  0E00               	movlw	0
  5855  001D62  2202               	addwfc	___ftpack@arg+1,f,c
  5856  001D64  0E00               	movlw	0
  5857  001D66  2203               	addwfc	___ftpack@arg+2,f,c
  5858  001D68  90D8               	bcf	status,0,c
  5859  001D6A  3203               	rrcf	___ftpack@arg+2,f,c
  5860  001D6C  3202               	rrcf	___ftpack@arg+1,f,c
  5861  001D6E  3201               	rrcf	___ftpack@arg,f,c
  5862  001D70  D000               	goto	l2116
  5863  001D72                     l2116:
  5864  001D72  0E00               	movlw	0
  5865  001D74  1401               	andwf	___ftpack@arg,w,c
  5866  001D76  6E06               	movwf	??___ftpack& (0+255),c
  5867  001D78  0E00               	movlw	0
  5868  001D7A  1402               	andwf	___ftpack@arg+1,w,c
  5869  001D7C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5870  001D7E  0EFF               	movlw	255
  5871  001D80  1403               	andwf	___ftpack@arg+2,w,c
  5872  001D82  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5873  001D84  5006               	movf	??___ftpack,w,c
  5874  001D86  1007               	iorwf	??___ftpack+1,w,c
  5875  001D88  1008               	iorwf	??___ftpack+2,w,c
  5876  001D8A  B4D8               	btfsc	status,2,c
  5877  001D8C  D008               	goto	l2120
  5878  001D8E  D7E5               	goto	l2112
  5879  001D90  D006               	goto	l2120
  5880  001D92                     l2118:
  5881  001D92  0604               	decf	___ftpack@exp,f,c
  5882  001D94  90D8               	bcf	status,0,c
  5883  001D96  3601               	rlcf	___ftpack@arg,f,c
  5884  001D98  3602               	rlcf	___ftpack@arg+1,f,c
  5885  001D9A  3603               	rlcf	___ftpack@arg+2,f,c
  5886  001D9C  D000               	goto	l2120
  5887  001D9E                     l2120:
  5888  001D9E  BE02               	btfsc	___ftpack@arg+1,7,c
  5889  001DA0  D004               	goto	l624
  5890  001DA2  0E02               	movlw	2
  5891  001DA4  6004               	cpfslt	___ftpack@exp,c
  5892  001DA6  D7F5               	goto	l2118
  5893  001DA8  D000               	goto	l624
  5894  001DAA                     l624:
  5895  001DAA  B004               	btfsc	___ftpack@exp,0,c
  5896  001DAC  D002               	goto	l2126
  5897  001DAE  9E02               	bcf	___ftpack@arg+1,7,c
  5898  001DB0  D000               	goto	l2126
  5899  001DB2                     l2126:
  5900  001DB2  90D8               	bcf	status,0,c
  5901  001DB4  3204               	rrcf	___ftpack@exp,f,c
  5902  001DB6  5004               	movf	___ftpack@exp,w,c
  5903  001DB8  1203               	iorwf	___ftpack@arg+2,f,c
  5904  001DBA  5005               	movf	___ftpack@sign,w,c
  5905  001DBC  B4D8               	btfsc	status,2,c
  5906  001DBE  D002               	goto	l2132
  5907  001DC0  8E03               	bsf	___ftpack@arg+2,7,c
  5908  001DC2  D000               	goto	l2132
  5909  001DC4                     l2132:
  5910  001DC4  C001  F001         	movff	___ftpack@arg,?___ftpack
  5911  001DC8  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5912  001DCC  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5913  001DD0  D000               	goto	l613
  5914  001DD2                     l613:
  5915  001DD2  0012               	return		;funcret
  5916  001DD4                     __end_of___ftpack:
  5917                           	opt stack 0
  5918                           tblptru	equ	0xFF8
  5919                           tblptrh	equ	0xFF7
  5920                           tblptrl	equ	0xFF6
  5921                           tablat	equ	0xFF5
  5922                           prodh	equ	0xFF4
  5923                           prodl	equ	0xFF3
  5924                           postinc0	equ	0xFEE
  5925                           wreg	equ	0xFE8
  5926                           indf2	equ	0xFDF
  5927                           postinc2	equ	0xFDE
  5928                           postdec2	equ	0xFDD
  5929                           fsr2h	equ	0xFDA
  5930                           fsr2l	equ	0xFD9
  5931                           status	equ	0xFD8
  5932                           
  5933 ;; *************** function _inizializzazione *****************
  5934 ;; Defined at:
  5935 ;;		line 92 in file "batterua.c"
  5936 ;; Parameters:    Size  Location     Type
  5937 ;;		None
  5938 ;; Auto vars:     Size  Location     Type
  5939 ;;		None
  5940 ;; Return value:  Size  Location     Type
  5941 ;;		None               void
  5942 ;; Registers used:
  5943 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5944 ;; Tracked objects:
  5945 ;;		On entry : 0/0
  5946 ;;		On exit  : 0/0
  5947 ;;		Unchanged: 0/0
  5948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5949 ;;      Params:         0       0       0       0
  5950 ;;      Locals:         0       0       0       0
  5951 ;;      Temps:          0       0       0       0
  5952 ;;      Totals:         0       0       0       0
  5953 ;;Total ram usage:        0 bytes
  5954 ;; Hardware stack levels used:    1
  5955 ;; Hardware stack levels required when called:    6
  5956 ;; This function calls:
  5957 ;;		_LCD_backlight
  5958 ;;		_LCD_initialize
  5959 ;;		_LCD_write_message
  5960 ;;		_delay_ms
  5961 ;; This function is called by:
  5962 ;;		_main
  5963 ;; This function uses a non-reentrant model
  5964 ;;
  5965                           
  5966                           	psect	text22
  5967  0021A8                     __ptext22:
  5968                           	opt stack 0
  5969  0021A8                     _inizializzazione:
  5970                           	opt stack 24
  5971                           
  5972                           ;batterua.c: 93: LATA = 0x00;
  5973                           
  5974                           ;incstack = 0
  5975  0021A8  0E00               	movlw	0
  5976  0021AA  6E89               	movwf	3977,c	;volatile
  5977                           
  5978                           ;batterua.c: 94: TRISA = 0xFF;
  5979  0021AC  6892               	setf	3986,c	;volatile
  5980                           
  5981                           ;batterua.c: 96: LATB = 0x00;
  5982  0021AE  0E00               	movlw	0
  5983  0021B0  6E8A               	movwf	3978,c	;volatile
  5984                           
  5985                           ;batterua.c: 97: TRISB = 0xFF;
  5986  0021B2  6893               	setf	3987,c	;volatile
  5987                           
  5988                           ;batterua.c: 99: LATC = 0x00;
  5989  0021B4  0E00               	movlw	0
  5990  0021B6  6E8B               	movwf	3979,c	;volatile
  5991                           
  5992                           ;batterua.c: 100: TRISC = 0x00;
  5993  0021B8  0E00               	movlw	0
  5994  0021BA  6E94               	movwf	3988,c	;volatile
  5995                           
  5996                           ;batterua.c: 102: LATD = 0x00;
  5997  0021BC  0E00               	movlw	0
  5998  0021BE  6E8C               	movwf	3980,c	;volatile
  5999                           
  6000                           ;batterua.c: 103: TRISD = 0x00;
  6001  0021C0  0E00               	movlw	0
  6002  0021C2  6E95               	movwf	3989,c	;volatile
  6003                           
  6004                           ;batterua.c: 105: LCD_initialize(16);
  6005  0021C4  0E10               	movlw	16
  6006  0021C6  EC8D  F00B         	call	_LCD_initialize
  6007                           
  6008                           ;batterua.c: 106: LCD_write_message("TESTER BATTERIE");
  6009  0021CA  0E99               	movlw	low STR_5
  6010  0021CC  6E20               	movwf	LCD_write_message@buffer,c
  6011  0021CE  0E03               	movlw	high STR_5
  6012  0021D0  6E21               	movwf	LCD_write_message@buffer+1,c
  6013  0021D2  ECB7  F011         	call	_LCD_write_message	;wreg free
  6014                           
  6015                           ;batterua.c: 107: delay_ms(500);
  6016  0021D6  0E01               	movlw	1
  6017  0021D8  6E16               	movwf	delay_ms@value_ms+1,c
  6018  0021DA  0EF4               	movlw	244
  6019  0021DC  6E15               	movwf	delay_ms@value_ms,c
  6020  0021DE  EC83  F011         	call	_delay_ms	;wreg free
  6021                           
  6022                           ;batterua.c: 108: LCD_backlight(1);
  6023  0021E2  0E01               	movlw	1
  6024  0021E4  EC60  F012         	call	_LCD_backlight
  6025                           
  6026                           ;batterua.c: 110: ADCON0 = 0b00000000;
  6027  0021E8  0E00               	movlw	0
  6028  0021EA  6EC2               	movwf	4034,c	;volatile
  6029                           
  6030                           ;batterua.c: 111: ADCON1 = 0b00001011;
  6031  0021EC  0E0B               	movlw	11
  6032  0021EE  6EC1               	movwf	4033,c	;volatile
  6033                           
  6034                           ;batterua.c: 112: ADCON2 = 0b10110101;
  6035  0021F0  0EB5               	movlw	181
  6036  0021F2  6EC0               	movwf	4032,c	;volatile
  6037                           
  6038                           ;batterua.c: 113: ADCON0bits.CHS3 = 0;
  6039  0021F4  9AC2               	bcf	4034,5,c	;volatile
  6040                           
  6041                           ;batterua.c: 114: ADCON0bits.CHS2 = 0;
  6042  0021F6  98C2               	bcf	4034,4,c	;volatile
  6043                           
  6044                           ;batterua.c: 115: ADCON0bits.CHS1 = 0;
  6045  0021F8  96C2               	bcf	4034,3,c	;volatile
  6046                           
  6047                           ;batterua.c: 116: T0CON = 0x85;
  6048  0021FA  0E85               	movlw	133
  6049  0021FC  6ED5               	movwf	4053,c	;volatile
  6050                           
  6051                           ;batterua.c: 117: TMR0H = 0x0B;
  6052  0021FE  0E0B               	movlw	11
  6053  002200  6ED7               	movwf	4055,c	;volatile
  6054                           
  6055                           ;batterua.c: 118: TMR0L = 0xDC;
  6056  002202  0EDC               	movlw	220
  6057  002204  6ED6               	movwf	4054,c	;volatile
  6058                           
  6059                           ;batterua.c: 119: INTCONbits.GIE = 1;
  6060  002206  8EF2               	bsf	intcon,7,c	;volatile
  6061                           
  6062                           ;batterua.c: 120: INTCONbits.TMR0IF = 0;
  6063  002208  94F2               	bcf	intcon,2,c	;volatile
  6064                           
  6065                           ;batterua.c: 121: INTCONbits.TMR0IE = 1;
  6066  00220A  8AF2               	bsf	intcon,5,c	;volatile
  6067                           
  6068                           ;batterua.c: 122: ADCON0bits.ADON = 1;
  6069  00220C  80C2               	bsf	4034,0,c	;volatile
  6070  00220E  0012               	return		;funcret
  6071  002210                     __end_of_inizializzazione:
  6072                           	opt stack 0
  6073                           tblptru	equ	0xFF8
  6074                           tblptrh	equ	0xFF7
  6075                           tblptrl	equ	0xFF6
  6076                           tablat	equ	0xFF5
  6077                           prodh	equ	0xFF4
  6078                           prodl	equ	0xFF3
  6079                           intcon	equ	0xFF2
  6080                           postinc0	equ	0xFEE
  6081                           wreg	equ	0xFE8
  6082                           indf2	equ	0xFDF
  6083                           postinc2	equ	0xFDE
  6084                           postdec2	equ	0xFDD
  6085                           fsr2h	equ	0xFDA
  6086                           fsr2l	equ	0xFD9
  6087                           status	equ	0xFD8
  6088                           
  6089 ;; *************** function _LCD_write_message *****************
  6090 ;; Defined at:
  6091 ;;		line 178 in file "C:/Users/simone/Desktop/LaurTec_PIC_libraries_v_3.3.1 - Copia/src\LCD_44780.c"
  6092 ;; Parameters:    Size  Location     Type
  6093 ;;  buffer          2   31[COMRAM] PTR const unsigned char 
  6094 ;;		 -> STR_5(16), STR_4(17), STR_1(17), 
  6095 ;; Auto vars:     Size  Location     Type
  6096 ;;		None
  6097 ;; Return value:  Size  Location     Type
  6098 ;;		None               void
  6099 ;; Registers used:
  6100 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6101 ;; Tracked objects:
  6102 ;;		On entry : 0/0
  6103 ;;		On exit  : 0/0
  6104 ;;		Unchanged: 0/0
  6105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6106 ;;      Params:         2       0       0       0
  6107 ;;      Locals:         0       0       0       0
  6108 ;;      Temps:          0       0       0       0
  6109 ;;      Totals:         2       0       0       0
  6110 ;;Total ram usage:        2 bytes
  6111 ;; Hardware stack levels used:    1
  6112 ;; Hardware stack levels required when called:    5
  6113 ;; This function calls:
  6114 ;;		_LCD_write_char
  6115 ;; This function is called by:
  6116 ;;		_main
  6117 ;;		_inizializzazione
  6118 ;; This function uses a non-reentrant model
  6119 ;;
  6120                           
  6121                           	psect	text23
  6122  00236E                     __ptext23:
  6123                           	opt stack 0
  6124  00236E                     _LCD_write_message:
  6125                           	opt stack 24
  6126                           
  6127                           ;src\LCD_44780.c: 181: while(*buffer) {
  6128                           
  6129                           ;incstack = 0
  6130  00236E  D00B               	goto	l2364
  6131  002370                     l2360:
  6132                           
  6133                           ;src\LCD_44780.c: 184: LCD_write_char(*buffer);
  6134  002370  C020  FFF6         	movff	LCD_write_message@buffer,tblptrl
  6135  002374  C021  FFF7         	movff	LCD_write_message@buffer+1,tblptrh
  6136  002378                     	if	0	;tblptru may be non-zero
  6137  002378                     	endif
  6138  002378                     	if	0	;tblptru may be non-zero
  6139  002378                     	endif
  6140  002378  0008               	tblrd		*
  6141  00237A  50F5               	movf	tablat,w,c
  6142  00237C  EC9C  F010         	call	_LCD_write_char
  6143                           
  6144                           ;src\LCD_44780.c: 186: buffer++;
  6145  002380  4A20               	infsnz	LCD_write_message@buffer,f,c
  6146  002382  2A21               	incf	LCD_write_message@buffer+1,f,c
  6147  002384  D000               	goto	l2364
  6148  002386                     l2364:
  6149  002386  C020  FFF6         	movff	LCD_write_message@buffer,tblptrl
  6150  00238A  C021  FFF7         	movff	LCD_write_message@buffer+1,tblptrh
  6151  00238E                     	if	0	;tblptru may be non-zero
  6152  00238E                     	endif
  6153  00238E                     	if	0	;tblptru may be non-zero
  6154  00238E                     	endif
  6155  00238E  0008               	tblrd		*
  6156  002390  50F5               	movf	tablat,w,c
  6157  002392  0900               	iorlw	0
  6158  002394  A4D8               	btfss	status,2,c
  6159  002396  D7EC               	goto	l2360
  6160  002398  0012               	return		;funcret
  6161  00239A                     __end_of_LCD_write_message:
  6162                           	opt stack 0
  6163                           tblptru	equ	0xFF8
  6164                           tblptrh	equ	0xFF7
  6165                           tblptrl	equ	0xFF6
  6166                           tablat	equ	0xFF5
  6167                           prodh	equ	0xFF4
  6168                           prodl	equ	0xFF3
  6169                           intcon	equ	0xFF2
  6170                           postinc0	equ	0xFEE
  6171                           wreg	equ	0xFE8
  6172                           indf2	equ	0xFDF
  6173                           postinc2	equ	0xFDE
  6174                           postdec2	equ	0xFDD
  6175                           fsr2h	equ	0xFDA
  6176                           fsr2l	equ	0xFD9
  6177                           status	equ	0xFD8
  6178                           
  6179 ;; *************** function _LCD_initialize *****************
  6180 ;; Defined at:
  6181 ;;		line 283 in file "C:/Users/simone/Desktop/LaurTec_PIC_libraries_v_3.3.1 - Copia/src\LCD_44780.c"
  6182 ;; Parameters:    Size  Location     Type
  6183 ;;  quartz_frequ    1    wreg     unsigned char 
  6184 ;; Auto vars:     Size  Location     Type
  6185 ;;  quartz_frequ    1   28[COMRAM] unsigned char 
  6186 ;; Return value:  Size  Location     Type
  6187 ;;		None               void
  6188 ;; Registers used:
  6189 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6190 ;; Tracked objects:
  6191 ;;		On entry : 0/0
  6192 ;;		On exit  : 0/0
  6193 ;;		Unchanged: 0/0
  6194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6195 ;;      Params:         0       0       0       0
  6196 ;;      Locals:         1       0       0       0
  6197 ;;      Temps:          0       0       0       0
  6198 ;;      Totals:         1       0       0       0
  6199 ;;Total ram usage:        1 bytes
  6200 ;; Hardware stack levels used:    1
  6201 ;; Hardware stack levels required when called:    5
  6202 ;; This function calls:
  6203 ;;		_LCD_clear
  6204 ;;		_LCD_cursor
  6205 ;;		_LCD_send_command
  6206 ;;		_delay_ms
  6207 ;;		_delay_set_quartz
  6208 ;; This function is called by:
  6209 ;;		_inizializzazione
  6210 ;; This function uses a non-reentrant model
  6211 ;;
  6212                           
  6213                           	psect	text24
  6214  00171A                     __ptext24:
  6215                           	opt stack 0
  6216  00171A                     _LCD_initialize:
  6217                           	opt stack 24
  6218                           
  6219                           ;incstack = 0
  6220                           ;LCD_initialize@quartz_frequency stored from wreg
  6221  00171A  6E1D               	movwf	LCD_initialize@quartz_frequency,c
  6222                           
  6223                           ;src\LCD_44780.c: 285: delay_set_quartz (quartz_frequency);
  6224  00171C  501D               	movf	LCD_initialize@quartz_frequency,w,c
  6225  00171E  EC67  F012         	call	_delay_set_quartz
  6226                           
  6227                           ;src\LCD_44780.c: 287: LATDbits.LATD0 = 0x00;
  6228  001722  908C               	bcf	3980,0,c	;volatile
  6229                           
  6230                           ;src\LCD_44780.c: 288: LATDbits.LATD2 = 0x00;
  6231  001724  948C               	bcf	3980,2,c	;volatile
  6232                           
  6233                           ;src\LCD_44780.c: 289: LATDbits.LATD1 = 0x00;
  6234  001726  928C               	bcf	3980,1,c	;volatile
  6235                           
  6236                           ;src\LCD_44780.c: 291: delay_ms (100);
  6237  001728  0E00               	movlw	0
  6238  00172A  6E16               	movwf	delay_ms@value_ms+1,c
  6239  00172C  0E64               	movlw	100
  6240  00172E  6E15               	movwf	delay_ms@value_ms,c
  6241  001730  EC83  F011         	call	_delay_ms	;wreg free
  6242                           
  6243                           ;src\LCD_44780.c: 292: LCD_send_command (0,0,1,1);
  6244  001734  0E00               	movlw	0
  6245  001736  6E17               	movwf	LCD_send_command@D2,c
  6246  001738  0E01               	movlw	1
  6247  00173A  6E18               	movwf	LCD_send_command@D1,c
  6248  00173C  0E01               	movlw	1
  6249  00173E  6E19               	movwf	LCD_send_command@D0,c
  6250  001740  0E00               	movlw	0
  6251  001742  EC9F  F011         	call	_LCD_send_command
  6252                           
  6253                           ;src\LCD_44780.c: 293: delay_ms (100);
  6254  001746  0E00               	movlw	0
  6255  001748  6E16               	movwf	delay_ms@value_ms+1,c
  6256  00174A  0E64               	movlw	100
  6257  00174C  6E15               	movwf	delay_ms@value_ms,c
  6258  00174E  EC83  F011         	call	_delay_ms	;wreg free
  6259                           
  6260                           ;src\LCD_44780.c: 294: LCD_send_command (0,0,1,1);
  6261  001752  0E00               	movlw	0
  6262  001754  6E17               	movwf	LCD_send_command@D2,c
  6263  001756  0E01               	movlw	1
  6264  001758  6E18               	movwf	LCD_send_command@D1,c
  6265  00175A  0E01               	movlw	1
  6266  00175C  6E19               	movwf	LCD_send_command@D0,c
  6267  00175E  0E00               	movlw	0
  6268  001760  EC9F  F011         	call	_LCD_send_command
  6269                           
  6270                           ;src\LCD_44780.c: 295: delay_ms (10);
  6271  001764  0E00               	movlw	0
  6272  001766  6E16               	movwf	delay_ms@value_ms+1,c
  6273  001768  0E0A               	movlw	10
  6274  00176A  6E15               	movwf	delay_ms@value_ms,c
  6275  00176C  EC83  F011         	call	_delay_ms	;wreg free
  6276                           
  6277                           ;src\LCD_44780.c: 296: LCD_send_command (0,0,1,1);
  6278  001770  0E00               	movlw	0
  6279  001772  6E17               	movwf	LCD_send_command@D2,c
  6280  001774  0E01               	movlw	1
  6281  001776  6E18               	movwf	LCD_send_command@D1,c
  6282  001778  0E01               	movlw	1
  6283  00177A  6E19               	movwf	LCD_send_command@D0,c
  6284  00177C  0E00               	movlw	0
  6285  00177E  EC9F  F011         	call	_LCD_send_command
  6286                           
  6287                           ;src\LCD_44780.c: 298: LCD_send_command (0,0,1,0);
  6288  001782  0E00               	movlw	0
  6289  001784  6E17               	movwf	LCD_send_command@D2,c
  6290  001786  0E01               	movlw	1
  6291  001788  6E18               	movwf	LCD_send_command@D1,c
  6292  00178A  0E00               	movlw	0
  6293  00178C  6E19               	movwf	LCD_send_command@D0,c
  6294  00178E  0E00               	movlw	0
  6295  001790  EC9F  F011         	call	_LCD_send_command
  6296                           
  6297                           ;src\LCD_44780.c: 300: LCD_send_command (0,0,1,0);
  6298  001794  0E00               	movlw	0
  6299  001796  6E17               	movwf	LCD_send_command@D2,c
  6300  001798  0E01               	movlw	1
  6301  00179A  6E18               	movwf	LCD_send_command@D1,c
  6302  00179C  0E00               	movlw	0
  6303  00179E  6E19               	movwf	LCD_send_command@D0,c
  6304  0017A0  0E00               	movlw	0
  6305  0017A2  EC9F  F011         	call	_LCD_send_command
  6306                           
  6307                           ;src\LCD_44780.c: 301: LCD_send_command (1,0,0,0);
  6308  0017A6  0E00               	movlw	0
  6309  0017A8  6E17               	movwf	LCD_send_command@D2,c
  6310  0017AA  0E00               	movlw	0
  6311  0017AC  6E18               	movwf	LCD_send_command@D1,c
  6312  0017AE  0E00               	movlw	0
  6313  0017B0  6E19               	movwf	LCD_send_command@D0,c
  6314  0017B2  0E01               	movlw	1
  6315  0017B4  EC9F  F011         	call	_LCD_send_command
  6316                           
  6317                           ;src\LCD_44780.c: 303: LCD_send_command (0,0,0,0);
  6318  0017B8  0E00               	movlw	0
  6319  0017BA  6E17               	movwf	LCD_send_command@D2,c
  6320  0017BC  0E00               	movlw	0
  6321  0017BE  6E18               	movwf	LCD_send_command@D1,c
  6322  0017C0  0E00               	movlw	0
  6323  0017C2  6E19               	movwf	LCD_send_command@D0,c
  6324  0017C4  0E00               	movlw	0
  6325  0017C6  EC9F  F011         	call	_LCD_send_command
  6326                           
  6327                           ;src\LCD_44780.c: 304: LCD_send_command (1,0,0,0);
  6328  0017CA  0E00               	movlw	0
  6329  0017CC  6E17               	movwf	LCD_send_command@D2,c
  6330  0017CE  0E00               	movlw	0
  6331  0017D0  6E18               	movwf	LCD_send_command@D1,c
  6332  0017D2  0E00               	movlw	0
  6333  0017D4  6E19               	movwf	LCD_send_command@D0,c
  6334  0017D6  0E01               	movlw	1
  6335  0017D8  EC9F  F011         	call	_LCD_send_command
  6336                           
  6337                           ;src\LCD_44780.c: 306: LCD_send_command (0,0,0,0);
  6338  0017DC  0E00               	movlw	0
  6339  0017DE  6E17               	movwf	LCD_send_command@D2,c
  6340  0017E0  0E00               	movlw	0
  6341  0017E2  6E18               	movwf	LCD_send_command@D1,c
  6342  0017E4  0E00               	movlw	0
  6343  0017E6  6E19               	movwf	LCD_send_command@D0,c
  6344  0017E8  0E00               	movlw	0
  6345  0017EA  EC9F  F011         	call	_LCD_send_command
  6346                           
  6347                           ;src\LCD_44780.c: 307: LCD_send_command (0,0,0,1);
  6348  0017EE  0E00               	movlw	0
  6349  0017F0  6E17               	movwf	LCD_send_command@D2,c
  6350  0017F2  0E00               	movlw	0
  6351  0017F4  6E18               	movwf	LCD_send_command@D1,c
  6352  0017F6  0E01               	movlw	1
  6353  0017F8  6E19               	movwf	LCD_send_command@D0,c
  6354  0017FA  0E00               	movlw	0
  6355  0017FC  EC9F  F011         	call	_LCD_send_command
  6356                           
  6357                           ;src\LCD_44780.c: 309: LCD_send_command (0,0,0,0);
  6358  001800  0E00               	movlw	0
  6359  001802  6E17               	movwf	LCD_send_command@D2,c
  6360  001804  0E00               	movlw	0
  6361  001806  6E18               	movwf	LCD_send_command@D1,c
  6362  001808  0E00               	movlw	0
  6363  00180A  6E19               	movwf	LCD_send_command@D0,c
  6364  00180C  0E00               	movlw	0
  6365  00180E  EC9F  F011         	call	_LCD_send_command
  6366                           
  6367                           ;src\LCD_44780.c: 310: LCD_send_command (0,1,1,0);
  6368  001812  0E01               	movlw	1
  6369  001814  6E17               	movwf	LCD_send_command@D2,c
  6370  001816  0E01               	movlw	1
  6371  001818  6E18               	movwf	LCD_send_command@D1,c
  6372  00181A  0E00               	movlw	0
  6373  00181C  6E19               	movwf	LCD_send_command@D0,c
  6374  00181E  0E00               	movlw	0
  6375  001820  EC9F  F011         	call	_LCD_send_command
  6376                           
  6377                           ;src\LCD_44780.c: 312: LCD_clear ();
  6378  001824  EC08  F012         	call	_LCD_clear	;wreg free
  6379                           
  6380                           ;src\LCD_44780.c: 314: LCD_cursor (0,0);
  6381  001828  0E00               	movlw	0
  6382  00182A  6E1B               	movwf	LCD_cursor@blinking,c
  6383  00182C  0E00               	movlw	0
  6384  00182E  ECCD  F011         	call	_LCD_cursor
  6385  001832  0012               	return		;funcret
  6386  001834                     __end_of_LCD_initialize:
  6387                           	opt stack 0
  6388                           tblptru	equ	0xFF8
  6389                           tblptrh	equ	0xFF7
  6390                           tblptrl	equ	0xFF6
  6391                           tablat	equ	0xFF5
  6392                           prodh	equ	0xFF4
  6393                           prodl	equ	0xFF3
  6394                           intcon	equ	0xFF2
  6395                           postinc0	equ	0xFEE
  6396                           wreg	equ	0xFE8
  6397                           indf2	equ	0xFDF
  6398                           postinc2	equ	0xFDE
  6399                           postdec2	equ	0xFDD
  6400                           fsr2h	equ	0xFDA
  6401                           fsr2l	equ	0xFD9
  6402                           status	equ	0xFD8
  6403                           
  6404 ;; *************** function _delay_set_quartz *****************
  6405 ;; Defined at:
  6406 ;;		line 115 in file "C:/Users/simone/Desktop/LaurTec_PIC_libraries_v_3.3.1 - Copia/src\delay.c"
  6407 ;; Parameters:    Size  Location     Type
  6408 ;;  frequency       1    wreg     unsigned char 
  6409 ;; Auto vars:     Size  Location     Type
  6410 ;;  frequency       1    0[COMRAM] unsigned char 
  6411 ;; Return value:  Size  Location     Type
  6412 ;;		None               void
  6413 ;; Registers used:
  6414 ;;		wreg
  6415 ;; Tracked objects:
  6416 ;;		On entry : 0/0
  6417 ;;		On exit  : 0/0
  6418 ;;		Unchanged: 0/0
  6419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6420 ;;      Params:         0       0       0       0
  6421 ;;      Locals:         1       0       0       0
  6422 ;;      Temps:          0       0       0       0
  6423 ;;      Totals:         1       0       0       0
  6424 ;;Total ram usage:        1 bytes
  6425 ;; Hardware stack levels used:    1
  6426 ;; This function calls:
  6427 ;;		Nothing
  6428 ;; This function is called by:
  6429 ;;		_LCD_initialize
  6430 ;;		_main
  6431 ;; This function uses a non-reentrant model
  6432 ;;
  6433                           
  6434                           	psect	text25
  6435  0024CE                     __ptext25:
  6436                           	opt stack 0
  6437  0024CE                     _delay_set_quartz:
  6438                           	opt stack 28
  6439                           
  6440                           ;incstack = 0
  6441                           ;delay_set_quartz@frequency stored from wreg
  6442  0024CE  6E01               	movwf	delay_set_quartz@frequency,c
  6443                           
  6444                           ;src\delay.c: 117: delay_quartz_frequency_value = frequency;
  6445  0024D0  C001  F05F         	movff	delay_set_quartz@frequency,_delay_quartz_frequency_value	;volatile
  6446  0024D4  0012               	return		;funcret
  6447  0024D6                     __end_of_delay_set_quartz:
  6448                           	opt stack 0
  6449                           tblptru	equ	0xFF8
  6450                           tblptrh	equ	0xFF7
  6451                           tblptrl	equ	0xFF6
  6452                           tablat	equ	0xFF5
  6453                           prodh	equ	0xFF4
  6454                           prodl	equ	0xFF3
  6455                           intcon	equ	0xFF2
  6456                           postinc0	equ	0xFEE
  6457                           wreg	equ	0xFE8
  6458                           indf2	equ	0xFDF
  6459                           postinc2	equ	0xFDE
  6460                           postdec2	equ	0xFDD
  6461                           fsr2h	equ	0xFDA
  6462                           fsr2l	equ	0xFD9
  6463                           status	equ	0xFD8
  6464                           
  6465 ;; *************** function _LCD_cursor *****************
  6466 ;; Defined at:
  6467 ;;		line 266 in file "C:/Users/simone/Desktop/LaurTec_PIC_libraries_v_3.3.1 - Copia/src\LCD_44780.c"
  6468 ;; Parameters:    Size  Location     Type
  6469 ;;  active          1    wreg     unsigned char 
  6470 ;;  blinking        1   26[COMRAM] unsigned char 
  6471 ;; Auto vars:     Size  Location     Type
  6472 ;;  active          1   27[COMRAM] unsigned char 
  6473 ;; Return value:  Size  Location     Type
  6474 ;;		None               void
  6475 ;; Registers used:
  6476 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6477 ;; Tracked objects:
  6478 ;;		On entry : 0/0
  6479 ;;		On exit  : 0/0
  6480 ;;		Unchanged: 0/0
  6481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6482 ;;      Params:         1       0       0       0
  6483 ;;      Locals:         1       0       0       0
  6484 ;;      Temps:          0       0       0       0
  6485 ;;      Totals:         2       0       0       0
  6486 ;;Total ram usage:        2 bytes
  6487 ;; Hardware stack levels used:    1
  6488 ;; Hardware stack levels required when called:    4
  6489 ;; This function calls:
  6490 ;;		_LCD_send_command
  6491 ;; This function is called by:
  6492 ;;		_LCD_initialize
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495                           
  6496                           	psect	text26
  6497  00239A                     __ptext26:
  6498                           	opt stack 0
  6499  00239A                     _LCD_cursor:
  6500                           	opt stack 24
  6501                           
  6502                           ;incstack = 0
  6503                           ;LCD_cursor@active stored from wreg
  6504  00239A  6E1C               	movwf	LCD_cursor@active,c
  6505                           
  6506                           ;src\LCD_44780.c: 268: LCD_send_command (0,0,0,0);
  6507  00239C  0E00               	movlw	0
  6508  00239E  6E17               	movwf	LCD_send_command@D2,c
  6509  0023A0  0E00               	movlw	0
  6510  0023A2  6E18               	movwf	LCD_send_command@D1,c
  6511  0023A4  0E00               	movlw	0
  6512  0023A6  6E19               	movwf	LCD_send_command@D0,c
  6513  0023A8  0E00               	movlw	0
  6514  0023AA  EC9F  F011         	call	_LCD_send_command
  6515                           
  6516                           ;src\LCD_44780.c: 269: LCD_send_command (1,1,active,blinking);
  6517  0023AE  0E01               	movlw	1
  6518  0023B0  6E17               	movwf	LCD_send_command@D2,c
  6519  0023B2  C01C  F018         	movff	LCD_cursor@active,LCD_send_command@D1
  6520  0023B6  C01B  F019         	movff	LCD_cursor@blinking,LCD_send_command@D0
  6521  0023BA  0E01               	movlw	1
  6522  0023BC  EC9F  F011         	call	_LCD_send_command
  6523  0023C0  0012               	return		;funcret
  6524  0023C2                     __end_of_LCD_cursor:
  6525                           	opt stack 0
  6526                           tblptru	equ	0xFF8
  6527                           tblptrh	equ	0xFF7
  6528                           tblptrl	equ	0xFF6
  6529                           tablat	equ	0xFF5
  6530                           prodh	equ	0xFF4
  6531                           prodl	equ	0xFF3
  6532                           intcon	equ	0xFF2
  6533                           postinc0	equ	0xFEE
  6534                           wreg	equ	0xFE8
  6535                           indf2	equ	0xFDF
  6536                           postinc2	equ	0xFDE
  6537                           postdec2	equ	0xFDD
  6538                           fsr2h	equ	0xFDA
  6539                           fsr2l	equ	0xFD9
  6540                           status	equ	0xFD8
  6541                           
  6542 ;; *************** function _LCD_clear *****************
  6543 ;; Defined at:
  6544 ;;		line 257 in file "C:/Users/simone/Desktop/LaurTec_PIC_libraries_v_3.3.1 - Copia/src\LCD_44780.c"
  6545 ;; Parameters:    Size  Location     Type
  6546 ;;		None
  6547 ;; Auto vars:     Size  Location     Type
  6548 ;;		None
  6549 ;; Return value:  Size  Location     Type
  6550 ;;		None               void
  6551 ;; Registers used:
  6552 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6553 ;; Tracked objects:
  6554 ;;		On entry : 0/0
  6555 ;;		On exit  : 0/0
  6556 ;;		Unchanged: 0/0
  6557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6558 ;;      Params:         0       0       0       0
  6559 ;;      Locals:         0       0       0       0
  6560 ;;      Temps:          0       0       0       0
  6561 ;;      Totals:         0       0       0       0
  6562 ;;Total ram usage:        0 bytes
  6563 ;; Hardware stack levels used:    1
  6564 ;; Hardware stack levels required when called:    4
  6565 ;; This function calls:
  6566 ;;		_LCD_send_command
  6567 ;; This function is called by:
  6568 ;;		_LCD_initialize
  6569 ;; This function uses a non-reentrant model
  6570 ;;
  6571                           
  6572                           	psect	text27
  6573  002410                     __ptext27:
  6574                           	opt stack 0
  6575  002410                     _LCD_clear:
  6576                           	opt stack 24
  6577                           
  6578                           ;src\LCD_44780.c: 259: LCD_send_command (0,0,0,0);
  6579                           
  6580                           ;incstack = 0
  6581  002410  0E00               	movlw	0
  6582  002412  6E17               	movwf	LCD_send_command@D2,c
  6583  002414  0E00               	movlw	0
  6584  002416  6E18               	movwf	LCD_send_command@D1,c
  6585  002418  0E00               	movlw	0
  6586  00241A  6E19               	movwf	LCD_send_command@D0,c
  6587  00241C  0E00               	movlw	0
  6588  00241E  EC9F  F011         	call	_LCD_send_command
  6589                           
  6590                           ;src\LCD_44780.c: 260: LCD_send_command (0,0,0,1);
  6591  002422  0E00               	movlw	0
  6592  002424  6E17               	movwf	LCD_send_command@D2,c
  6593  002426  0E00               	movlw	0
  6594  002428  6E18               	movwf	LCD_send_command@D1,c
  6595  00242A  0E01               	movlw	1
  6596  00242C  6E19               	movwf	LCD_send_command@D0,c
  6597  00242E  0E00               	movlw	0
  6598  002430  EC9F  F011         	call	_LCD_send_command
  6599  002434  0012               	return		;funcret
  6600  002436                     __end_of_LCD_clear:
  6601                           	opt stack 0
  6602                           tblptru	equ	0xFF8
  6603                           tblptrh	equ	0xFF7
  6604                           tblptrl	equ	0xFF6
  6605                           tablat	equ	0xFF5
  6606                           prodh	equ	0xFF4
  6607                           prodl	equ	0xFF3
  6608                           intcon	equ	0xFF2
  6609                           postinc0	equ	0xFEE
  6610                           wreg	equ	0xFE8
  6611                           indf2	equ	0xFDF
  6612                           postinc2	equ	0xFDE
  6613                           postdec2	equ	0xFDD
  6614                           fsr2h	equ	0xFDA
  6615                           fsr2l	equ	0xFD9
  6616                           status	equ	0xFD8
  6617                           
  6618 ;; *************** function _LCD_backlight *****************
  6619 ;; Defined at:
  6620 ;;		line 275 in file "C:/Users/simone/Desktop/LaurTec_PIC_libraries_v_3.3.1 - Copia/src\LCD_44780.c"
  6621 ;; Parameters:    Size  Location     Type
  6622 ;;  active          1    wreg     unsigned char 
  6623 ;; Auto vars:     Size  Location     Type
  6624 ;;  active          1    0[COMRAM] unsigned char 
  6625 ;; Return value:  Size  Location     Type
  6626 ;;		None               void
  6627 ;; Registers used:
  6628 ;;		wreg
  6629 ;; Tracked objects:
  6630 ;;		On entry : 0/0
  6631 ;;		On exit  : 0/0
  6632 ;;		Unchanged: 0/0
  6633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6634 ;;      Params:         0       0       0       0
  6635 ;;      Locals:         1       0       0       0
  6636 ;;      Temps:          0       0       0       0
  6637 ;;      Totals:         1       0       0       0
  6638 ;;Total ram usage:        1 bytes
  6639 ;; Hardware stack levels used:    1
  6640 ;; This function calls:
  6641 ;;		Nothing
  6642 ;; This function is called by:
  6643 ;;		_inizializzazione
  6644 ;; This function uses a non-reentrant model
  6645 ;;
  6646                           
  6647                           	psect	text28
  6648  0024C0                     __ptext28:
  6649                           	opt stack 0
  6650  0024C0                     _LCD_backlight:
  6651                           	opt stack 29
  6652                           
  6653                           ;incstack = 0
  6654                           ;LCD_backlight@active stored from wreg
  6655  0024C0  6E01               	movwf	LCD_backlight@active,c
  6656                           
  6657                           ;src\LCD_44780.c: 277: LATDbits.LATD7 = active;
  6658  0024C2  B001               	btfsc	LCD_backlight@active,0,c
  6659  0024C4  D002               	bra	u2115
  6660  0024C6  9E8C               	bcf	3980,7,c	;volatile
  6661  0024C8  D001               	bra	u2116
  6662  0024CA                     u2115:
  6663  0024CA  8E8C               	bsf	3980,7,c	;volatile
  6664  0024CC                     u2116:
  6665  0024CC  0012               	return		;funcret
  6666  0024CE                     __end_of_LCD_backlight:
  6667                           	opt stack 0
  6668                           tblptru	equ	0xFF8
  6669                           tblptrh	equ	0xFF7
  6670                           tblptrl	equ	0xFF6
  6671                           tablat	equ	0xFF5
  6672                           prodh	equ	0xFF4
  6673                           prodl	equ	0xFF3
  6674                           intcon	equ	0xFF2
  6675                           postinc0	equ	0xFEE
  6676                           wreg	equ	0xFE8
  6677                           indf2	equ	0xFDF
  6678                           postinc2	equ	0xFDE
  6679                           postdec2	equ	0xFDD
  6680                           fsr2h	equ	0xFDA
  6681                           fsr2l	equ	0xFD9
  6682                           status	equ	0xFD8
  6683                           
  6684 ;; *************** function _LCD_write_string *****************
  6685 ;; Defined at:
  6686 ;;		line 194 in file "C:/Users/simone/Desktop/LaurTec_PIC_libraries_v_3.3.1 - Copia/src\LCD_44780.c"
  6687 ;; Parameters:    Size  Location     Type
  6688 ;;  buffer          2   31[COMRAM] PTR unsigned char 
  6689 ;;		 -> str(8), LCD_write_integer@convertedInt(6), 
  6690 ;; Auto vars:     Size  Location     Type
  6691 ;;		None
  6692 ;; Return value:  Size  Location     Type
  6693 ;;		None               void
  6694 ;; Registers used:
  6695 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6696 ;; Tracked objects:
  6697 ;;		On entry : 0/0
  6698 ;;		On exit  : 0/0
  6699 ;;		Unchanged: 0/0
  6700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6701 ;;      Params:         2       0       0       0
  6702 ;;      Locals:         0       0       0       0
  6703 ;;      Temps:          0       0       0       0
  6704 ;;      Totals:         2       0       0       0
  6705 ;;Total ram usage:        2 bytes
  6706 ;; Hardware stack levels used:    1
  6707 ;; Hardware stack levels required when called:    5
  6708 ;; This function calls:
  6709 ;;		_LCD_write_char
  6710 ;; This function is called by:
  6711 ;;		_main
  6712 ;;		_LCD_write_integer
  6713 ;; This function uses a non-reentrant model
  6714 ;;
  6715                           
  6716                           	psect	text29
  6717  002436                     __ptext29:
  6718                           	opt stack 0
  6719  002436                     _LCD_write_string:
  6720                           	opt stack 25
  6721                           
  6722                           ;src\LCD_44780.c: 197: while(*buffer){
  6723                           
  6724                           ;incstack = 0
  6725  002436  D00A               	goto	l2798
  6726  002438                     l2794:
  6727                           
  6728                           ;src\LCD_44780.c: 200: LCD_write_char(*buffer);
  6729  002438  C020  FFD9         	movff	LCD_write_string@buffer,fsr2l
  6730  00243C  C021  FFDA         	movff	LCD_write_string@buffer+1,fsr2h
  6731  002440  50DF               	movf	indf2,w,c
  6732  002442  EC9C  F010         	call	_LCD_write_char
  6733                           
  6734                           ;src\LCD_44780.c: 202: buffer++;
  6735  002446  4A20               	infsnz	LCD_write_string@buffer,f,c
  6736  002448  2A21               	incf	LCD_write_string@buffer+1,f,c
  6737  00244A  D000               	goto	l2798
  6738  00244C                     l2798:
  6739  00244C  C020  FFD9         	movff	LCD_write_string@buffer,fsr2l
  6740  002450  C021  FFDA         	movff	LCD_write_string@buffer+1,fsr2h
  6741  002454  50DF               	movf	indf2,w,c
  6742  002456  A4D8               	btfss	status,2,c
  6743  002458  D7EF               	goto	l2794
  6744  00245A  0012               	return		;funcret
  6745  00245C                     __end_of_LCD_write_string:
  6746                           	opt stack 0
  6747                           tblptru	equ	0xFF8
  6748                           tblptrh	equ	0xFF7
  6749                           tblptrl	equ	0xFF6
  6750                           tablat	equ	0xFF5
  6751                           prodh	equ	0xFF4
  6752                           prodl	equ	0xFF3
  6753                           intcon	equ	0xFF2
  6754                           postinc0	equ	0xFEE
  6755                           wreg	equ	0xFE8
  6756                           indf2	equ	0xFDF
  6757                           postinc2	equ	0xFDE
  6758                           postdec2	equ	0xFDD
  6759                           fsr2h	equ	0xFDA
  6760                           fsr2l	equ	0xFD9
  6761                           status	equ	0xFD8
  6762                           
  6763 ;; *************** function _LCD_write_char *****************
  6764 ;; Defined at:
  6765 ;;		line 145 in file "C:/Users/simone/Desktop/LaurTec_PIC_libraries_v_3.3.1 - Copia/src\LCD_44780.c"
  6766 ;; Parameters:    Size  Location     Type
  6767 ;;  value           1    wreg     unsigned char 
  6768 ;; Auto vars:     Size  Location     Type
  6769 ;;  value           1   30[COMRAM] unsigned char 
  6770 ;;  D0              1   29[COMRAM] unsigned char 
  6771 ;;  D1              1   28[COMRAM] unsigned char 
  6772 ;;  D2              1   27[COMRAM] unsigned char 
  6773 ;;  D3              1   26[COMRAM] unsigned char 
  6774 ;; Return value:  Size  Location     Type
  6775 ;;		None               void
  6776 ;; Registers used:
  6777 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6778 ;; Tracked objects:
  6779 ;;		On entry : 0/0
  6780 ;;		On exit  : 0/0
  6781 ;;		Unchanged: 0/0
  6782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6783 ;;      Params:         0       0       0       0
  6784 ;;      Locals:         5       0       0       0
  6785 ;;      Temps:          0       0       0       0
  6786 ;;      Totals:         5       0       0       0
  6787 ;;Total ram usage:        5 bytes
  6788 ;; Hardware stack levels used:    1
  6789 ;; Hardware stack levels required when called:    4
  6790 ;; This function calls:
  6791 ;;		_LCD_send_command
  6792 ;; This function is called by:
  6793 ;;		_LCD_write_message
  6794 ;;		_LCD_write_string
  6795 ;; This function uses a non-reentrant model
  6796 ;;
  6797                           
  6798                           	psect	text30
  6799  002138                     __ptext30:
  6800                           	opt stack 0
  6801  002138                     _LCD_write_char:
  6802                           	opt stack 24
  6803                           
  6804                           ;incstack = 0
  6805                           ;LCD_write_char@value stored from wreg
  6806  002138  6E1F               	movwf	LCD_write_char@value,c
  6807                           
  6808                           ;src\LCD_44780.c: 147: unsigned char D3,D2,D1,D0;
  6809                           ;src\LCD_44780.c: 149: LATDbits.LATD0 = 1;
  6810  00213A  808C               	bsf	3980,0,c	;volatile
  6811                           
  6812                           ;src\LCD_44780.c: 152: D3 = (value & 0b10000000) >> 7;
  6813  00213C  441F               	rlncf	LCD_write_char@value,w,c
  6814  00213E  0B01               	andlw	1
  6815  002140  6E1B               	movwf	LCD_write_char@D3,c
  6816                           
  6817                           ;src\LCD_44780.c: 153: D2 = (value & 0b01000000) >> 6;
  6818  002142  441F               	rlncf	LCD_write_char@value,w,c
  6819  002144  46E8               	rlncf	wreg,f,c
  6820  002146  0B03               	andlw	3
  6821  002148  0B01               	andlw	1
  6822  00214A  6E1C               	movwf	LCD_write_char@D2,c
  6823                           
  6824                           ;src\LCD_44780.c: 154: D1 = (value & 0b00100000) >> 5;
  6825  00214C  381F               	swapf	LCD_write_char@value,w,c
  6826  00214E  42E8               	rrncf	wreg,f,c
  6827  002150  0B07               	andlw	7
  6828  002152  0B01               	andlw	1
  6829  002154  6E1D               	movwf	LCD_write_char@D1,c
  6830                           
  6831                           ;src\LCD_44780.c: 155: D0 = (value & 0b00010000) >> 4;
  6832  002156  381F               	swapf	LCD_write_char@value,w,c
  6833  002158  0B0F               	andlw	15
  6834  00215A  0B01               	andlw	1
  6835  00215C  6E1E               	movwf	LCD_write_char@D0,c
  6836                           
  6837                           ;src\LCD_44780.c: 157: LCD_send_command (D3,D2,D1,D0);
  6838  00215E  C01C  F017         	movff	LCD_write_char@D2,LCD_send_command@D2
  6839  002162  C01D  F018         	movff	LCD_write_char@D1,LCD_send_command@D1
  6840  002166  C01E  F019         	movff	LCD_write_char@D0,LCD_send_command@D0
  6841  00216A  501B               	movf	LCD_write_char@D3,w,c
  6842  00216C  EC9F  F011         	call	_LCD_send_command
  6843                           
  6844                           ;src\LCD_44780.c: 160: D3 = (value & 0b00001000) >> 3;
  6845  002170  381F               	swapf	LCD_write_char@value,w,c
  6846  002172  46E8               	rlncf	wreg,f,c
  6847  002174  0B1F               	andlw	31
  6848  002176  0B01               	andlw	1
  6849  002178  6E1B               	movwf	LCD_write_char@D3,c
  6850                           
  6851                           ;src\LCD_44780.c: 161: D2 = (value & 0b00000100) >> 2;
  6852  00217A  401F               	rrncf	LCD_write_char@value,w,c
  6853  00217C  42E8               	rrncf	wreg,f,c
  6854  00217E  0B3F               	andlw	63
  6855  002180  0B01               	andlw	1
  6856  002182  6E1C               	movwf	LCD_write_char@D2,c
  6857                           
  6858                           ;src\LCD_44780.c: 162: D1 = (value & 0b00000010) >> 1;
  6859  002184  90D8               	bcf	status,0,c
  6860  002186  301F               	rrcf	LCD_write_char@value,w,c
  6861  002188  0B01               	andlw	1
  6862  00218A  6E1D               	movwf	LCD_write_char@D1,c
  6863                           
  6864                           ;src\LCD_44780.c: 163: D0 = (value & 0b00000001);
  6865  00218C  501F               	movf	LCD_write_char@value,w,c
  6866  00218E  0B01               	andlw	1
  6867  002190  6E1E               	movwf	LCD_write_char@D0,c
  6868                           
  6869                           ;src\LCD_44780.c: 165: LCD_send_command (D3,D2,D1,D0);
  6870  002192  C01C  F017         	movff	LCD_write_char@D2,LCD_send_command@D2
  6871  002196  C01D  F018         	movff	LCD_write_char@D1,LCD_send_command@D1
  6872  00219A  C01E  F019         	movff	LCD_write_char@D0,LCD_send_command@D0
  6873  00219E  501B               	movf	LCD_write_char@D3,w,c
  6874  0021A0  EC9F  F011         	call	_LCD_send_command
  6875                           
  6876                           ;src\LCD_44780.c: 167: LATDbits.LATD0 = 0;
  6877  0021A4  908C               	bcf	3980,0,c	;volatile
  6878  0021A6  0012               	return		;funcret
  6879  0021A8                     __end_of_LCD_write_char:
  6880                           	opt stack 0
  6881                           tblptru	equ	0xFF8
  6882                           tblptrh	equ	0xFF7
  6883                           tblptrl	equ	0xFF6
  6884                           tablat	equ	0xFF5
  6885                           prodh	equ	0xFF4
  6886                           prodl	equ	0xFF3
  6887                           intcon	equ	0xFF2
  6888                           postinc0	equ	0xFEE
  6889                           wreg	equ	0xFE8
  6890                           indf2	equ	0xFDF
  6891                           postinc2	equ	0xFDE
  6892                           postdec2	equ	0xFDD
  6893                           fsr2h	equ	0xFDA
  6894                           fsr2l	equ	0xFD9
  6895                           status	equ	0xFD8
  6896                           
  6897 ;; *************** function _LCD_goto_line *****************
  6898 ;; Defined at:
  6899 ;;		line 111 in file "C:/Users/simone/Desktop/LaurTec_PIC_libraries_v_3.3.1 - Copia/src\LCD_44780.c"
  6900 ;; Parameters:    Size  Location     Type
  6901 ;;  line            1    wreg     unsigned char 
  6902 ;; Auto vars:     Size  Location     Type
  6903 ;;  line            1   26[COMRAM] unsigned char 
  6904 ;; Return value:  Size  Location     Type
  6905 ;;		None               void
  6906 ;; Registers used:
  6907 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6908 ;; Tracked objects:
  6909 ;;		On entry : 0/0
  6910 ;;		On exit  : 0/0
  6911 ;;		Unchanged: 0/0
  6912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6913 ;;      Params:         0       0       0       0
  6914 ;;      Locals:         1       0       0       0
  6915 ;;      Temps:          0       0       0       0
  6916 ;;      Totals:         1       0       0       0
  6917 ;;Total ram usage:        1 bytes
  6918 ;; Hardware stack levels used:    1
  6919 ;; Hardware stack levels required when called:    4
  6920 ;; This function calls:
  6921 ;;		_LCD_send_command
  6922 ;; This function is called by:
  6923 ;;		_main
  6924 ;;		_LCD_goto_xy
  6925 ;; This function uses a non-reentrant model
  6926 ;;
  6927                           
  6928                           	psect	text31
  6929  001DD4                     __ptext31:
  6930                           	opt stack 0
  6931  001DD4                     _LCD_goto_line:
  6932                           	opt stack 26
  6933                           
  6934                           ;incstack = 0
  6935                           ;LCD_goto_line@line stored from wreg
  6936  001DD4  6E1B               	movwf	LCD_goto_line@line,c
  6937                           
  6938                           ;src\LCD_44780.c: 113: switch(line) {
  6939  001DD6  D04C               	goto	l2790
  6940  001DD8                     l2782:
  6941  001DD8  0E00               	movlw	0
  6942  001DDA  6E17               	movwf	LCD_send_command@D2,c
  6943  001DDC  0E00               	movlw	0
  6944  001DDE  6E18               	movwf	LCD_send_command@D1,c
  6945  001DE0  0E00               	movlw	0
  6946  001DE2  6E19               	movwf	LCD_send_command@D0,c
  6947  001DE4  0E01               	movlw	1
  6948  001DE6  EC9F  F011         	call	_LCD_send_command
  6949                           
  6950                           ;src\LCD_44780.c: 116: LCD_send_command(0,0,0,0);
  6951  001DEA  0E00               	movlw	0
  6952  001DEC  6E17               	movwf	LCD_send_command@D2,c
  6953  001DEE  0E00               	movlw	0
  6954  001DF0  6E18               	movwf	LCD_send_command@D1,c
  6955  001DF2  0E00               	movlw	0
  6956  001DF4  6E19               	movwf	LCD_send_command@D0,c
  6957  001DF6  0E00               	movlw	0
  6958  001DF8  EC9F  F011         	call	_LCD_send_command
  6959                           
  6960                           ;src\LCD_44780.c: 117: break;
  6961  001DFC  D047               	goto	l84
  6962  001DFE                     l2784:
  6963  001DFE  0E01               	movlw	1
  6964  001E00  6E17               	movwf	LCD_send_command@D2,c
  6965  001E02  0E00               	movlw	0
  6966  001E04  6E18               	movwf	LCD_send_command@D1,c
  6967  001E06  0E00               	movlw	0
  6968  001E08  6E19               	movwf	LCD_send_command@D0,c
  6969  001E0A  0E01               	movlw	1
  6970  001E0C  EC9F  F011         	call	_LCD_send_command
  6971                           
  6972                           ;src\LCD_44780.c: 120: LCD_send_command(0,0,0,0);
  6973  001E10  0E00               	movlw	0
  6974  001E12  6E17               	movwf	LCD_send_command@D2,c
  6975  001E14  0E00               	movlw	0
  6976  001E16  6E18               	movwf	LCD_send_command@D1,c
  6977  001E18  0E00               	movlw	0
  6978  001E1A  6E19               	movwf	LCD_send_command@D0,c
  6979  001E1C  0E00               	movlw	0
  6980  001E1E  EC9F  F011         	call	_LCD_send_command
  6981                           
  6982                           ;src\LCD_44780.c: 121: break;
  6983  001E22  D034               	goto	l84
  6984  001E24                     l2786:
  6985  001E24  0E00               	movlw	0
  6986  001E26  6E17               	movwf	LCD_send_command@D2,c
  6987  001E28  0E00               	movlw	0
  6988  001E2A  6E18               	movwf	LCD_send_command@D1,c
  6989  001E2C  0E01               	movlw	1
  6990  001E2E  6E19               	movwf	LCD_send_command@D0,c
  6991  001E30  0E01               	movlw	1
  6992  001E32  EC9F  F011         	call	_LCD_send_command
  6993                           
  6994                           ;src\LCD_44780.c: 124: LCD_send_command(0,1,0,0);
  6995  001E36  0E01               	movlw	1
  6996  001E38  6E17               	movwf	LCD_send_command@D2,c
  6997  001E3A  0E00               	movlw	0
  6998  001E3C  6E18               	movwf	LCD_send_command@D1,c
  6999  001E3E  0E00               	movlw	0
  7000  001E40  6E19               	movwf	LCD_send_command@D0,c
  7001  001E42  0E00               	movlw	0
  7002  001E44  EC9F  F011         	call	_LCD_send_command
  7003                           
  7004                           ;src\LCD_44780.c: 125: break;
  7005  001E48  D021               	goto	l84
  7006  001E4A                     l2788:
  7007  001E4A  0E01               	movlw	1
  7008  001E4C  6E17               	movwf	LCD_send_command@D2,c
  7009  001E4E  0E00               	movlw	0
  7010  001E50  6E18               	movwf	LCD_send_command@D1,c
  7011  001E52  0E01               	movlw	1
  7012  001E54  6E19               	movwf	LCD_send_command@D0,c
  7013  001E56  0E01               	movlw	1
  7014  001E58  EC9F  F011         	call	_LCD_send_command
  7015                           
  7016                           ;src\LCD_44780.c: 128: LCD_send_command(0,1,0,0);
  7017  001E5C  0E01               	movlw	1
  7018  001E5E  6E17               	movwf	LCD_send_command@D2,c
  7019  001E60  0E00               	movlw	0
  7020  001E62  6E18               	movwf	LCD_send_command@D1,c
  7021  001E64  0E00               	movlw	0
  7022  001E66  6E19               	movwf	LCD_send_command@D0,c
  7023  001E68  0E00               	movlw	0
  7024  001E6A  EC9F  F011         	call	_LCD_send_command
  7025                           
  7026                           ;src\LCD_44780.c: 129: }
  7027  001E6E  D00E               	goto	l84
  7028  001E70                     l2790:
  7029  001E70  501B               	movf	LCD_goto_line@line,w,c
  7030                           
  7031                           ; Switch size 1, requested type "space"
  7032                           ; Number of cases is 4, Range of values is 1 to 4
  7033                           ; switch strategies available:
  7034                           ; Name         Instructions Cycles
  7035                           ; simple_byte           13     7 (average)
  7036                           ;	Chosen strategy is simple_byte
  7037  001E72  0A01               	xorlw	1	; case 1
  7038  001E74  B4D8               	btfsc	status,2,c
  7039  001E76  D7B0               	goto	l2782
  7040  001E78  0A03               	xorlw	3	; case 2
  7041  001E7A  B4D8               	btfsc	status,2,c
  7042  001E7C  D7C0               	goto	l2784
  7043  001E7E  0A01               	xorlw	1	; case 3
  7044  001E80  B4D8               	btfsc	status,2,c
  7045  001E82  D7D0               	goto	l2786
  7046  001E84  0A07               	xorlw	7	; case 4
  7047  001E86  B4D8               	btfsc	status,2,c
  7048  001E88  D7E0               	goto	l2788
  7049  001E8A  D000               	goto	l84
  7050  001E8C                     l84:
  7051  001E8C  0012               	return		;funcret
  7052  001E8E                     __end_of_LCD_goto_line:
  7053                           	opt stack 0
  7054                           tblptru	equ	0xFF8
  7055                           tblptrh	equ	0xFF7
  7056                           tblptrl	equ	0xFF6
  7057                           tablat	equ	0xFF5
  7058                           prodh	equ	0xFF4
  7059                           prodl	equ	0xFF3
  7060                           intcon	equ	0xFF2
  7061                           postinc0	equ	0xFEE
  7062                           wreg	equ	0xFE8
  7063                           indf2	equ	0xFDF
  7064                           postinc2	equ	0xFDE
  7065                           postdec2	equ	0xFDD
  7066                           fsr2h	equ	0xFDA
  7067                           fsr2l	equ	0xFD9
  7068                           status	equ	0xFD8
  7069                           
  7070 ;; *************** function _LCD_send_command *****************
  7071 ;; Defined at:
  7072 ;;		line 61 in file "C:/Users/simone/Desktop/LaurTec_PIC_libraries_v_3.3.1 - Copia/src\LCD_44780.c"
  7073 ;; Parameters:    Size  Location     Type
  7074 ;;  D3              1    wreg     unsigned char 
  7075 ;;  D2              1   22[COMRAM] unsigned char 
  7076 ;;  D1              1   23[COMRAM] unsigned char 
  7077 ;;  D0              1   24[COMRAM] unsigned char 
  7078 ;; Auto vars:     Size  Location     Type
  7079 ;;  D3              1   25[COMRAM] unsigned char 
  7080 ;; Return value:  Size  Location     Type
  7081 ;;		None               void
  7082 ;; Registers used:
  7083 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7084 ;; Tracked objects:
  7085 ;;		On entry : 0/0
  7086 ;;		On exit  : 0/0
  7087 ;;		Unchanged: 0/0
  7088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7089 ;;      Params:         3       0       0       0
  7090 ;;      Locals:         1       0       0       0
  7091 ;;      Temps:          0       0       0       0
  7092 ;;      Totals:         4       0       0       0
  7093 ;;Total ram usage:        4 bytes
  7094 ;; Hardware stack levels used:    1
  7095 ;; Hardware stack levels required when called:    3
  7096 ;; This function calls:
  7097 ;;		_LCD_enable_pulse
  7098 ;; This function is called by:
  7099 ;;		_LCD_goto_line
  7100 ;;		_LCD_write_char
  7101 ;;		_LCD_clear
  7102 ;;		_LCD_cursor
  7103 ;;		_LCD_initialize
  7104 ;;		_LCD_home
  7105 ;;		_LCD_shift
  7106 ;;		_LCD_shift_cursor
  7107 ;; This function uses a non-reentrant model
  7108 ;;
  7109                           
  7110                           	psect	text32
  7111  00233E                     __ptext32:
  7112                           	opt stack 0
  7113  00233E                     _LCD_send_command:
  7114                           	opt stack 24
  7115                           
  7116                           ;incstack = 0
  7117                           ;LCD_send_command@D3 stored from wreg
  7118  00233E  6E1A               	movwf	LCD_send_command@D3,c
  7119                           
  7120                           ;src\LCD_44780.c: 63: LATDbits.LATD3 = D0;
  7121  002340  B019               	btfsc	LCD_send_command@D0,0,c
  7122  002342  D002               	bra	u1595
  7123  002344  968C               	bcf	3980,3,c	;volatile
  7124  002346  D001               	bra	u1596
  7125  002348                     u1595:
  7126  002348  868C               	bsf	3980,3,c	;volatile
  7127  00234A                     u1596:
  7128                           
  7129                           ;src\LCD_44780.c: 64: LATDbits.LATD4 = D1;
  7130  00234A  B018               	btfsc	LCD_send_command@D1,0,c
  7131  00234C  D002               	bra	u1605
  7132  00234E  988C               	bcf	3980,4,c	;volatile
  7133  002350  D001               	bra	u1606
  7134  002352                     u1605:
  7135  002352  888C               	bsf	3980,4,c	;volatile
  7136  002354                     u1606:
  7137                           
  7138                           ;src\LCD_44780.c: 65: LATDbits.LATD5 = D2;
  7139  002354  B017               	btfsc	LCD_send_command@D2,0,c
  7140  002356  D002               	bra	u1615
  7141  002358  9A8C               	bcf	3980,5,c	;volatile
  7142  00235A  D001               	bra	u1616
  7143  00235C                     u1615:
  7144  00235C  8A8C               	bsf	3980,5,c	;volatile
  7145  00235E                     u1616:
  7146                           
  7147                           ;src\LCD_44780.c: 66: LATDbits.LATD6 = D3;
  7148  00235E  B01A               	btfsc	LCD_send_command@D3,0,c
  7149  002360  D002               	bra	u1625
  7150  002362  9C8C               	bcf	3980,6,c	;volatile
  7151  002364  D001               	bra	u1626
  7152  002366                     u1625:
  7153  002366  8C8C               	bsf	3980,6,c	;volatile
  7154  002368                     u1626:
  7155                           
  7156                           ;src\LCD_44780.c: 67: LCD_enable_pulse ();
  7157  002368  EC51  F012         	call	_LCD_enable_pulse	;wreg free
  7158  00236C  0012               	return		;funcret
  7159  00236E                     __end_of_LCD_send_command:
  7160                           	opt stack 0
  7161                           tblptru	equ	0xFF8
  7162                           tblptrh	equ	0xFF7
  7163                           tblptrl	equ	0xFF6
  7164                           tablat	equ	0xFF5
  7165                           prodh	equ	0xFF4
  7166                           prodl	equ	0xFF3
  7167                           intcon	equ	0xFF2
  7168                           postinc0	equ	0xFEE
  7169                           wreg	equ	0xFE8
  7170                           indf2	equ	0xFDF
  7171                           postinc2	equ	0xFDE
  7172                           postdec2	equ	0xFDD
  7173                           fsr2h	equ	0xFDA
  7174                           fsr2l	equ	0xFD9
  7175                           status	equ	0xFD8
  7176                           
  7177 ;; *************** function _LCD_enable_pulse *****************
  7178 ;; Defined at:
  7179 ;;		line 49 in file "C:/Users/simone/Desktop/LaurTec_PIC_libraries_v_3.3.1 - Copia/src\LCD_44780.c"
  7180 ;; Parameters:    Size  Location     Type
  7181 ;;		None
  7182 ;; Auto vars:     Size  Location     Type
  7183 ;;		None
  7184 ;; Return value:  Size  Location     Type
  7185 ;;		None               void
  7186 ;; Registers used:
  7187 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7188 ;; Tracked objects:
  7189 ;;		On entry : 0/0
  7190 ;;		On exit  : 0/0
  7191 ;;		Unchanged: 0/0
  7192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7193 ;;      Params:         0       0       0       0
  7194 ;;      Locals:         0       0       0       0
  7195 ;;      Temps:          0       0       0       0
  7196 ;;      Totals:         0       0       0       0
  7197 ;;Total ram usage:        0 bytes
  7198 ;; Hardware stack levels used:    1
  7199 ;; Hardware stack levels required when called:    2
  7200 ;; This function calls:
  7201 ;;		_delay_ms
  7202 ;; This function is called by:
  7203 ;;		_LCD_send_command
  7204 ;; This function uses a non-reentrant model
  7205 ;;
  7206                           
  7207                           	psect	text33
  7208  0024A2                     __ptext33:
  7209                           	opt stack 0
  7210  0024A2                     _LCD_enable_pulse:
  7211                           	opt stack 24
  7212                           
  7213                           ;src\LCD_44780.c: 51: LATDbits.LATD2 = 1;
  7214                           
  7215                           ;incstack = 0
  7216  0024A2  848C               	bsf	3980,2,c	;volatile
  7217                           
  7218                           ;src\LCD_44780.c: 52: delay_ms (1);
  7219  0024A4  0E00               	movlw	0
  7220  0024A6  6E16               	movwf	delay_ms@value_ms+1,c
  7221  0024A8  0E01               	movlw	1
  7222  0024AA  6E15               	movwf	delay_ms@value_ms,c
  7223  0024AC  EC83  F011         	call	_delay_ms	;wreg free
  7224                           
  7225                           ;src\LCD_44780.c: 53: LATDbits.LATD2 = 0;
  7226  0024B0  948C               	bcf	3980,2,c	;volatile
  7227                           
  7228                           ;src\LCD_44780.c: 54: delay_ms (1);
  7229  0024B2  0E00               	movlw	0
  7230  0024B4  6E16               	movwf	delay_ms@value_ms+1,c
  7231  0024B6  0E01               	movlw	1
  7232  0024B8  6E15               	movwf	delay_ms@value_ms,c
  7233  0024BA  EC83  F011         	call	_delay_ms	;wreg free
  7234  0024BE  0012               	return		;funcret
  7235  0024C0                     __end_of_LCD_enable_pulse:
  7236                           	opt stack 0
  7237                           tblptru	equ	0xFF8
  7238                           tblptrh	equ	0xFF7
  7239                           tblptrl	equ	0xFF6
  7240                           tablat	equ	0xFF5
  7241                           prodh	equ	0xFF4
  7242                           prodl	equ	0xFF3
  7243                           intcon	equ	0xFF2
  7244                           postinc0	equ	0xFEE
  7245                           wreg	equ	0xFE8
  7246                           indf2	equ	0xFDF
  7247                           postinc2	equ	0xFDE
  7248                           postdec2	equ	0xFDD
  7249                           fsr2h	equ	0xFDA
  7250                           fsr2l	equ	0xFD9
  7251                           status	equ	0xFD8
  7252                           
  7253 ;; *************** function _delay_ms *****************
  7254 ;; Defined at:
  7255 ;;		line 61 in file "C:/Users/simone/Desktop/LaurTec_PIC_libraries_v_3.3.1 - Copia/src\delay.c"
  7256 ;; Parameters:    Size  Location     Type
  7257 ;;  value_ms        2   20[COMRAM] unsigned int 
  7258 ;; Auto vars:     Size  Location     Type
  7259 ;;		None
  7260 ;; Return value:  Size  Location     Type
  7261 ;;		None               void
  7262 ;; Registers used:
  7263 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7264 ;; Tracked objects:
  7265 ;;		On entry : 0/0
  7266 ;;		On exit  : 0/0
  7267 ;;		Unchanged: 0/0
  7268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7269 ;;      Params:         2       0       0       0
  7270 ;;      Locals:         0       0       0       0
  7271 ;;      Temps:          0       0       0       0
  7272 ;;      Totals:         2       0       0       0
  7273 ;;Total ram usage:        2 bytes
  7274 ;; Hardware stack levels used:    1
  7275 ;; Hardware stack levels required when called:    1
  7276 ;; This function calls:
  7277 ;;		___wmul
  7278 ;; This function is called by:
  7279 ;;		_LCD_enable_pulse
  7280 ;;		_LCD_initialize
  7281 ;;		_main
  7282 ;;		_read_adc
  7283 ;;		_inizializzazione
  7284 ;;		_delay_s
  7285 ;; This function uses a non-reentrant model
  7286 ;;
  7287                           
  7288                           	psect	text34
  7289  002306                     __ptext34:
  7290                           	opt stack 0
  7291  002306                     _delay_ms:
  7292                           	opt stack 28
  7293                           
  7294                           ;src\delay.c: 73: clock_counter_reference = value_ms * delay_quartz_frequency_value;
  7295                           
  7296                           ;incstack = 0
  7297  002306  C05F  F00F         	movff	_delay_quartz_frequency_value,___wmul@multiplier	;volatile
  7298  00230A  6A10               	clrf	___wmul@multiplier+1,c
  7299  00230C  C015  F011         	movff	delay_ms@value_ms,___wmul@multiplicand
  7300  002310  C016  F012         	movff	delay_ms@value_ms+1,___wmul@multiplicand+1
  7301  002314  ECE1  F011         	call	___wmul	;wreg free
  7302  002318  C00F  F089         	movff	?___wmul,_clock_counter_reference	;volatile
  7303  00231C  C010  F08A         	movff	?___wmul+1,_clock_counter_reference+1	;volatile
  7304                           
  7305                           ;src\delay.c: 75: while (clock_counter_reference) {
  7306  002320  D007               	goto	l134
  7307  002322                     l2084:
  7308                           
  7309                           ;src\delay.c: 85: _delay(240);
  7310  002322  0E50               	movlw	80
  7311  002324                     u3257:
  7312  002324  2EE8               	decfsz	wreg,f,c
  7313  002326  D7FE               	goto	u3257
  7314                           
  7315                           ;src\delay.c: 88: clock_counter_reference--;
  7316  002328  0100               	movlb	0	; () banked
  7317  00232A  0789               	decf	_clock_counter_reference& (0+255),f,b	;volatile
  7318  00232C  A0D8               	btfss	status,0,c
  7319  00232E  078A               	decf	(_clock_counter_reference+1)& (0+255),f,b	;volatile
  7320  002330                     l134:
  7321  002330  0100               	movlb	0	; () banked
  7322  002332  5189               	movf	_clock_counter_reference& (0+255),w,b	;volatile
  7323  002334  0100               	movlb	0	; () banked
  7324  002336  118A               	iorwf	(_clock_counter_reference+1)& (0+255),w,b	;volatile
  7325  002338  A4D8               	btfss	status,2,c
  7326  00233A  D7F3               	goto	l2084
  7327                           
  7328                           ; BSR set to: 0
  7329                           
  7330                           ; BSR set to: 0
  7331  00233C  0012               	return		;funcret
  7332  00233E                     __end_of_delay_ms:
  7333                           	opt stack 0
  7334                           tblptru	equ	0xFF8
  7335                           tblptrh	equ	0xFF7
  7336                           tblptrl	equ	0xFF6
  7337                           tablat	equ	0xFF5
  7338                           prodh	equ	0xFF4
  7339                           prodl	equ	0xFF3
  7340                           intcon	equ	0xFF2
  7341                           postinc0	equ	0xFEE
  7342                           wreg	equ	0xFE8
  7343                           indf2	equ	0xFDF
  7344                           postinc2	equ	0xFDE
  7345                           postdec2	equ	0xFDD
  7346                           fsr2h	equ	0xFDA
  7347                           fsr2l	equ	0xFD9
  7348                           status	equ	0xFD8
  7349                           
  7350 ;; *************** function ___wmul *****************
  7351 ;; Defined at:
  7352 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  7353 ;; Parameters:    Size  Location     Type
  7354 ;;  multiplier      2   14[COMRAM] unsigned int 
  7355 ;;  multiplicand    2   16[COMRAM] unsigned int 
  7356 ;; Auto vars:     Size  Location     Type
  7357 ;;  product         2   18[COMRAM] unsigned int 
  7358 ;; Return value:  Size  Location     Type
  7359 ;;                  2   14[COMRAM] unsigned int 
  7360 ;; Registers used:
  7361 ;;		wreg, status,2, status,0, prodl, prodh
  7362 ;; Tracked objects:
  7363 ;;		On entry : 0/0
  7364 ;;		On exit  : 0/0
  7365 ;;		Unchanged: 0/0
  7366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7367 ;;      Params:         4       0       0       0
  7368 ;;      Locals:         2       0       0       0
  7369 ;;      Temps:          0       0       0       0
  7370 ;;      Totals:         6       0       0       0
  7371 ;;Total ram usage:        6 bytes
  7372 ;; Hardware stack levels used:    1
  7373 ;; This function calls:
  7374 ;;		Nothing
  7375 ;; This function is called by:
  7376 ;;		_delay_ms
  7377 ;;		_fround
  7378 ;;		_scale
  7379 ;;		_sprintf
  7380 ;; This function uses a non-reentrant model
  7381 ;;
  7382                           
  7383                           	psect	text35
  7384  0023C2                     __ptext35:
  7385                           	opt stack 0
  7386  0023C2                     ___wmul:
  7387                           	opt stack 28
  7388                           
  7389                           ; BSR set to: 0
  7390                           ;incstack = 0
  7391  0023C2  500F               	movf	___wmul@multiplier,w,c
  7392  0023C4  0211               	mulwf	___wmul@multiplicand,c
  7393  0023C6  CFF3 F013          	movff	prodl,___wmul@product
  7394  0023CA  CFF4 F014          	movff	prodh,___wmul@product+1
  7395  0023CE  500F               	movf	___wmul@multiplier,w,c
  7396  0023D0  0212               	mulwf	___wmul@multiplicand+1,c
  7397  0023D2  50F3               	movf	prodl,w,c
  7398  0023D4  2614               	addwf	___wmul@product+1,f,c
  7399  0023D6  5010               	movf	___wmul@multiplier+1,w,c
  7400  0023D8  0211               	mulwf	___wmul@multiplicand,c
  7401  0023DA  50F3               	movf	prodl,w,c
  7402  0023DC  2614               	addwf	___wmul@product+1,f,c
  7403  0023DE  C013  F00F         	movff	___wmul@product,?___wmul
  7404  0023E2  C014  F010         	movff	___wmul@product+1,?___wmul+1
  7405  0023E6  D000               	goto	l288
  7406  0023E8                     l288:
  7407  0023E8  0012               	return		;funcret
  7408  0023EA                     __end_of___wmul:
  7409                           	opt stack 0
  7410                           tblptru	equ	0xFF8
  7411                           tblptrh	equ	0xFF7
  7412                           tblptrl	equ	0xFF6
  7413                           tablat	equ	0xFF5
  7414                           prodh	equ	0xFF4
  7415                           prodl	equ	0xFF3
  7416                           intcon	equ	0xFF2
  7417                           postinc0	equ	0xFEE
  7418                           wreg	equ	0xFE8
  7419                           indf2	equ	0xFDF
  7420                           postinc2	equ	0xFDE
  7421                           postdec2	equ	0xFDD
  7422                           fsr2h	equ	0xFDA
  7423                           fsr2l	equ	0xFD9
  7424                           status	equ	0xFD8
  7425                           tblptru	equ	0xFF8
  7426                           tblptrh	equ	0xFF7
  7427                           tblptrl	equ	0xFF6
  7428                           tablat	equ	0xFF5
  7429                           prodh	equ	0xFF4
  7430                           prodl	equ	0xFF3
  7431                           intcon	equ	0xFF2
  7432                           postinc0	equ	0xFEE
  7433                           wreg	equ	0xFE8
  7434                           indf2	equ	0xFDF
  7435                           postinc2	equ	0xFDE
  7436                           postdec2	equ	0xFDD
  7437                           fsr2h	equ	0xFDA
  7438                           fsr2l	equ	0xFD9
  7439                           status	equ	0xFD8
  7440                           
  7441                           	psect	rparam
  7442  0000                     tblptru	equ	0xFF8
  7443                           tblptrh	equ	0xFF7
  7444                           tblptrl	equ	0xFF6
  7445                           tablat	equ	0xFF5
  7446                           prodh	equ	0xFF4
  7447                           prodl	equ	0xFF3
  7448                           intcon	equ	0xFF2
  7449                           postinc0	equ	0xFEE
  7450                           wreg	equ	0xFE8
  7451                           indf2	equ	0xFDF
  7452                           postinc2	equ	0xFDE
  7453                           postdec2	equ	0xFDD
  7454                           fsr2h	equ	0xFDA
  7455                           fsr2l	equ	0xFD9
  7456                           status	equ	0xFD8


Data Sizes:
    Strings     65
    Constant    118
    Data        4
    BSS         36
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     76      95
    BANK0           160     23      49
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    sp__utoa	PTR unsigned char  size(2) Largest target is 6
		 -> LCD_write_integer@convertedInt(COMRAM[6]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_3(CODE[8]), STR_2(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 8
		 -> str(BANK0[8]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 6
		 -> LCD_write_integer@convertedInt(COMRAM[6]), 

    LCD_write_string@buffer	PTR unsigned char  size(2) Largest target is 8
		 -> str(BANK0[8]), LCD_write_integer@convertedInt(COMRAM[6]), 

    LCD_write_message@buffer	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_5(CODE[16]), STR_4(CODE[17]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _read_adc->___ftdiv
    ___lwtoft->___ftpack
    ___ftmul->___wmul
    ___ftdiv->___ftmul
    _inizializzazione->_LCD_write_message
    _LCD_write_message->_LCD_write_char
    _LCD_initialize->_LCD_cursor
    _LCD_cursor->_LCD_send_command
    _LCD_clear->_LCD_send_command
    _LCD_write_string->_LCD_write_char
    _LCD_write_char->_LCD_send_command
    _LCD_goto_line->_LCD_send_command
    _LCD_enable_pulse->_delay_ms
    _delay_ms->___wmul
    ___wmul->___awdiv

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  139461
                      _LCD_goto_line
                  _LCD_write_message
                   _LCD_write_string
                            ___ftdiv
                             ___ftge
                           _delay_ms
                   _delay_set_quartz
                   _inizializzazione
                           _read_adc
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   44477
                                             63 COMRAM    13     6      7
                                              0 BANK0     23    23      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   10565
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   10367
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1580
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2242
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     543
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     418
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     444
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3604
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3307
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1032
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _read_adc                                             3     3      0   13298
                                             50 COMRAM     3     3      0
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2259
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4585
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    3131
                                             35 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _inizializzazione                                     0     0      0   44833
                      _LCD_backlight
                     _LCD_initialize
                  _LCD_write_message
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _LCD_write_message                                    2     0      2   10018
                                             31 COMRAM     2     0      2
                     _LCD_write_char
 ---------------------------------------------------------------------------------
 (2) _LCD_initialize                                       1     1      0   31604
                                             28 COMRAM     1     1      0
                          _LCD_clear
                         _LCD_cursor
                   _LCD_send_command
                           _delay_ms
                   _delay_set_quartz
 ---------------------------------------------------------------------------------
 (3) _delay_set_quartz                                     1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _LCD_cursor                                           2     1      1    9529
                                             26 COMRAM     2     1      1
                   _LCD_send_command
 ---------------------------------------------------------------------------------
 (3) _LCD_clear                                            0     0      0    9421
                   _LCD_send_command
 ---------------------------------------------------------------------------------
 (2) _LCD_backlight                                        1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCD_write_string                                     2     0      2   10018
                                             31 COMRAM     2     0      2
                     _LCD_write_char
 ---------------------------------------------------------------------------------
 (3) _LCD_write_char                                       5     5      0    9781
                                             26 COMRAM     5     5      0
                   _LCD_send_command
 ---------------------------------------------------------------------------------
 (1) _LCD_goto_line                                        1     1      0    9443
                                             26 COMRAM     1     1      0
                   _LCD_send_command
 ---------------------------------------------------------------------------------
 (4) _LCD_send_command                                     4     1      3    9421
                                             22 COMRAM     4     1      3
                   _LCD_enable_pulse
 ---------------------------------------------------------------------------------
 (5) _LCD_enable_pulse                                     0     0      0    3189
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             2     0      2    3189
                                             20 COMRAM     2     0      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2463
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_goto_line
     _LCD_send_command
       _LCD_enable_pulse
         _delay_ms
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _LCD_write_message
     _LCD_write_char
       _LCD_send_command
         _LCD_enable_pulse
           _delay_ms
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   _LCD_write_string
     _LCD_write_char
       _LCD_send_command
         _LCD_enable_pulse
           _delay_ms
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
   ___ftdiv
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftpack (ARG)
   ___ftge
   _delay_ms
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   _delay_set_quartz
   _inizializzazione
     _LCD_backlight
     _LCD_initialize
       _LCD_clear
         _LCD_send_command
           _LCD_enable_pulse
             _delay_ms
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       _LCD_cursor
         _LCD_send_command
           _LCD_enable_pulse
             _delay_ms
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
       _LCD_send_command
         _LCD_enable_pulse
           _delay_ms
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _delay_ms
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _delay_set_quartz
     _LCD_write_message
       _LCD_write_char
         _LCD_send_command
           _LCD_enable_pulse
             _delay_ms
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
     _delay_ms
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _read_adc
     ___ftdiv
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___lwtoft
       ___ftpack
     _delay_ms
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     17      31       4       30.6%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     4C      5F       1      100.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      90       9        0.0%
DATA                 0      0      90      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Jul 20 20:46:20 2016

     __size_of_delay_set_quartz 0008                              l84 1E8C                    ___awdiv@sign 000C  
           ___wmul@multiplicand 0011                     __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000  
                  __CFG_CP1$OFF 000000                     __CFG_OSC$HS 000000                    ___ftadd@exp1 0039  
                  ___ftadd@exp2 0038                    ___ftadd@sign 0037                             l212 120C  
                           l134 2330                             l219 0FC8                             l270 096E  
                           l176 15E0                             l186 13F6                             l613 1DD2  
                           l285 0BE8                             l702 1932                             l711 1FB8  
                           l288 23E8                             l624 1DAA                             l481 1F22  
                           l572 1A4C                             l717 1B44                             l653 1252  
                           l581 1A3C                             l654 13D0                             l734 2304  
                           l806 2126                             l494 20C6                             l727 2472  
                           l657 127C                             l753 24A0                             l738 1C2A  
                           l826 226E                             l668 133E                             l685 1D0C  
                           l677 135A                             l693 1942                             l695 18AA  
                           l688 1CD8                             l696 18D2                             l796 2034  
                           l886 240E                    __CFG_CPB$OFF 000000                    __CFG_CPD$OFF 000000  
                   ?_LCD_cursor 001B                             _ore 005B                             _str 0081  
                  ___awmod@sign 0006                             prod 000FF3                             wreg 000FE8  
                  __CFG_LVP$OFF 000000                    ___ftdiv@cntr 002D          __size_of_LCD_goto_line 00BA  
                  ___ftdiv@sign 0032                    __CFG_WDT$OFF 000000                            l2110 1D3A  
                          l2120 1D9E                            l2112 1D5A                            l2104 1D1E  
                          l2200 12FA                            l2210 1332                            l2202 1302  
                          l2132 1DC4                            l2116 1D72                            l2108 1D2E  
                          l2300 1ED6                            l3020 0974                            l2126 1DB2  
                          l2118 1D92                            l2310 1EFC                            l2302 1EDE  
                          l3014 093C                            l3006 0912                            l2216 1378  
                          l2208 1326                            l3032 09F6                            l3016 0950  
                          l3008 0922                            l2242 1A94                            l2226 13AA  
                          l2314 1F08                            l2330 205C                            l3050 0B06  
                          l3042 0ADC                            l2084 2322                            l2260 1ADA  
                          l2236 1A6C                            l2180 1296                            l2340 2082  
                          l2420 1108                            l3044 0AEC                            l3028 09A4  
                          l3052 0B16                            l2270 1B08                            l2238 1A86  
                          l2190 12BE                            l2174 128A                            l2318 1F18  
                          l2342 208A                            l2350 20AC                            l2334 206A  
                          l3070 0BB4                            l3062 0B62                            l2360 2370  
                          l2264 1AF0                            l2256 1AC8                            l2168 1260  
                          l3072 0BBA                            l2610 1C72                            l2274 1B1E  
                          l2266 1AF6                            l2530 190A                            l2354 20BC  
                          l2346 20A0                            l2338 2078                            l2442 0D16  
                          l3066 0B90                            l3058 0B3E                            l3074 0BDA  
                          l3170 15DA                            l2364 2386                            l2604 1C4A  
                          l2196 12E2                            l2524 18F4                            l2516 18E0  
                          l2292 1EB6                            l2428 11CC                            l2460 0EF2  
                          l2452 0DCE                            l2630 1CB2                            l2606 1C64  
                          l2198 12EE                            l2710 1BF6                            l2702 1BCE  
                          l2550 1964                            l2534 191E                            l2286 1EA4  
                          l2640 1CE6                            l2704 1BD4                            l2712 1C00  
                          l2544 1954                            l2536 192C                            l2528 1904  
                          l2448 0DBE                            l2730 1FF2                            l2298 1ECC  
                          l2466 0FA4                            l2660 1F88                            l2716 1C18  
                          l2708 1BE8                            l2572 19DA                            l2564 19A8  
                          l3196 167C                            l2726 1FDC                            l2750 20F0  
                          l2590 1A14                            l2494 1870                            l2478 2498  
                          l2910 04C0                            l2902 0480                            l2656 1F56  
                          l2648 22DA                            l2680 1B64                            l2728 1FEA  
                          l2760 2216                            l2584 19FE                            l2576 19EA  
                          l2488 1852                            l2920 0508                            l2904 04A4  
                          l2842 13D6                            l2666 1FB4                            l2738 2024  
                          l2754 2116                            l2746 20DA                            l2762 2224  
                          l2594 1A28                            l2748 20E8                            l2596 1A36  
                          l2588 1A0E                            l2782 1DD8                            l2790 1E70  
                          l2846 13DE                            l2950 0652                            l2784 1DFE  
                          l2960 06E0                            l2952 0684                            l2944 0614  
                          l2936 05AC                            l2880 03E0                            l2786 1E24  
                          l2794 2438                            l2858 1466                            l2698 1BBE  
                          l2970 0756                            l2954 069A                            l2874 03C8  
                          l2788 1E4A                            l2980 0806                            l2972 0784  
                          l2964 0706                            l2948 063C                            l2892 044C  
                          l2798 244C                            l2966 0712                            l2974 0798  
                          l2894 0464                            l2992 0854                            l2984 0814  
                          l2888 0410                            l2978 0800                            l2898 0476  
                          l2996 0878                            l2988 084E                            l2998 087E  
                          STR_1 0377                            STR_2 03B1                            STR_3 03A9  
                          STR_4 0388                            STR_5 0399                            u2115 24CA  
                          u2211 1844                            u2116 24CC                            _LATA 000F89  
                          _LATB 000F8A                            u2231 1862                            _LATC 000F8B  
                          _LATD 000F8C                            u1605 2352                            u1606 2354  
                          u1615 235C                            u1711 121E                            u1616 235E  
                          u1625 2366                            u1721 1232                            u1626 2368  
                          u2371 1C3C                            u2391 1C5A                            u2471 1B56  
                          u3257 2324                            u1921 1A5E                            u2490 1B82  
                          u1595 2348                            u1596 234A                            u2900 0966  
                          u2740 0548                            u1941 1A7C                            u2495 1B7A  
                          u2745 053E                            _main 1594                    ___ftpack@arg 0001  
                  ___ftpack@exp 0004       __size_of_LCD_send_command 0030                            fsr2h 000FDA  
                          indf2 000FDF                            fsr2l 000FD9                            prodh 000FF4  
                          prodl 000FF3                            start 0000                   __CFG_IESO$OFF 000000  
            __size_of_LCD_clear 0026                    _sprintf$1139 0060                   __CFG_MCLRE$ON 000000  
                  ___ftmul@cntr 0022                    ___param_bank 000010                    ___ftmul@sign 0023  
      __end_of_LCD_enable_pulse 24C0                   _LCD_backlight 24C0                    ___fttol@exp1 0039  
                  ___fttol@lval 0035         __size_of_LCD_initialize 011A                           ?_main 0001  
               __end_of___awdiv 1F24                 __end_of___ftadd 13D2                 __end_of___awmod 20C8  
               __end_of___ftdiv 1D0E                 __end_of___ftneg 2480                 __end_of___lldiv 2046  
               __end_of___ftmul 1B46                           _T0CON 000FD5                 ___awdiv@divisor 0009  
               __end_of___llmod 2138                 __end_of___ftsub 2306                 __end_of___fttol 1C2C  
               ___awdiv@counter 000B                           _TMR0H 000FD7                           _TMR0L 000FD6  
                         _TRISA 000F92                           _TRISB 000F93                           _TRISC 000F94  
                         _TRISD 000F95                   __CFG_PWRT$OFF 000000                   __CFG_WRT0$OFF 000000  
                 __CFG_WRT1$OFF 000000                    ___lltoft@exp 0011                  __CFG_EBTR0$OFF 000000  
                __CFG_FCMEN$OFF 000000                  __CFG_EBTR1$OFF 000000                   __CFG_WRTB$OFF 000000  
                 __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000                  __CFG_EBTRB$OFF 000000  
               __end_of_dpowers 0329                           _scale 0BEA                 __end_of_isdigit 24A2  
                 ___ftpack@sign 0005                           _tempo 007D                           tablat 000FF5  
                         status 000FD8                 __end_of_sprintf 0BEA                _inizializzazione 21A8  
           __size_of_LCD_cursor 0028                 __initialization 2270                  ?_LCD_backlight 0001  
                  __end_of_main 171A                   _LCD_goto_line 1DD4               ?_LCD_write_string 0020  
                        ??_main 004D                   ___fttol@sign1 0034                   __activetblptr 000002  
            ??_LCD_write_string 0022            __size_of__tdiv_to_l_ 0110               __end_of_LCD_clear 2436  
        LCD_write_string@buffer 0020                          _ADCON0 000FC2                          _ADCON1 000FC1  
                        _ADCON2 000FC0                ___llmod@dividend 0001                          ?_scale 0024  
                        _ADRESH 000FC4                          _ADRESL 000FC3                ___awdiv@dividend 0007  
               __CFG_BBSIZ$1024 000000                __end_of___ftpack 1DD4                __end_of___lltoft 2270  
              __end_of___lwtoft 2410                __end_of_delay_ms 233E                  __CFG_XINST$OFF 000000  
              __end_of__powers_ 0377                  ?_LCD_goto_line 0001                          ___ftge 1F24  
              _delay_set_quartz 24CE                          ___wmul 23C2                       ??___awdiv 000B  
                     ??___ftadd 0034                  __CFG_STVREN$ON 000000                       ??___awmod 0005  
                     ??___ftdiv 002A                       ??___ftneg 0004                       ??___lldiv 0009  
                     ??___ftmul 001B                       ??___llmod 0009                       ??___ftsub 0040  
                     ??___fttol 002F         __size_of_LCD_write_char 0070                __end_of_read_adc 1594  
                        _fround 0FCA  LCD_initialize@quartz_frequency 001D                          clear_0 2276  
                        clear_1 2282                ___awdiv@quotient 000D                          _minuti 0059  
               ___awmod@divisor 0003                 ___awmod@counter 0005           ___ftmul@f3_as_product 001F  
               __CFG_BOREN$BOHW 000000                    __pdataCOMRAM 005F                       ??_isdigit 0001  
                  __mediumconst 0000                          tblptrh 000FF7                          tblptrl 000FF6  
                        tblptru 000FF8                       ??_sprintf 0047                      __accesstop 0060  
       __end_of__initialization 22B8                 __CFG_PBADEN$OFF 000000                _LCD_send_command 233E  
                    ___ftadd@f1 002E                      ___ftadd@f2 0031                      ___ftge@ff1 0001  
                    ___ftge@ff2 0004                   ___rparam_used 000001                      ___ftdiv@f1 0024  
                    ___ftdiv@f2 0027                      ___ftdiv@f3 002E                 ??_LCD_backlight 0001  
                    ___ftneg@f1 0001                      ___ftmul@f1 0015                      ___ftmul@f2 0018  
                    ___ftsub@f1 003A                      ___ftsub@f2 003D                      ___fttol@f1 002B  
                __pcstackCOMRAM 0001                    __pidataBANK0 24D6                      ___lltoft@c 0009  
                 __end_of_scale 0FCA                  _LCD_initialize 171A               _LCD_write_message 236E  
                    ___lwtoft@c 0009              ?_LCD_write_message 0020                      __div_to_l_ 1944  
                  ??_LCD_cursor 001C                 __div_to_l_@exp1 000C             ??_LCD_write_message 0022  
               __div_to_l_@cntr 000B                         ??_scale 0027                 __div_to_l_@quot 0007  
                    __pbssBANK0 0077                   __div_to_l_@f1 0001                   __div_to_l_@f2 0004  
               ??_LCD_goto_line 001B              __end_of_LCD_cursor 23C2          __end_of_LCD_initialize 1834  
                       ?___ftge 0001                         ?___wmul 000F       __end_of_LCD_write_message 239A  
             ?_LCD_enable_pulse 0001                         ?_fround 0024              ??_LCD_enable_pulse 0017  
                     ?___ftpack 0001                       ?___lltoft 0009                       ?___lwtoft 0009  
      __end_of_inizializzazione 2210                LCD_cursor@active 001C                       ?_delay_ms 0015  
                     ?_read_adc 0001               __end_of__npowers_ 0350                         __Hparam 0000  
                    _scale$1138 0027                         __Lparam 0000                delay_ms@value_ms 0015  
               ?_LCD_initialize 0001                 __size_of___ftge 0096                         ___awdiv 1E8E  
                       ___ftadd 120E                         ___awmod 2046                         ___ftdiv 1C2C  
                       ___ftneg 245C                         ___lldiv 1FBA                 __size_of___wmul 0028  
                _LCD_write_char 2138                         ___ftmul 1A4E                         ___llmod 20C8  
                       ___ftsub 22C2                         ___fttol 1B46                    __psmallconst 0300  
                       __pcinit 2270                      ??___ftpack 0006                 __size_of_fround 0244  
                       __ramtop 0300             LCD_write_char@value 001F                      ??___lltoft 000D  
                       __ptext0 1594                         __ptext1 03BA                         __ptext2 0BEA  
                       __ptext3 2480                         __ptext4 0FCA                         __ptext5 2046  
                       __ptext6 1E8E                         __ptext7 1834                         __ptext8 1944  
                       __ptext9 2210                      ??___lwtoft 000C                     ?__div_to_l_ 0001  
              LCD_write_char@D0 001E                LCD_write_char@D1 001D                LCD_write_char@D2 001C  
              LCD_write_char@D3 001B                         _dpowers 0301                         _current 0053  
                       _isdigit 2480                ___awmod@dividend 0001                         _lettura 004D  
                       _secondi 005D                      ??_delay_ms 0017        __end_of_delay_set_quartz 24D6  
                       _sprintf 03BA                         _voltage 0056                       _LCD_clear 2410  
          end_of_initialization 22B8       __size_of_LCD_write_string 0026                    _combinazioni 008E  
                 __Lmediumconst 0000                      ??_read_adc 0033             LCD_backlight@active 0001  
               ___lldiv@divisor 0005              LCD_cursor@blinking 001B                 ___lldiv@counter 000D  
        __end_of_LCD_write_char 21A8                         postdec2 000FDD                         postinc0 000FEE  
                       postinc2 000FDE      __size_of_LCD_write_message 002C                  __tdiv_to_l_@f1 0001  
                __tdiv_to_l_@f2 0004                   ??__tdiv_to_l_ 0007                       _PORTCbits 000F82  
      __end_of_LCD_send_command 236E                      ?_LCD_clear 0001         _clock_counter_reference 0089  
                   ___ftdiv@exp 0031             __size_of__div_to_l_ 010A         LCD_write_integer@F16259 0077  
                   ___ftmul@exp 001E                 ?_LCD_write_char 0001                  __end_of___ftge 1FBA  
                __end_of___wmul 23EA                   __pidataCOMRAM 24D9                  __end_of_fround 120E  
           start_initialization 2270             __end_of__tdiv_to_l_ 1944                 ___llmod@divisor 0005  
               ___llmod@counter 0009           __end_of_LCD_backlight 24CE                        ??___ftge 0007  
                      ??___wmul 0013                     __pdataBANK0 008E                __CFG_LPT1OSC$OFF 000000  
                      ??_fround 0027                   sprintf@tmpval 006D                      fround@prec 002D  
             __size_of___ftpack 00C6               ?_inizializzazione 0001               __size_of___lltoft 0060  
                   __pbssCOMRAM 004D               __size_of___lwtoft 0026                   __pcstackBANK0 0060  
            ??_inizializzazione 0022       __size_of_LCD_enable_pulse 001E               __size_of_delay_ms 0038  
                   ??_LCD_clear 001B         LCD_write_message@buffer 0020                _LCD_write_string 2436  
                   sprintf@flag 0065                     sprintf@fval 0073                     sprintf@prec 0071  
              ??_LCD_initialize 001D                       __pnvBANK0 0089       delay_set_quartz@frequency 0001  
             __size_of_read_adc 01C2              LCD_send_command@D0 0019              LCD_send_command@D1 0018  
            LCD_send_command@D2 0017              LCD_send_command@D3 001A           __end_of_LCD_goto_line 1E8E  
                      ?___awdiv 0007                        ?___ftadd 002E                        ?___awmod 0001  
                      ?___ftdiv 0024                        ?___ftneg 0001                        ?___lldiv 0001  
                      ?___ftmul 0015                        ?___llmod 0001                        ?___ftsub 003A  
                     __npowers_ 0329                        ?___fttol 002B                     __tdiv_to_l_ 1834  
                  ??__div_to_l_ 0007                     __smallconst 0300                        ?_isdigit 0001  
                      ?_sprintf 0040                  __size_of_scale 03E0               ?_delay_set_quartz 0001  
            ??_delay_set_quartz 0001                  ___wmul@product 0013                        _LATDbits 000F8C  
  _delay_quartz_frequency_value 005F              __end_of__div_to_l_ 1A4E                __CFG_WDTPS$32768 000000  
                    _ADCON0bits 000FC2               ___wmul@multiplier 000F               ?_LCD_send_command 0017  
            ??_LCD_send_command 001A                ??_LCD_write_char 001B               LCD_goto_line@line 001B  
                      __Hrparam 0000                        __Lrparam 0000                       read_adc@i 0035  
              __size_of___awdiv 0096                __size_of___ftadd 01C4                __size_of___awmod 0082  
              __size_of___ftdiv 00E2                __size_of___ftneg 0024                __size_of___lldiv 008C  
              __size_of___ftmul 00F8                __size_of___llmod 0070                __size_of___ftsub 0044  
              __size_of___fttol 00E6                        ___ftpack 1D0E                     _fround$1136 002A  
                   _fround$1137 0027                        ___lltoft 2210                     _isdigit$854 0002  
                      ___lwtoft 23EA                      sprintf@exp 006B                      sprintf@val 0067  
              __size_of_isdigit 0022                        _delay_ms 2306                _LCD_enable_pulse 24A2  
                      __ptext10 20C8                        __ptext11 1FBA                        __ptext20 1C2C  
                      __ptext12 1B46                        __ptext21 1D0E                        __ptext13 22C2  
                      __ptext30 2138                        __ptext22 21A8                        __ptext14 120E  
                      __ptext31 1DD4                        __ptext23 236E                        __ptext15 245C  
                      __ptext32 233E                        __ptext24 171A                        __ptext16 1F24  
                      __ptext33 24A2                        __ptext25 24CE                        __ptext17 13D2  
                      __ptext34 2306                        __ptext26 239A                        __ptext18 23EA  
                      __ptext35 23C2                        __ptext27 2410                        __ptext19 1A4E  
                      __ptext28 24C0                        __ptext29 2436                        __powers_ 0350  
              __size_of_sprintf 0830                        _read_adc 13D2                   __size_of_main 0186  
                      _rapporto 008B        __end_of_LCD_write_string 245C                      _LCD_cursor 239A  
                    _INTCONbits 000FF2                        isdigit@c 0003                        scale@scl 002A  
                     sprintf@ap 0063                __tdiv_to_l_@exp1 000F                       sprintf@sp 0040  
              __tdiv_to_l_@cntr 000E                __tdiv_to_l_@quot 000A                ___lldiv@dividend 0001  
     __size_of_inizializzazione 0068                    ?__tdiv_to_l_ 0001                        sprintf@c 0076  
                      sprintf@f 0042                ___lldiv@quotient 0009          __size_of_LCD_backlight 000E  
